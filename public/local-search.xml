<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>晚霞</title>
    <link href="/2025/01/09/poets/%E6%99%9A%E9%9C%9E/"/>
    <url>/2025/01/09/poets/%E6%99%9A%E9%9C%9E/</url>
    
    <content type="html"><![CDATA[<p>白昼飞红了她的脸颊<br>以隐匿于远山之后的凝望<br>默默期待着<br>月色的降临🌔</p><style>.markdown-body {    font-size: 1.2em;    text-align: center;    line-height: 3em;}</style>]]></content>
    
    
    <categories>
      
      <category>随机掉落的文字碎片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2025/01/09/JavaScript/"/>
    <url>/2025/01/09/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="创建JS代码块"><a href="#创建JS代码块" class="headerlink" title="创建JS代码块"></a>创建JS代码块</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="var-or-let"><a href="#var-or-let" class="headerlink" title="var or let?"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p><p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">myName = <span class="hljs-string">&quot;Chris&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">logName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName);<br>&#125;<br><br><span class="hljs-title function_">logName</span>(); <span class="hljs-comment">//输出&quot;Chris&quot;</span><br><br><span class="hljs-keyword">var</span> myName = <span class="hljs-string">&quot;Aniya&quot;</span>;<br><span class="hljs-title function_">logName</span>(); <span class="hljs-comment">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p><p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myName = <span class="hljs-string">&quot;Chris&quot;</span>;<br><span class="hljs-keyword">var</span> myName = <span class="hljs-string">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>而<code>let</code>只能声明一次:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;Chris&quot;</span>;<br>myName = <span class="hljs-string">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p><p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p><h3 id="变量命名的规则"><a href="#变量命名的规则" class="headerlink" title="变量命名的规则"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p><ul><li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li><li>不可用数字开头, 否则引发错误;</li><li>大小写敏感;</li><li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li><li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li></ul><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myAge = <span class="hljs-number">20</span> ;<span class="hljs-comment">// 数字</span><br><span class="hljs-keyword">let</span> dolphinGoodbye = <span class="hljs-string">&quot;So long and thanks for all the fish&quot;</span>; <span class="hljs-comment">// 字符串</span><br><span class="hljs-keyword">let</span> test = <span class="hljs-number">6</span> &lt; <span class="hljs-number">3</span>; <span class="hljs-comment">//boolean</span><br><br><span class="hljs-comment">//数组类型</span><br><span class="hljs-keyword">let</span> myNameArray = [<span class="hljs-string">&quot;Chris&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jim&quot;</span>];<br><span class="hljs-keyword">let</span> myNumberArray = [<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">40</span>];<br><br><span class="hljs-comment">//对象类型</span><br><span class="hljs-keyword">let</span> dog = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Spot&quot;</span>, <span class="hljs-attr">breed</span>: <span class="hljs-string">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure><blockquote><p>对象类型的访问与结构体相似, <code>dog.name;</code></p></blockquote><p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p><p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myNumber = <span class="hljs-string">&quot;500&quot;</span>;<br><span class="hljs-keyword">typeof</span> myNumber;<br><span class="hljs-comment">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class="hljs-number">500</span>; <br><span class="hljs-keyword">typeof</span> myNumber;<br><span class="hljs-comment">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>$\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">exampleFunction</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">exampleFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数内&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p></blockquote></li></ul><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greeding</span>(<span class="hljs-params">name = <span class="hljs-string">&quot;my friend&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class="hljs-title function_">hello</span>(); <span class="hljs-comment">//Hello, my friend!</span><br><span class="hljs-title function_">hello</span>(<span class="hljs-string">&quot;world&quot;</span>); <span class="hljs-comment">//Hello, world!</span><br></code></pre></td></tr></table></figure></p><p><br></p><p>事件处理函数的默认接受值是<code>event</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br>onclick<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>nothing here<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>)</span><br><span class="language-javascript">para = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;p&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">btn.<span class="hljs-property">onclick</span> = click;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">click</span>(<span class="hljs-params">string</span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clicked!&quot;</span>)</span><br><span class="language-javascript">  para.<span class="hljs-property">textContent</span> = string;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ol><li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li><li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">click</span>(<span class="hljs-params">string</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clicked!&quot;</span>)<br>  para.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;You have clicked the button!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\underline{匿名函数}$:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 匿名函数</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p><blockquote><p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p></blockquote><p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">logKey</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed &quot;<span class="hljs-subst">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed &quot;<span class="hljs-subst">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p><blockquote><p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p></blockquote><p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed &quot;<span class="hljs-subst">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class="hljs-comment">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`You pressed &quot;<span class="hljs-subst">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p><p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originals = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">const</span> doubled = originals.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doubled); <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p><blockquote><p><code>item =&gt; item * 2</code>等价于:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doubleItem</span>(<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textBox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;output&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> textBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#textBox&quot;</span>);<br><span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#output&quot;</span>);<br><br>textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  output.<span class="hljs-property">textContent</span> = <span class="hljs-string">`You pressed &quot;<span class="hljs-subst">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p><h3 id="函数作用域和冲突"><a href="#函数作用域和冲突" class="headerlink" title="函数作用域和冲突"></a>函数作用域和冲突</h3><p>$\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p><ul><li>全局作用域: 脚本模式运行所有代码的默认作用域;</li><li>模块作用域: 模块模式中运行代码的作用域;</li><li>函数作用域: 由函数创建的作用域</li></ul><p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p><p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;first.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;second.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  greeting();<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数字和操作符"><a href="#数字和操作符" class="headerlink" title="数字和操作符"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p><ul><li>JS当中只有一种数字类型 — <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li><li>算术运算符: 求幂为<code>**</code>;</li><li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li><li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote><p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p></blockquote></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>创建字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myString = <span class="hljs-string">&quot;A string&quot;</span>;<br><span class="hljs-keyword">const</span> constString = myString;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(constString);<br><span class="hljs-comment">//A string</span><br></code></pre></td></tr></table></figure><br>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> single = <span class="hljs-string">&#x27;单引号&#x27;</span>;<br><span class="hljs-keyword">const</span> double = <span class="hljs-string">&quot;双引号&quot;</span>;<br><span class="hljs-keyword">const</span> backtick = <span class="hljs-string">`反引号`</span>;<br></code></pre></td></tr></table></figure></p><p>反引号包裹的字符串称为$\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p><ul><li>可以嵌入 <strong>JavaScript</strong>;</li><li>可以声明<strong>多行</strong>的模板字面量.</li></ul><h4 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\underline{串联法}$:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;克里斯&quot;</span>;<br><span class="hljs-keyword">const</span> greeting = <span class="hljs-string">`你好，<span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting); <span class="hljs-comment">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>在模板字面量中用<code>$&#123;&#125;</code>包装JS的变量或者表达式.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> one = <span class="hljs-string">&quot;你好，&quot;</span>;<br><span class="hljs-keyword">const</span> two = <span class="hljs-string">&quot;请问最近如何？&quot;</span>;<br><span class="hljs-keyword">const</span> joined = <span class="hljs-string">`<span class="hljs-subst">$&#123;one&#125;</span><span class="hljs-subst">$&#123;two&#125;</span>`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(joined); <span class="hljs-comment">// &quot;你好，请问最近如何？&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>连接2个变量.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> song = <span class="hljs-string">&quot;青花瓷&quot;</span>;<br><span class="hljs-keyword">const</span> score = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">const</span> highestScore = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> output = <span class="hljs-string">`我喜欢歌曲《<span class="hljs-subst">$&#123;song&#125;</span>》。我给它打了 <span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">  (score / highestScore) * <span class="hljs-number">100</span></span></span><br><span class="hljs-subst"><span class="hljs-string">&#125;</span> 分。`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output); <span class="hljs-comment">// &quot;我喜欢歌曲《青花瓷》。我给它打了 90 分。&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>在模板字面量的<code>$&#123;&#125;</code>内部包含表达式.</p></blockquote><p><br><br>除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用<code>+</code>直接连接:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> greeting = <span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;克里斯&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting + <span class="hljs-string">&quot;，&quot;</span> + name); <span class="hljs-comment">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p><h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newline = <span class="hljs-string">`终于有一天，</span><br><span class="hljs-string">你知道了必须做的事情，而且开始……`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newline);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">终于有一天，</span><br><span class="hljs-comment">你知道了必须做的事情，而且开始……</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></p><p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\n</code>,而非直接跨行:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newline = <span class="hljs-string">&quot;终于有一天，\n你知道了必须做的事情，而且开始……&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newline);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">终于有一天，</span><br><span class="hljs-comment">你知道了必须做的事情，而且开始……</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></p><h4 id="显示引号"><a href="#显示引号" class="headerlink" title="显示引号"></a>显示引号</h4><ol><li>$\underline{转义}$  通过在符号前加上反斜杠<code>\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bigmouth = <span class="hljs-string">&#x27;I\&#x27;ve got no right to take my place…&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>换用其他字符: 在字面量内用不同于包裹字符串的引号:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> goodQuotes1 = <span class="hljs-string">&#x27;She said &quot;I think so!&quot;&#x27;</span>;<br><span class="hljs-keyword">const</span> goodQuotes2 = <span class="hljs-string">`She said &quot;I&#x27;m not going in there!&quot;`</span>;<br></code></pre></td></tr></table></figure></li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p><ul><li><code>.length</code>: 获取字符串的长度;</li><li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li><li><code>.indexOf(&quot;&quot;)</code>: 查找子字符串<ul><li><strong>input</strong>: 希望查找的子字符串;</li><li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li></ul></li><li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul><li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li><li><strong>output</strong>: 截取的子字符串;</li></ul></li></ul><p>更多的<code>slice</code>知识:</p><ol><li>$\underline{标准化负值}$ 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li><li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li><li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li></ol><ul><li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li><li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote><p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p></blockquote></li></ul><h4 id="Cases"><a href="#Cases" class="headerlink" title="Cases"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p><ul><li><strong>input</strong>: <code>&quot;str3&quot;</code>三位长字符串+<code>&quot;...&quot;</code>(无关字符串)+<code>&quot;;&quot;</code>+<code>strLast</code>(剩余字符串);</li><li><strong>output</strong>: <code>&quot;str3&quot;+&quot;;&quot;+strLast</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> stations = [<span class="hljs-string">&#x27;MAN675847583748sjt567654;Manchester Piccadilly&#x27;</span>,<br>                <span class="hljs-string">&#x27;GNF576746573fhdg4737dh4;Greenfield&#x27;</span>,<br>                <span class="hljs-string">&#x27;LIV5hg65hd737456236dch46dg4;Liverpool Lime Street&#x27;</span>,<br>                <span class="hljs-string">&#x27;SYB4f65hf75f736463;Stalybridge&#x27;</span>,<br>                <span class="hljs-string">&#x27;HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield&#x27;</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; stations.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-keyword">var</span> input = stations[i];<br>    <span class="hljs-keyword">var</span> str3 = input.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">var</span> strLast = input.<span class="hljs-title function_">slice</span>(input.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;;&quot;</span>)+<span class="hljs-number">1</span>); <span class="hljs-comment">//indexOf获取;位置</span><br>    <span class="hljs-keyword">var</span> output = str3 + <span class="hljs-string">&quot;;&quot;</span> + strLast;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p><ul><li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li><li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.output ul&#x27;</span>);<br>list.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">var</span> greetings = [<span class="hljs-string">&#x27;Happy Birthday!&#x27;</span>,<br>                 <span class="hljs-string">&#x27;Merry Christmas my love&#x27;</span>,<br>                 <span class="hljs-string">&#x27;A happy Christmas to all the family&#x27;</span>,<br>                 <span class="hljs-string">&#x27;You\&#x27;re all I want for Christmas&#x27;</span>,<br>                 <span class="hljs-string">&#x27;Get well soon&#x27;</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; greetings.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-keyword">var</span> input = greetings[i];<br>  <span class="hljs-keyword">if</span>(greetings[i].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Christmas&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = input;<br>    <span class="hljs-keyword">var</span> listItem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    listItem.<span class="hljs-property">textContent</span> = result;<br>    list.<span class="hljs-title function_">appendChild</span>(listItem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数字与字符串"><a href="#数字与字符串" class="headerlink" title="数字与字符串"></a>数字与字符串</h3><h4 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myString = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-keyword">const</span> myNum = <span class="hljs-title class_">Number</span>(myString);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> myNum);<br><span class="hljs-comment">// number</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myNum);<br><span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myNum2 = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> myString2 = <span class="hljs-title class_">String</span>(myNum2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> myString2);<br><span class="hljs-comment">// string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myString2);<br><span class="hljs-comment">// &quot;123&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>对于浮点数同样成立.</p></blockquote><h4 id="前后拼接"><a href="#前后拼接" class="headerlink" title="前后拼接"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Front &quot;</span>;<br><span class="hljs-keyword">const</span> number = <span class="hljs-number">242</span>;<br><span class="hljs-keyword">const</span> combine = name + number;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(combine); <span class="hljs-comment">//Front 242</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">typeof</span>(combine));  <span class="hljs-comment">//string</span><br></code></pre></td></tr></table></figure></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li>存储任意类型元素—字符串，数字，对象，变量，<strong>另一个数组</strong>;</li><li>可以 <strong>混合</strong> 元素类型:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> random = [<span class="hljs-string">&quot;tree&quot;</span>, <span class="hljs-number">795</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]];<br></code></pre></td></tr></table></figure></li><li>像访问字符串一样, 利用索引访问数组元素;</li><li>$\underline{多维数组}$ 包含数组的数组结构称为~</li></ol><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><ul><li>作用: 将一个字符串根据给定的字符分隔为字符串数组;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myData = <span class="hljs-string">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;<br><span class="hljs-keyword">let</span> myArray = myData.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myArray);<br> <span class="hljs-comment">// [&quot;Manchester&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;, &quot;Leeds&quot;, &quot;Carlisle&quot;]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myNewString = myArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>myNewString;<br></code></pre></td></tr></table></figure></p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> dogNames = [<span class="hljs-string">&quot;Rocket&quot;</span>, <span class="hljs-string">&quot;Flash&quot;</span>, <span class="hljs-string">&quot;Bella&quot;</span>, <span class="hljs-string">&quot;Slugger&quot;</span>];<br>dogNames.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//Rocket,Flash,Bella,Slugger</span><br></code></pre></td></tr></table></figure></p><h4 id="push-amp-pop"><a href="#push-amp-pop" class="headerlink" title="push &amp; pop"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p><ol><li>将会直接改写原来的数组,不需要重新赋值;</li><li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> newLength = myArray.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>,<span class="hljs-string">&quot;string&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myArray); <span class="hljs-comment">// [1, 2, 3, 4, 5, &quot;string&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newLength); <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure></li></ol><p>使用<code>.pop()</code>从数组中删除最后一个元素:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">myArray.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">//&quot;string&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myArray); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></p><ol><li>方法调用返回值就是删除的元素本身;</li><li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li></ol><blockquote><p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p></blockquote><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p><h3 id="天气预报"><a href="#天气预报" class="headerlink" title="天气预报"></a>天气预报</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;weather&quot;</span>&gt;</span>选择今天的天气：&lt;/label<br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;weather&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--作出选择--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sunny&quot;</span>&gt;</span>晴天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rainy&quot;</span>&gt;</span>雨天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;snowing&quot;</span>&gt;</span>雪天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;overcast&quot;</span>&gt;</span>阴天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> select = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;select&quot;</span>);<br><span class="hljs-keyword">const</span> para = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;p&quot;</span>);<br><br>select.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, setWeather);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setWeather</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> choice = select.<span class="hljs-property">value</span>;<br><br>  <span class="hljs-keyword">switch</span> (choice) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sunny&quot;</span>:<br>      para.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;rainy&quot;</span>:<br>      para.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;外面下着雨；带上雨衣和雨伞，不要在外面呆太久。&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;snowing&quot;</span>:<br>      para.<span class="hljs-property">textContent</span> =<br>        <span class="hljs-string">&quot;大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;overcast&quot;</span>:<br>      para.<span class="hljs-property">textContent</span> =<br>        <span class="hljs-string">&quot;虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>      para.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li><li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li><li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a href="https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html">simple-switch</a></li></ol></blockquote><h2 id="事件介绍"><a href="#事件介绍" class="headerlink" title="事件介绍"></a>事件介绍</h2><p>什么是$\underline{事件}$? </p><ul><li>用户选择、点击或者光标悬停在某一元素;</li><li>用户在键盘中按下某个按键;</li><li>网页结束加载;</li><li>…</li></ul><p>$\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p><h3 id="处理点击事件"><a href="#处理点击事件" class="headerlink" title="处理点击事件"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span> 改变颜色 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">number</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(number+<span class="hljs-number">1</span>));<br>  <br>&#125;<br></code></pre></td></tr></table></figure></p><ol><li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li><li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote><p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript</title>
    <link href="/2025/01/09/TypeScript/"/>
    <url>/2025/01/09/TypeScript/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>社会心理学</title>
    <link href="/2025/01/09/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <url>/2025/01/09/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="社会知觉"><a href="#社会知觉" class="headerlink" title="社会知觉"></a>社会知觉</h1><h2 id="非语言线索"><a href="#非语言线索" class="headerlink" title="非语言线索"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p><h2 id="印象形成"><a href="#印象形成" class="headerlink" title="印象形成"></a>印象形成</h2><p>顺序效应</p><ul><li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li><li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li></ul><p>晕轮效应</p><ul><li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li><li>与首因效应的区别: <blockquote><p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p></blockquote></li></ul><p>投射效应</p><ul><li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li><li>将自己的情感、特性投射到他人身上并强加于他人;</li></ul><h3 id="期望效应"><a href="#期望效应" class="headerlink" title="期望效应"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p><blockquote><p>自我实现预言 </p></blockquote><ul><li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li><li>人们的信念会影响他们的行为;</li></ul><p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p><h2 id="归因"><a href="#归因" class="headerlink" title="归因"></a>归因</h2><blockquote><p>Attribution theory</p></blockquote><p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p><p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p><ul><li>$\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li><li>$\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li></ul><h3 id="归因偏差"><a href="#归因偏差" class="headerlink" title="归因偏差"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p><p><strong>行为者-观察者偏差</strong>: </p><ul><li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li><li>为什么会产生上述区别?<ul><li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li><li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote><p>根据$\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p></blockquote></li></ul></li></ul><hr><p><strong>错误共识效应</strong>(False consensus effect): </p><ul><li>也称为 <strong>虚假一致性效应</strong>;</li><li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li><li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li></ul><hr><p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p><ul><li>认为每个人都应该为自己的行为负责;</li><li>分析行为的原因时, 倾向于追溯个人自身的原因;</li></ul><hr><p><strong>动机性归因偏差</strong>: </p><ul><li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li><li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li></ul><h1 id="自我"><a href="#自我" class="headerlink" title="自我"></a>自我</h1><h2 id="自我概念"><a href="#自我概念" class="headerlink" title="自我概念"></a>自我概念</h2><ul><li>$\underline{自我知觉}$: 对自己持有的信念之集合;</li><li>$\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li><li>$\underline{虚假一致性效应}$: </li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>媒体查询</title>
    <link href="/2025/01/08/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <url>/2025/01/08/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries">媒体查询入门指南</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries">使用编程方法测试媒体查询</a></p></blockquote><h1 id="媒体查询入门"><a href="#媒体查询入门" class="headerlink" title="媒体查询入门"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p><p>媒体查询的范式:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> media-type <span class="hljs-keyword">and</span> (media-feature) &#123;<br>    <span class="hljs-comment">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><ol><li>媒体类型用于声明css文件被用作什么类型的媒体;</li><li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li><li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li></ol></blockquote><p><strong>media-type</strong>: all, print, screen, speech.</p><h2 id="媒体特征"><a href="#媒体特征" class="headerlink" title="媒体特征"></a>媒体特征</h2><h3 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p><blockquote><p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">/* 窗口恰好等于600px时 */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="朝向"><a href="#朝向" class="headerlink" title="朝向"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: portrait) &#123;<br>    <span class="hljs-comment">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>    <span class="hljs-comment">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="更复杂的媒体查询"><a href="#更复杂的媒体查询" class="headerlink" title="更复杂的媒体查询"></a>更复杂的媒体查询</h2><ul><li><p><code>and</code>实现与逻辑:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">400px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>,</code>实现或逻辑:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape), (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">480px</span>) &#123;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class="hljs-comment">  */</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p></blockquote></li><li><p><code>not</code>实现非逻辑:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br><span class="hljs-comment">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>not</code>实现 <strong>反转查询</strong>:</p><blockquote><p>与最近的<code>and</code>组合所绑定, 注意优先级</p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>), print <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-keyword">not</span> (screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>))), print <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p><hr><h1 id="利用查询结果扩展设计"><a href="#利用查询结果扩展设计" class="headerlink" title="利用查询结果扩展设计"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p><ul><li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 检测设备的旋转方向是否为纵向</span><br><span class="hljs-keyword">var</span> mediaQueryList = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>检查属性<code>matches</code>获取对应的查询结果:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">if (mediaQueryList<span class="hljs-selector-class">.matches</span>) &#123;<br>  <span class="hljs-comment">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class="hljs-comment">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 定义媒体查询字符串</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">mediaQueryString</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;(orientation: portrait)&quot;</span>;<br><br><span class="hljs-comment">// 创建查询列表</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">mediaQueryList</span>: <span class="hljs-title class_">MediaQueryList</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(mediaQueryString);<br><br><span class="hljs-comment">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOrientationChange</span>(<span class="hljs-params"><span class="hljs-attr">event</span>: <span class="hljs-title class_">MediaQueryListEvent</span></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">matches</span>) &#123;<br>    <span class="hljs-comment">// 媒体查询匹配（竖屏）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class="hljs-comment">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 媒体查询不匹配（横屏）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class="hljs-comment">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class="hljs-title function_">handleOrientationChange</span>(&#123;<br>    <span class="hljs-attr">matches</span>: mediaQueryList.<span class="hljs-property">matches</span>,<br>    <span class="hljs-attr">media</span>: mediaQueryList.<span class="hljs-property">media</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;change&#x27;</span>,<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">MediaQueryListEvent</span>);<br><br><span class="hljs-comment">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class="hljs-comment">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class="hljs-comment">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css笔记</title>
    <link href="/2025/01/08/css%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/08/css%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://jsfiddle.net/?locale=zh_CN">在线编辑平台</a></p></blockquote><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span>待抉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.author</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;Author: &quot;</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-comment">/* 加粗字体 */</span></span><br><span class="language-css">  <span class="hljs-attribute">color</span>: blue; <span class="hljs-comment">/* 文本颜色为蓝色 */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.author</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; ✍️&quot;</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>; <span class="hljs-comment">/* 调整图标大小 */</span></span><br><span class="language-css">  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>; <span class="hljs-comment">/* 添加左边距 */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index-card&quot;</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index-card&quot;</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index-card&quot;</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index-card&quot;</span>&gt;</span>内容4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.index-card</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="language-css">  <span class="hljs-attribute">flex-direction</span>: row-reverse;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li>选择所有类名为 “index-card” 的元素;</li><li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote><p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p></blockquote></li></ul><h3 id="基本的元素属性"><a href="#基本的元素属性" class="headerlink" title="基本的元素属性"></a>基本的元素属性</h3><h4 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h4><ul><li><code>margin</code>: 控制元素的外边距;</li><li><code>padding</code>: 控制元素的内边距;</li></ul><h4 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h4><ul><li><code>font-size</code>: 控制字体大小;</li><li><code>font-weight</code>: 控制字体粗细;</li><li><code>text-align</code>: 控制文本的对齐方式;</li><li><code>text-decoration</code>: 控制文本的装饰;</li><li><code>line-height</code>: 控制行高;</li><li><code>letter-spacing</code>: 控制字符间距;</li><li><code>text-transform</code>: 控制文本的大小写;</li></ul><h4 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h4><ul><li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li><li><code>border-radius</code>: 控制元素的圆角;</li><li><code>border-style</code>: solid, dashed, dotted…</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><code>overflow</code>: visible, hidden, scroll, auto;</li><li><code>opacity</code>: 控制元素的透明度;</li><li><code>cursor</code>: pointer, default, move, not-allowed…</li></ul><h3 id="动感魔法"><a href="#动感魔法" class="headerlink" title="动感魔法"></a>动感魔法</h3><h4 id="hover效果"><a href="#hover效果" class="headerlink" title="hover效果"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.my-element</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p></blockquote><p>其他的一些常用的伪类:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>    <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: green;<br>    &#125;<br>    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>      <span class="hljs-attribute">border-color</span>: blue;<br>    &#125;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>      <span class="hljs-attribute">color</span>: purple;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>      <span class="hljs-attribute">font-weight</span>: bold;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>      <span class="hljs-attribute">font-style</span>: italic;<br>    &#125;<br>    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:only-child</span> &#123;<br>      <span class="hljs-attribute">color</span>: green;<br>    &#125;<br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:empty</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 定义Flex容器 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex; <span class="hljs-comment">/* 将容器设置为Flexbox容器 */</span></span><br><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-comment">/* flex-direction: 定义主轴方向 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* row: 水平从左到右（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* row-reverse: 水平从右到左 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* column: 垂直从上到下 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* column-reverse: 垂直从下到上 */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-direction</span>: row; <span class="hljs-comment">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* flex-wrap: 定义是否换行 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* nowrap: 不换行（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* wrap: 换行 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* wrap-reverse: 反向换行 */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-wrap</span>: wrap; <span class="hljs-comment">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-flow</span>: row wrap; <span class="hljs-comment">/* 可以改为column nowrap等组合 */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-start: 起始对齐（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-end: 末端对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* center: 居中对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class="language-css">      <span class="hljs-attribute">justify-content</span>: space-between; <span class="hljs-comment">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* center: 交叉轴居中对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* baseline: 项目基线对齐 */</span></span><br><span class="language-css">      <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* center: 交叉轴居中对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class="language-css">      <span class="hljs-attribute">align-content</span>: space-between; <span class="hljs-comment">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 设置容器高度 */</span></span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>; <span class="hljs-comment">/* 设置容器背景颜色 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-comment">/* 定义Flex项目 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 设置项目内边距 */</span></span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: lightblue; <span class="hljs-comment">/* 设置项目背景颜色 */</span></span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置项目外边距 */</span></span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center; <span class="hljs-comment">/* 设置项目文本居中 */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<span class="hljs-comment">/*尝试向flex容器扩展空间*/</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>倦鸟</title>
    <link href="/2025/01/08/poets/bird/"/>
    <url>/2025/01/08/poets/bird/</url>
    
    <content type="html"><![CDATA[<p>我盘旋的目光是漂泊不息的倦鸟</p><p>越过人海 落入你乌黑瞳仁中的夜</p><style>.markdown-body {    font-size: 1.2em;    text-align: center;    line-height: 3em;}</style>]]></content>
    
    
    <categories>
      
      <category>随机掉落的文字碎片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站第一天</title>
    <link href="/2025/01/08/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2025/01/08/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p><p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p><h2 id="为什么搭建这个博客-😋"><a href="#为什么搭建这个博客-😋" class="headerlink" title="为什么搭建这个博客?😋"></a>为什么搭建这个博客?😋</h2><ul><li>记录一下自己的学习历程</li><li>为生活的碎片留档, <del>越来越不想用puq了</del></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2025/01/08/course_notes/My-New-Post/"/>
    <url>/2025/01/08/course_notes/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h3 id="犯错问题"><a href="#犯错问题" class="headerlink" title="犯错问题"></a>犯错问题</h3><p>第一类错误: $\alpha = P_{H_0为真} \{落在拒绝域\}$</p><p>第二类错误: $\beta = P_{H_0为假} \{落在接受域\}$ </p><p>解题策略:</p><ol><li>根据犯错类型求出包含参数的式子;</li><li>根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);</li><li>然后根据已知分布求解概率.</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
