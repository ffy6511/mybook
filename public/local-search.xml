<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>社会心理学</title>
    <link href="/2025/01/09/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <url>/2025/01/09/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="社会知觉"><a href="#社会知觉" class="headerlink" title="社会知觉"></a>社会知觉</h1><h2 id="非语言线索"><a href="#非语言线索" class="headerlink" title="非语言线索"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p><h2 id="印象形成"><a href="#印象形成" class="headerlink" title="印象形成"></a>印象形成</h2><p>顺序效应</p><ul><li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li><li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li></ul><p>晕轮效应</p><ul><li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li><li>与首因效应的区别: <blockquote><p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p></blockquote></li></ul><p>投射效应</p><ul><li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li><li>将自己的情感、特性投射到他人身上并强加于他人;</li></ul><h3 id="期望效应"><a href="#期望效应" class="headerlink" title="期望效应"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p><blockquote><p>自我实现预言 </p></blockquote><ul><li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li><li>人们的信念会影响他们的行为;</li></ul><p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p><h2 id="归因"><a href="#归因" class="headerlink" title="归因"></a>归因</h2><blockquote><p>Attribution theory</p></blockquote><p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p><p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p><ul><li>$\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li><li>$\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li></ul><h3 id="归因偏差"><a href="#归因偏差" class="headerlink" title="归因偏差"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p><p><strong>行为者-观察者偏差</strong>: </p><ul><li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li><li>为什么会产生上述区别?<ul><li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li><li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote><p>根据$\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p></blockquote></li></ul></li></ul><hr><p><strong>错误共识效应</strong>(False consensus effect): </p><ul><li>也称为 <strong>虚假一致性效应</strong>;</li><li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li><li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li></ul><hr><p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p><ul><li>认为每个人都应该为自己的行为负责;</li><li>分析行为的原因时, 倾向于追溯个人自身的原因;</li></ul><hr><p><strong>动机性归因偏差</strong>: </p><ul><li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li><li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li></ul><h1 id="自我"><a href="#自我" class="headerlink" title="自我"></a>自我</h1><h2 id="自我概念"><a href="#自我概念" class="headerlink" title="自我概念"></a>自我概念</h2><ul><li>$\underline{自我知觉}$: 对自己持有的信念之集合;</li><li>$\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li><li>$\underline{虚假一致性效应}$: </li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>媒体查询</title>
    <link href="/2025/01/08/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <url>/2025/01/08/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries">媒体查询入门指南</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries">使用编程方法测试媒体查询</a></p></blockquote><h1 id="媒体查询入门"><a href="#媒体查询入门" class="headerlink" title="媒体查询入门"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p><p>媒体查询的范式:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> media-type <span class="hljs-keyword">and</span> (media-feature) &#123;<br>    <span class="hljs-comment">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><ol><li>媒体类型用于声明css文件被用作什么类型的媒体;</li><li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li><li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li></ol></blockquote><p><strong>media-type</strong>: all, print, screen, speech.</p><h2 id="媒体特征"><a href="#媒体特征" class="headerlink" title="媒体特征"></a>媒体特征</h2><h3 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p><blockquote><p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">/* 窗口恰好等于600px时 */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="朝向"><a href="#朝向" class="headerlink" title="朝向"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: portrait) &#123;<br>    <span class="hljs-comment">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>    <span class="hljs-comment">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="更复杂的媒体查询"><a href="#更复杂的媒体查询" class="headerlink" title="更复杂的媒体查询"></a>更复杂的媒体查询</h2><ul><li><p><code>and</code>实现与逻辑:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">400px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>,</code>实现或逻辑:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape), (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">480px</span>) &#123;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class="hljs-comment">  */</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p></blockquote></li><li><p><code>not</code>实现非逻辑:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br><span class="hljs-comment">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>not</code>实现 <strong>反转查询</strong>:</p><blockquote><p>与最近的<code>and</code>组合所绑定, 注意优先级</p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>), print <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-keyword">not</span> (screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>))), print <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p><hr><h1 id="利用查询结果扩展设计"><a href="#利用查询结果扩展设计" class="headerlink" title="利用查询结果扩展设计"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p><ul><li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 检测设备的旋转方向是否为纵向</span><br><span class="hljs-keyword">var</span> mediaQueryList = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>检查属性<code>matches</code>获取对应的查询结果:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">if (mediaQueryList<span class="hljs-selector-class">.matches</span>) &#123;<br>  <span class="hljs-comment">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class="hljs-comment">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 定义媒体查询字符串</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">mediaQueryString</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;(orientation: portrait)&quot;</span>;<br><br><span class="hljs-comment">// 创建查询列表</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">mediaQueryList</span>: <span class="hljs-title class_">MediaQueryList</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(mediaQueryString);<br><br><span class="hljs-comment">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOrientationChange</span>(<span class="hljs-params"><span class="hljs-attr">event</span>: <span class="hljs-title class_">MediaQueryListEvent</span></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">matches</span>) &#123;<br>    <span class="hljs-comment">// 媒体查询匹配（竖屏）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class="hljs-comment">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 媒体查询不匹配（横屏）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class="hljs-comment">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class="hljs-title function_">handleOrientationChange</span>(&#123;<br>    <span class="hljs-attr">matches</span>: mediaQueryList.<span class="hljs-property">matches</span>,<br>    <span class="hljs-attr">media</span>: mediaQueryList.<span class="hljs-property">media</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;change&#x27;</span>,<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">MediaQueryListEvent</span>);<br><br><span class="hljs-comment">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class="hljs-comment">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class="hljs-comment">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css笔记</title>
    <link href="/2025/01/08/css%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/08/css%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://jsfiddle.net/?locale=zh_CN">在线编辑平台</a></p></blockquote><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span>待抉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.author</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;Author: &quot;</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-comment">/* 加粗字体 */</span><br>  <span class="hljs-attribute">color</span>: blue; <span class="hljs-comment">/* 文本颜色为蓝色 */</span><br>&#125;<br><span class="hljs-selector-class">.author</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; ✍️&quot;</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>; <span class="hljs-comment">/* 调整图标大小 */</span><br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>; <span class="hljs-comment">/* 添加左边距 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="基本的元素属性"><a href="#基本的元素属性" class="headerlink" title="基本的元素属性"></a>基本的元素属性</h3><h4 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h4><ul><li><code>margin</code>: 控制元素的外边距;</li><li><code>padding</code>: 控制元素的内边距;</li></ul><h4 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h4><ul><li><code>font-size</code>: 控制字体大小;</li><li><code>font-weight</code>: 控制字体粗细;</li><li><code>text-align</code>: 控制文本的对齐方式;</li><li><code>text-decoration</code>: 控制文本的装饰;</li><li><code>line-height</code>: 控制行高;</li><li><code>letter-spacing</code>: 控制字符间距;</li><li><code>text-transform</code>: 控制文本的大小写;</li></ul><h4 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h4><ul><li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li><li><code>border-radius</code>: 控制元素的圆角;</li><li><code>border-style</code>: solid, dashed, dotted…</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><code>overflow</code>: visible, hidden, scroll, auto;</li><li><code>opacity</code>: 控制元素的透明度;</li><li><code>cursor</code>: pointer, default, move, not-allowed…</li></ul><h3 id="动感魔法"><a href="#动感魔法" class="headerlink" title="动感魔法"></a>动感魔法</h3><h4 id="hover效果"><a href="#hover效果" class="headerlink" title="hover效果"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.my-element</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><blockquote><p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p></blockquote><p>其他的一些常用的伪类:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>    <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: green;<br>    &#125;<br>    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>      <span class="hljs-attribute">border-color</span>: blue;<br>    &#125;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>      <span class="hljs-attribute">color</span>: purple;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>      <span class="hljs-attribute">font-weight</span>: bold;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>      <span class="hljs-attribute">font-style</span>: italic;<br>    &#125;<br>    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:only-child</span> &#123;<br>      <span class="hljs-attribute">color</span>: green;<br>    &#125;<br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:empty</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 定义Flex容器 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex; <span class="hljs-comment">/* 将容器设置为Flexbox容器 */</span></span><br><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-comment">/* flex-direction: 定义主轴方向 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* row: 水平从左到右（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* row-reverse: 水平从右到左 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* column: 垂直从上到下 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* column-reverse: 垂直从下到上 */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-direction</span>: row; <span class="hljs-comment">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* flex-wrap: 定义是否换行 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* nowrap: 不换行（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* wrap: 换行 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* wrap-reverse: 反向换行 */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-wrap</span>: wrap; <span class="hljs-comment">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-flow</span>: row wrap; <span class="hljs-comment">/* 可以改为column nowrap等组合 */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-start: 起始对齐（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-end: 末端对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* center: 居中对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class="language-css">      <span class="hljs-attribute">justify-content</span>: space-between; <span class="hljs-comment">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* center: 交叉轴居中对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* baseline: 项目基线对齐 */</span></span><br><span class="language-css">      <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-comment">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* center: 交叉轴居中对齐 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class="language-css">      <span class="hljs-comment">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class="language-css">      <span class="hljs-attribute">align-content</span>: space-between; <span class="hljs-comment">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 设置容器高度 */</span></span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>; <span class="hljs-comment">/* 设置容器背景颜色 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-comment">/* 定义Flex项目 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 设置项目内边距 */</span></span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: lightblue; <span class="hljs-comment">/* 设置项目背景颜色 */</span></span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置项目外边距 */</span></span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center; <span class="hljs-comment">/* 设置项目文本居中 */</span></span><br><span class="language-css">      <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<span class="hljs-comment">/*尝试向flex容器扩展空间*/</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>建站第一天</title>
    <link href="/2025/01/08/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2025/01/08/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p><p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p><h2 id="为什么搭建这个博客-😋"><a href="#为什么搭建这个博客-😋" class="headerlink" title="为什么搭建这个博客?😋"></a>为什么搭建这个博客?😋</h2><ul><li>记录一下自己的学习历程</li><li>为生活的碎片留档, <del>越来越不想用puq了</del></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2025/01/08/course_notes/My-New-Post/"/>
    <url>/2025/01/08/course_notes/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h3 id="犯错问题"><a href="#犯错问题" class="headerlink" title="犯错问题"></a>犯错问题</h3><p>第一类错误: $\alpha = P_{H_0为真} \{落在拒绝域\}$</p><p>第二类错误: $\beta = P_{H_0为假} \{落在接受域\}$ </p><p>解题策略:</p><ol><li>根据犯错类型求出包含参数的式子;</li><li>根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);</li><li>然后根据已知分布求解概率.</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Bird</title>
    <link href="/2025/01/08/poets/bird/"/>
    <url>/2025/01/08/poets/bird/</url>
    
    <content type="html"><![CDATA[<p>我盘旋的目光是漂泊不息的倦鸟<br>越过人海 落入你乌黑瞳仁中的夜</p><style>.markdown-body {    font-size: 1.2em;    text-align: center;    line-height: 2em;}</style>]]></content>
    
    
    <categories>
      
      <category>poets</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poet</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
