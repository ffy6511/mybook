{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/Aniya.png","path":"img/Aniya.png","modified":0,"renderable":0},{"_id":"source/img/Aniya_放大镜.jpg","path":"img/Aniya_放大镜.jpg","modified":0,"renderable":0},{"_id":"source/img/JS.png","path":"img/JS.png","modified":0,"renderable":0},{"_id":"source/img/me.jpg","path":"img/me.jpg","modified":0,"renderable":0},{"_id":"source/img/sun.png","path":"img/sun.png","modified":0,"renderable":0},{"_id":"source/img/倦鸟.png","path":"img/倦鸟.png","modified":0,"renderable":0},{"_id":"source/img/社会心理学.png","path":"img/社会心理学.png","modified":0,"renderable":0},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","path":"fonts/LXGWWenKaiGBScreen.ttf","modified":0,"renderable":0}],"Cache":[{"_id":"source/_drafts/my-fisrt-draft.md","hash":"e142445800a90b2f3e176061f51fc052d41c884e","modified":1736673770692},{"_id":"source/_posts/TypeScript.md","hash":"57a18df423b0b8669e6611654f99c8b27bfa08c8","modified":1736673770692},{"_id":"source/_posts/建站第一天.md","hash":"7240a62c7c309f7597241040f3a6b074e5d4b075","modified":1736686683623},{"_id":"source/_posts/css笔记.md","hash":"d5b19c096ecb71547258909d189bed754fdb9953","modified":1736686683622},{"_id":"source/css/custom.css","hash":"00759e8cfafe7f9fd8ce8af0f23df52d33e3513a","modified":1736686683624},{"_id":"source/_posts/社会心理学.md","hash":"496b650cc0979702c28dc5cb80fd8d78d6c08b9f","modified":1736686683624},{"_id":"source/img/JS.png","hash":"a115cbbec848dea5824181ef22411d8efc6dbfa8","modified":1736686683624},{"_id":"source/about/index.md","hash":"51db98c8124ff2a7c6297aa8a8cfc4bd04303bc0","modified":1736673770693},{"_id":"source/_posts/JavaScript.md","hash":"c5ebae43fefcef352bc172b7970de479079283d7","modified":1736737885903},{"_id":"source/_posts/媒体查询.md","hash":"8b9a4e3c522b374fdf64270a4011b5b3a15c9001","modified":1736673770693},{"_id":"source/_posts/poets/bird.md","hash":"8e63632b4b8097ed232ef9a1a60f51f478859d20","modified":1736686683623},{"_id":"source/_posts/poets/晚霞.md","hash":"438270a92a78dcd4c6ccde0b2638b6e81d54fad8","modified":1736686683623},{"_id":"source/_posts/course_notes/My-New-Post.md","hash":"313faf52ee5f84ddea672ac9342aacea61b1309a","modified":1736673770693},{"_id":"source/img/Aniya_放大镜.jpg","hash":"538ff8e7ac38f341c0166820d43617d73675cc86","modified":1736673770750},{"_id":"source/img/me.jpg","hash":"bdfdab38c41980cff966c08ea26ca8699948cbd6","modified":1736673770750},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1736673731553},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1736673731521},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1736673731541},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1736673731522},{"_id":"themes/fluid/package.json","hash":"d56f9287f8d95211c592fb8ffd27e9f409b96f61","modified":1736687131921},{"_id":"themes/fluid/README_en.md","hash":"4094caaa0e438ebb74064f1583c7eebb6685edba","modified":1736673731542},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1736673731542},{"_id":"themes/fluid/README.md","hash":"0f60b4293ffbe773a375d5acbdd9b9d6fd522655","modified":1736673731542},{"_id":"themes/fluid/_config.yml","hash":"d148650e117cda38f15109270f490f2e1d2f5f92","modified":1736686899930},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1736673731542},{"_id":"themes/fluid/.git_disabled/COMMIT_EDITMSG","hash":"fd57566f7ce1e8019895259cdada6f63ad07a5f6","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/config","hash":"3ab2fe2925ca20758e580f9434f45490793086e6","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/FETCH_HEAD","hash":"16df760bc40f5ab5031e2213e1fb8f57364563fa","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/packed-refs","hash":"da6fba9baad2e9bee8c619c4ea063288470bc1a2","modified":1736673731540},{"_id":"themes/fluid/package-lock.json","hash":"5fbd8abd7864b8df60656987e34a1b9224e20b41","modified":1736687131929},{"_id":"themes/fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1736673731542},{"_id":"themes/fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1736673731542},{"_id":"themes/fluid/.git_disabled/index","hash":"d923037bc848723a3270125a606b2e03239659a1","modified":1736673731523},{"_id":"themes/fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1736673731542},{"_id":"themes/fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1736673731542},{"_id":"themes/fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1736673731542},{"_id":"themes/fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1736673731543},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1736673731543},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1736673731543},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1736673731543},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1736673731543},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1736673731547},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1736673731547},{"_id":"themes/fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1736673731546},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1736673731547},{"_id":"themes/fluid/layout/index.ejs","hash":"e46d610f256a9ec48f10530b08764431819d9ca3","modified":1736673731547},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1736673731547},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1736673731547},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1736673731547},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1736673731547},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1736673731547},{"_id":"themes/fluid/.git_disabled/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1736673731522},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1736673731547},{"_id":"themes/fluid/.git_disabled/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/pre-commit.sample","hash":"8093d68e142db52dcab2215e770ba0bbe4cfbf24","modified":1736673731522},{"_id":"themes/fluid/.git_disabled/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/sendemail-validate.sample","hash":"74cf1d5415a5c03c110240f749491297d65c4c98","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/logs/HEAD","hash":"ec0a9db5365aff4dd2c442f79acb602c4491a870","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1736673731523},{"_id":"themes/fluid/.git_disabled/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1736673731522},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1736673731541},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1736673731541},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1736673731541},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1736673731541},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1736673731541},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1736673731541},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1736673731541},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1736673731541},{"_id":"themes/fluid/layout/_partials/antd-icons.ejs","hash":"68dedd6f5f57e612a294386714fcab4d5d390123","modified":1736673731543},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1736673731543},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1736673731543},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1736673731542},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1736673731543},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1736673731543},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1736673731544},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1736673731547},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1736673731548},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1736673731545},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1736673731548},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1736673731548},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1736673731548},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1736673731548},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1736673731548},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1736673731545},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1736673731548},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1736673731549},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1736673731549},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1736673731549},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1736673731549},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1736673731546},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1736673731549},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1736673731549},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"e2c5ad258db47d4c1ef9dcd448f05194cbf75c6b","modified":1736673731549},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1736673731549},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1736673731549},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1736673731549},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1736673731550},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1736673731549},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1736673731550},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1736673731549},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1736673731550},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1736673731550},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1736673731550},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1736673731550},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1736673731550},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1736673731550},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1736673731554},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1736673731554},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1736673731554},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1736673731554},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1736673731561},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1736673731554},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1736673731562},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1736673731562},{"_id":"themes/fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1736673731562},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1736673731562},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1736673731562},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1736673731562},{"_id":"themes/fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1736673731562},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1736673731549},{"_id":"themes/fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1736673731562},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1736673731563},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1736673731563},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1736673731562},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1736673731546},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1736673731562},{"_id":"themes/fluid/.git_disabled/objects/03/b72c85d32c229cec7617f94237b5f82fe8bb8b","hash":"eb43556a86ed7593a52df90995e5faa57ea5cb50","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/objects/00/78d0d75133d5b434e3260d561fa5c068e44309","hash":"45319cbe4586af090395e79c77ffe12bdf89d8eb","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/objects/0b/e6d119a733b8b66ec40ed3ac4a1fe3a5c4bbea","hash":"492421525409da4d6d3389e76184eb1b3dbcb210","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/objects/3a/0db48969207ce667a749c585390bd699cc9f1b","hash":"7ae670e833ddefbdafcc500f093abc8fc46d607c","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/08/f5a0c9a9bb89c8ac73a499f19843d20d573733","hash":"99c47871d716918e58c0b46d1e30180245ad74cb","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/objects/28/ce8acfebabea8135a148740494dd250896eba3","hash":"709e99c2209d9cb73b56455c3f2ecc126a61fb5c","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/60/e6dfbe1ebb483f9ae2af2ba4c38f6f9755b493","hash":"2c257b418b15ae0591690a72c2c9efaec810674d","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/79/336654b38af701f06db59ce9d12e1c4d7d914f","hash":"644ab9000f3c464a9fb190c12285561b4fcc137d","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/6a/a71fedfd1e2925df6a749fb856afba278955c8","hash":"431530548cd082f8260dacc7d9ba58f682261160","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/56/6a6c1dba6660106a7c144842800cce23bf83c9","hash":"ad56e6783fc689b7e21097a263e3952adf62461f","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/8c/8dd0798cca4222f9b9811eb0572002cecd85ff","hash":"38208f9d07a87619ef109dcc0380faec0b5f43ef","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/d6/580819d43d6c8dd53fa996ce5d0af9d2f1d15f","hash":"72a4600903b281f2564e8abd3be951f41a5b3580","modified":1736673731526},{"_id":"themes/fluid/.git_disabled/objects/22/1908ede962f58ac5d7cab6727e49a7be98e117","hash":"8898d3e472b4bacbb9c21d3592e5ff367d5dc88b","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/objects/f6/1685e509bb41f3e75b6c31264619930e0f54b1","hash":"0ece7f1fcaa98d3160790b402934edeceab9ce54","modified":1736673731526},{"_id":"themes/fluid/.git_disabled/objects/50/257e2e7bfe58de357d5686fb0d5056310c2ad5","hash":"2b9a6b1dff8c64fb92599ed48adfae1ce9d69b3b","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/a9/777c1a04071959ab5330556d665b1fec381508","hash":"b02787623a49a3593f46dabde070caf7751e0ad3","modified":1736673731526},{"_id":"themes/fluid/.git_disabled/objects/9c/8e57226a9b3f6f5a510f22665bf69101f31b51","hash":"863c3914c48c218acd5d21e5f84919802b50f6c9","modified":1736673731525},{"_id":"themes/fluid/.git_disabled/objects/ea/7224f1dd5babac4f446c15aec585eb1a4cfdbd","hash":"1bd25f62222c042160f8b5638da0ca380065ce21","modified":1736673731526},{"_id":"themes/fluid/.git_disabled/refs/heads/master","hash":"33cb2a41126ae4a1fcb0c28ba2f9e368bf51256a","modified":1736673731541},{"_id":"themes/fluid/.git_disabled/objects/bd/c7d69211de2d269dcc2bbbbffb95f13f7566ad","hash":"f04bfffacd9acafadf69dd95d362b24ff10bff35","modified":1736673731526},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1736673731543},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1736673731543},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1736673731544},{"_id":"themes/fluid/.git_disabled/objects/pack/pack-d608008952e8c5967743c72952523d8995190b0f.rev","hash":"f6b3da3d44e60a8ab6c186ade129b084d2c47ed2","modified":1736673731540},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1736673731544},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1736673731546},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1736673731545},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1736673731546},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1736673731546},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1736673731546},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1736673731546},{"_id":"themes/fluid/scripts/events/lib/antd-icons.js","hash":"f8e2f9df089f6d7287c06233d84284a8b872420f","modified":1736673731547},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1736673731548},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1736673731546},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1736673731548},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1736673731546},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1736673731546},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1736673731548},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1736673731548},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1736673731548},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1736673731548},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1736673731546},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1736673731546},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1736673731548},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1736673731554},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1736673731550},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1736673731554},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1736673731550},{"_id":"themes/fluid/.git_disabled/logs/refs/heads/master","hash":"ec0a9db5365aff4dd2c442f79acb602c4491a870","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/refs/remotes/origin/master","hash":"33cb2a41126ae4a1fcb0c28ba2f9e368bf51256a","modified":1736673731541},{"_id":"themes/fluid/.git_disabled/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1736673731541},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"6f9835cfceeaf8c4168be0cb528b7bcd3c3e7bab","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1736673731553},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1736673731554},{"_id":"themes/fluid/.git_disabled/logs/refs/remotes/origin/HEAD","hash":"2fb8dafbb66cb82b884c2df9d74e3c8d6a64ee57","modified":1736673731524},{"_id":"themes/fluid/.git_disabled/logs/refs/remotes/origin/master","hash":"ff6797d0227c2014029befd86a76fc12cfc99ecc","modified":1736673731524},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1736673731551},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1736673731552},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1736673731552},{"_id":"themes/fluid/.git_disabled/objects/pack/pack-d608008952e8c5967743c72952523d8995190b0f.idx","hash":"4bfd68b447b42d933e7b1b26423946da4f902308","modified":1736673731526},{"_id":"source/img/倦鸟.png","hash":"3d1326ddaa360899150a6857a8c96b50ea6c5e80","modified":1736686683625},{"_id":"source/img/社会心理学.png","hash":"c9c128c4eec5c43793b46f64bbe65c4c3e248913","modified":1736673770755},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1736673731561},{"_id":"source/img/Aniya.png","hash":"97b6ac6164cda9614d8a8abdcc1eb78c3bb38f41","modified":1736673770749},{"_id":"source/img/sun.png","hash":"fea6d5ddff389d6bc7e3cfb0ef1f8d768fdaf202","modified":1736673770754},{"_id":"themes/fluid/.git_disabled/objects/pack/pack-d608008952e8c5967743c72952523d8995190b0f.pack","hash":"b915dfe3954834103fc18d5adf56710d1256dfed","modified":1736673731540},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1736673770747},{"_id":"public/css/custom.css","hash":"00759e8cfafe7f9fd8ce8af0f23df52d33e3513a","modified":1736738268265},{"_id":"public/local-search.xml","hash":"cec1dc1a9c5ccfc6d11afdc27d28f58b52a81fe3","modified":1736738268265},{"_id":"public/about/index.html","hash":"664ff94d201bba0aeface5d83598ea6d81ac0954","modified":1736738268265},{"_id":"public/2025/01/09/poets/晚霞/index.html","hash":"5f5f81cb1427609d97dc331ccfb78a0d8cdf539a","modified":1736738268265},{"_id":"public/2025/01/09/JavaScript/index.html","hash":"465dcb4e110567b526bb7077f4423aa49c51097d","modified":1736738268265},{"_id":"public/2025/01/09/TypeScript/index.html","hash":"bd7f51cf30910d664fbf19028f93043e2f07c3d4","modified":1736738268265},{"_id":"public/2025/01/09/社会心理学/index.html","hash":"f193fcb5b45fb661da5a491356e937b88cc6c0dd","modified":1736738268265},{"_id":"public/2025/01/08/媒体查询/index.html","hash":"fe1a3b85177efc88c952ab387f044eea661c0d4b","modified":1736738268265},{"_id":"public/2025/01/08/css笔记/index.html","hash":"4a2fc9e9a70722bb76e99fada7e74552cc68e6af","modified":1736738268265},{"_id":"public/2025/01/08/poets/bird/index.html","hash":"cf34d2a39f43a4a5922d64cc7b0aed675a4c501c","modified":1736738268265},{"_id":"public/2025/01/08/建站第一天/index.html","hash":"2a09759529c3119b0bb98e8be99b37ba507e9797","modified":1736738268265},{"_id":"public/2025/01/08/course_notes/My-New-Post/index.html","hash":"9d08c39bc4ad2f4ba9de0f2c5af5393296ec8d78","modified":1736738268265},{"_id":"public/archives/index.html","hash":"5bef628f7568172d9e4e1ff0b9082e954a2e09f3","modified":1736738268265},{"_id":"public/archives/2025/index.html","hash":"b8217ddad2df9092fd3215315809d6b43fd33513","modified":1736738268265},{"_id":"public/archives/2025/01/index.html","hash":"1a22ec88b71d6efdf37c35d4973f340104ca2a7f","modified":1736738268265},{"_id":"public/categories/前端学习/index.html","hash":"3421cec787ef95359cdbfa345fa39c507004ed0a","modified":1736738268265},{"_id":"public/categories/随机掉落的文字碎片/index.html","hash":"a343c1a2867e54eb354b54cf765ac326b3eceef2","modified":1736738268265},{"_id":"public/tags/杂记/index.html","hash":"dfb524c00d4f497ea60224b38875b2deb89a25d0","modified":1736738268265},{"_id":"public/tags/poet/index.html","hash":"f22fdea7012ae0cbdcdaaea0c72c1a046c9e284f","modified":1736738268265},{"_id":"public/index.html","hash":"10f75b078b96d7580526bd2da58191942e74b49e","modified":1736738268265},{"_id":"public/404.html","hash":"40512febe7faadcaa415b6c99b07b0a027951f1e","modified":1736738268265},{"_id":"public/tags/index.html","hash":"91a22828ac3198e50e4ccab3fb5b224493e04980","modified":1736738268265},{"_id":"public/categories/index.html","hash":"a086dcf61631d5f6d8a45dffc8f8c4ad2c033645","modified":1736738268265},{"_id":"public/links/index.html","hash":"ad8d08a75e44c6f94d95449163211ebdc708bf1e","modified":1736738268265},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1736738268265},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1736738268265},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1736738268265},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1736738268265},{"_id":"public/img/JS.png","hash":"a115cbbec848dea5824181ef22411d8efc6dbfa8","modified":1736738268265},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1736738268265},{"_id":"public/css/highlight-dark.css","hash":"fccb2ef611250f9f5a38f3a2506ded52309e13ce","modified":1736738268265},{"_id":"public/css/highlight.css","hash":"fccb2ef611250f9f5a38f3a2506ded52309e13ce","modified":1736738268265},{"_id":"public/css/main.css","hash":"71002b04d6d526b4034fa95f382450c4927fbd60","modified":1736738268265},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1736738268265},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1736738268265},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1736738268265},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1736738268265},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1736738268265},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1736738268265},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1736738268265},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1736738268265},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1736738268265},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1736738268265},{"_id":"public/img/Aniya_放大镜.jpg","hash":"538ff8e7ac38f341c0166820d43617d73675cc86","modified":1736738268265},{"_id":"public/img/me.jpg","hash":"bdfdab38c41980cff966c08ea26ca8699948cbd6","modified":1736738268265},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1736738268265},{"_id":"public/img/社会心理学.png","hash":"c9c128c4eec5c43793b46f64bbe65c4c3e248913","modified":1736738268265},{"_id":"public/img/倦鸟.png","hash":"3d1326ddaa360899150a6857a8c96b50ea6c5e80","modified":1736738268265},{"_id":"public/img/Aniya.png","hash":"97b6ac6164cda9614d8a8abdcc1eb78c3bb38f41","modified":1736738268265},{"_id":"public/img/sun.png","hash":"fea6d5ddff389d6bc7e3cfb0ef1f8d768fdaf202","modified":1736738268265},{"_id":"public/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1736738268265}],"Category":[{"name":"前端学习","_id":"cm5uh4ge30004kaqggsa0ho3p"},{"name":"随机掉落的文字碎片","_id":"cm5uh4ge6000hkaqg58aw2nm1"}],"Data":[],"Page":[{"title":"about","layout":"about","date":"2025-01-08T06:42:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2025-01-08 14:42:30\n---\n","updated":"2025-01-12T09:22:50.693Z","path":"about/index.html","comments":1,"_id":"cm5uh4ge10000kaqg0vacfvwk","content":"","excerpt":"","more":""},{"_content":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n\n    font-display: swap;  /* 可选：优化字体加载 */\n  }\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n\n","source":"css/custom.css","raw":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n\n    font-display: swap;  /* 可选：优化字体加载 */\n  }\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n\n","date":"2025-01-12T12:58:03.624Z","updated":"2025-01-12T12:58:03.624Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cm5uh4ge20002kaqg1g1x27ua","content":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n\n    font-display: swap;  /* 可选：优化字体加载 */\n  }\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n\n"}],"Post":[{"title":"JavaScript","date":"2025-01-09T06:06:30.000Z","excerpt":"一种轻量级的、解释型的、面向对象的编程语言","math":true,"index_img":"/img/JS.png","_content":"\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n<br>\n\n事件处理函数的默认接受值是`event`:\n```html\n<button>\nonclick\n</button>\n\n<p>\nnothing here\n</p>\n\n<script>\nbtn = document.querySelector(\"button\")\npara = document.querySelector(\"p\")\n\nbtn.onclick = click;\n\nfunction click(string){\n  console.log(\"clicked!\")\n  para.textContent = string;\n}\n</script>\n```\n1. 上述的`btn`在点击之后调用函数`click`, 该函数需要一个参数`string`, 由于`btn.onclick = click;`的绑定方式, 我们无法指定传参的值, 因此点击之后的`para`的内容显示为: `[object PointerEvent]`;\n2. `textContent`是属性而非方法, 因此采用赋值实现;\n\n\n```js\nbtn.onclick = function click(string) {\n  console.log(\"clicked!\")\n  para.textContent = \"You have clicked the button!\";\n}\n```\n> 将上述的绑定方式如此改写, 可以在`btn`外对`string`进行赋值, 然后点击按钮可以传入指定参数供后续处理.\n\n\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n## 数据类型\n### 数字和操作符\n大部分与C语言相同, 概括需要注意的差异:\n- JS当中只有一种数字类型 -- `number`, 对于整型或者浮点数的初始化得到的量, 由`typeof`均得到`number`;\n- 算术运算符: 求幂为`**`;\n- 常量无法使用自增或自减,~~好像也是C语言的 忘了~~\n- `===`表示严格等于, `!==`表示不等于;\n> 同时存在`==`和`!=`来判断是否相等, 但是它们只是测试 **值** 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用`===`和`!==`来避免类型不一致的错误.\n\n### 字符串\n创建字符串\n```js\nlet myString = \"A string\";\nconst constString = myString;\nconsole.log(constString);\n//A string\n``` \n可以使用单引号,双引号和**反引号**来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:\n```js\nconst single = '单引号';\nconst double = \"双引号\";\nconst backtick = `反引号`;\n```\n\n反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:\n- 可以嵌入 **JavaScript**;\n- 可以声明**多行**的模板字面量.\n\n#### 字符串的拼接\n字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:\n```js\nconst name = \"克里斯\";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // \"你好，克里斯\"\n```\n> 在模板字面量中用`${}`包装JS的变量或者表达式.\n\n\n```js\nconst one = \"你好，\";\nconst two = \"请问最近如何？\";\nconst joined = `${one}${two}`;\nconsole.log(joined); // \"你好，请问最近如何？\"\n```\n> 连接2个变量.\n\n```js\nconst song = \"青花瓷\";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"\n```\n> 在模板字面量的`${}`内部包含表达式.\n\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n```js\nconst greeting = \"你好\";\nconst name = \"克里斯\";\nconsole.log(greeting + \"，\" + name); // \"你好，克里斯\"\n```\n\n#### 多行字符串\n模板字符串会**保留**源代码中的换行符，因此可以编写跨越多行的字符串:\n```js\nconst newline = `终于有一天，\n你知道了必须做的事情，而且开始……`;\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n如果希望用普通的字符串得到等效的输出, 必须在字符串中包含`\\n`,而非直接跨行:\n```js\nconst newline = \"终于有一天，\\n你知道了必须做的事情，而且开始……\";\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n#### 显示引号\n1. $\\underline{转义}$  通过在符号前加上反斜杠`\\`, 可以转义字符串中的特殊字符,包括字符串中的引号:\n```js\nconst bigmouth = 'I\\'ve got no right to take my place…';\n```\n2. 换用其他字符: 在字面量内用不同于包裹字符串的引号:\n```js\nconst goodQuotes1 = 'She said \"I think so!\"';\nconst goodQuotes2 = `She said \"I'm not going in there!\"`;\n```\n\n\n#### 常用方法\n对于字符串对象实例,其常用的方法:\n- `.length`: 获取字符串的长度;\n- `[]`: 返回字符串中对应索引的字符, 索引同样从`0`开始;\n- `.indexOf(\"\")`: 查找子字符串\n  - **input**: 希望查找的子字符串;\n  - **output**: 子字符串开始的下标(如果不存在则返回`-1`);\n- `.slice(indedxStart, indexEnd)`: 截取字符串\n  - **input**: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;\n  - **output**: 截取的子字符串;\n\n更多的`slice`知识:\n1. $\\underline{标准化负值}$ 如果索引是个负数, 取`index+str.length`进行标准化;\n2. 如果`indexStart`大于`str.length`, 返回空字符串;\n3. 如果标准化负值之后, `indexStart`大于`indexEnd`, 也返回空字符串;\n \n- `.toLowerCase()` & `.toUpperCase()`: 转换字符串中的所有字符为小写或大写;\n- `.replace(original, new)`: 替换字符串中`original`子字符串为`new`;\n> 此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.\n\n#### Cases\n利用 **indexOf** 和 **slice** 方法, 获取新字符串:\n- **input**: `\"str3\"`三位长字符串+`\"...\"`(无关字符串)+`\";\"`+`strLast`(剩余字符串);\n- **output**: `\"str3\"+\";\"+strLast`\n\n```js\nvar stations = ['MAN675847583748sjt567654;Manchester Piccadilly',\n                'GNF576746573fhdg4737dh4;Greenfield',\n                'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',\n                'SYB4f65hf75f736463;Stalybridge',\n                'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];\n\nfor(var i = 0; i < stations.length; i++){\n    var input = stations[i];\n    var str3 = input.slice(0,3);\n    var strLast = input.slice(input.indexOf(\";\")+1); //indexOf获取;位置\n    var output = str3 + \";\" + strLast;\n}\n```\n\n---\n\n通过 **indexOf** 根据子字符串筛选字符串数组:\n- **input**: 可能包含 *Christmas* 的字符串数组;\n- **output**: 包含 *Christmas* 的字符串数组;\n\n```js\nvar list = document.querySelector('.output ul');\nlist.innerHTML = '';\nvar greetings = ['Happy Birthday!',\n                 'Merry Christmas my love',\n                 'A happy Christmas to all the family',\n                 'You\\'re all I want for Christmas',\n                 'Get well soon'];\n\nfor(var i = 0; i < greetings.length; i++) {\n  var input = greetings[i];\n  if(greetings[i].indexOf('Christmas') !== -1) {\n    var result = input;\n    var listItem = document.createElement('li');\n    listItem.textContent = result;\n    list.appendChild(listItem);\n  }\n}\n```\n\n### 数字与字符串\n#### 相互转换\n非常神奇, 在JS当中, 数字和字符串可以直接通过函数`Number()`和`String()`进行转换, 与C语言不同.\n```js\nconst myString = \"123\";\nconst myNum = Number(myString);\nconsole.log(typeof myNum);\n// number\nconsole.log(myNum);\n// 123\n```\n\n```js\nconst myNum2 = 123;\nconst myString2 = String(myNum2);\nconsole.log(typeof myString2);\n// string\nconsole.log(myString2);\n// \"123\"\n```\n> 对于浮点数同样成立.\n\n#### 前后拼接\n使用`+`将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:\n```js\nconst name = \"Front \";\nconst number = 242;\nconst combine = name + number;\n\nconsole.log(combine); //Front 242\n\nconsole.log(typeof(combine));  //string\n```\n\n### 数组\n1. 存储任意类型元素--字符串，数字，对象，变量，**另一个数组**;\n2. 可以 **混合** 元素类型:\n```js\nlet random = [\"tree\", 795, [0, 1, 2]];\n```\n3. 像访问字符串一样, 利用索引访问数组元素;\n4. $\\underline{多维数组}$ 包含数组的数组结构称为~\n\n#### split()\n- 作用: 将一个字符串根据给定的字符分隔为字符串数组;\n```js\nlet myData = \"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\";\nlet myArray = myData.split(\",\");\nconsole.log(myArray);\n // [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]\n```\n\n#### join()\n`split`的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:\n```js\nlet myNewString = myArray.join(\",\");\nmyNewString;\n```\n\n#### toString()\n与`join`方法相似, 但是无法自定义分隔符, 默认为`,`:\n```js\nlet dogNames = [\"Rocket\", \"Flash\", \"Bella\", \"Slugger\"];\ndogNames.toString(); //Rocket,Flash,Bella,Slugger\n```\n\n#### push & pop\n`push()`方法可以将1或多个元素添加到数组的 **末尾**:\n1. 将会直接改写原来的数组,不需要重新赋值;\n2. 该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);\n```js\nlet myArray = [1, 2, 3];\nlet newLength = myArray.push(4, 5,\"string\");\nconsole.log(myArray); // [1, 2, 3, 4, 5, \"string\"]\nconsole.log(newLength); // 6\n```\n\n使用`.pop()`从数组中删除最后一个元素:\n```js\nmyArray.pop(); //\"string\"\nconsole.log(myArray); // [1, 2, 3, 4, 5]\n```\n1. 方法调用返回值就是删除的元素本身;\n2. 直接对原始数组操作并赋值, 不需要另外的赋值操作;\n\n> shift & unshift:\n> 在功能上分别与`push`和`pop`相同, 但是作用于数组的开始位置.\n\n## 条件语句\nJS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:\n### 天气预报\n```html\n<label for=\"weather\">选择今天的天气：</label\n><select id=\"weather\">\n  <option value=\"\">--作出选择--</option>\n  <option value=\"sunny\">晴天</option>\n  <option value=\"rainy\">雨天</option>\n  <option value=\"snowing\">雪天</option>\n  <option value=\"overcast\">阴天</option>\n</select>\n\n<p></p>\n```\n> `lable`当中的`for`标签与`select`标签的`id`属性对应, 用于关联两个标签.\n\n```js\nconst select = document.querySelector(\"select\");\nconst para = document.querySelector(\"p\");\n\nselect.addEventListener(\"change\", setWeather);\n\nfunction setWeather() {\n  const choice = select.value;\n\n  switch (choice) {\n    case \"sunny\":\n      para.textContent = \"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\";\n      break;\n    case \"rainy\":\n      para.textContent = \"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\";\n      break;\n    case \"snowing\":\n      para.textContent =\n        \"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\";\n      break;\n    case \"overcast\":\n      para.textContent =\n        \"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\";\n      break;\n    default:\n      para.textContent = \"\";\n  }\n}\n```\n> 1. 通过`querySelector`方法获取`select`和`p`标签;\n> 2. 然后为`select`标签添加事件监听器, 当内容改变时触发 **change** 事件, 同时调用`setWeather`函数;\n> 3. 进而通过 **switch** 语句处理不同天气的情况, 并设置相应的文字内容;\n> 在线网页示例:[simple-switch](https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html)\n\n\n## 事件介绍\n什么是$\\underline{事件}$? \n- 用户选择、点击或者光标悬停在某一元素;\n- 用户在键盘中按下某个按键;\n- 网页结束加载;\n- ...\n\n$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.\n\n### 处理点击事件\n以点击事件为例, 介绍html与js如何进行事件处理的交互:\n```html\n<button> 改变颜色 </button>\n```\n```js\nconst btn = document.querySelector(\"button\");\n\nfunction random(number){\n  return Math.floor(Math.random()*(number+1));\n  \n}\n```\n1. `Math.random()`方法生成一个介于[0,1)之间的随机数;\n2. `*(number+1)`之后利用向下取整的方法`Math.floor()`将其转换为整数, 范围为[0,number];\n> 假如输入的number为`4`, 则`random(4)`的结果可能为`0`, `1`, `2`, `3`, `4`中的一个;\n> 假设输入的number为`3.6`, 则输出的结果还是0~4中的整数.\n\n","source":"_posts/JavaScript.md","raw":"---\ntitle: JavaScript\ndate: 2025-01-09 14:06:30\ntags: \ncategories: 前端学习\nexcerpt: 一种轻量级的、解释型的、面向对象的编程语言\nmath: true\nindex_img: /img/JS.png\n---\n\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n<br>\n\n事件处理函数的默认接受值是`event`:\n```html\n<button>\nonclick\n</button>\n\n<p>\nnothing here\n</p>\n\n<script>\nbtn = document.querySelector(\"button\")\npara = document.querySelector(\"p\")\n\nbtn.onclick = click;\n\nfunction click(string){\n  console.log(\"clicked!\")\n  para.textContent = string;\n}\n</script>\n```\n1. 上述的`btn`在点击之后调用函数`click`, 该函数需要一个参数`string`, 由于`btn.onclick = click;`的绑定方式, 我们无法指定传参的值, 因此点击之后的`para`的内容显示为: `[object PointerEvent]`;\n2. `textContent`是属性而非方法, 因此采用赋值实现;\n\n\n```js\nbtn.onclick = function click(string) {\n  console.log(\"clicked!\")\n  para.textContent = \"You have clicked the button!\";\n}\n```\n> 将上述的绑定方式如此改写, 可以在`btn`外对`string`进行赋值, 然后点击按钮可以传入指定参数供后续处理.\n\n\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n## 数据类型\n### 数字和操作符\n大部分与C语言相同, 概括需要注意的差异:\n- JS当中只有一种数字类型 -- `number`, 对于整型或者浮点数的初始化得到的量, 由`typeof`均得到`number`;\n- 算术运算符: 求幂为`**`;\n- 常量无法使用自增或自减,~~好像也是C语言的 忘了~~\n- `===`表示严格等于, `!==`表示不等于;\n> 同时存在`==`和`!=`来判断是否相等, 但是它们只是测试 **值** 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用`===`和`!==`来避免类型不一致的错误.\n\n### 字符串\n创建字符串\n```js\nlet myString = \"A string\";\nconst constString = myString;\nconsole.log(constString);\n//A string\n``` \n可以使用单引号,双引号和**反引号**来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:\n```js\nconst single = '单引号';\nconst double = \"双引号\";\nconst backtick = `反引号`;\n```\n\n反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:\n- 可以嵌入 **JavaScript**;\n- 可以声明**多行**的模板字面量.\n\n#### 字符串的拼接\n字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:\n```js\nconst name = \"克里斯\";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // \"你好，克里斯\"\n```\n> 在模板字面量中用`${}`包装JS的变量或者表达式.\n\n\n```js\nconst one = \"你好，\";\nconst two = \"请问最近如何？\";\nconst joined = `${one}${two}`;\nconsole.log(joined); // \"你好，请问最近如何？\"\n```\n> 连接2个变量.\n\n```js\nconst song = \"青花瓷\";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"\n```\n> 在模板字面量的`${}`内部包含表达式.\n\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n```js\nconst greeting = \"你好\";\nconst name = \"克里斯\";\nconsole.log(greeting + \"，\" + name); // \"你好，克里斯\"\n```\n\n#### 多行字符串\n模板字符串会**保留**源代码中的换行符，因此可以编写跨越多行的字符串:\n```js\nconst newline = `终于有一天，\n你知道了必须做的事情，而且开始……`;\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n如果希望用普通的字符串得到等效的输出, 必须在字符串中包含`\\n`,而非直接跨行:\n```js\nconst newline = \"终于有一天，\\n你知道了必须做的事情，而且开始……\";\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n#### 显示引号\n1. $\\underline{转义}$  通过在符号前加上反斜杠`\\`, 可以转义字符串中的特殊字符,包括字符串中的引号:\n```js\nconst bigmouth = 'I\\'ve got no right to take my place…';\n```\n2. 换用其他字符: 在字面量内用不同于包裹字符串的引号:\n```js\nconst goodQuotes1 = 'She said \"I think so!\"';\nconst goodQuotes2 = `She said \"I'm not going in there!\"`;\n```\n\n\n#### 常用方法\n对于字符串对象实例,其常用的方法:\n- `.length`: 获取字符串的长度;\n- `[]`: 返回字符串中对应索引的字符, 索引同样从`0`开始;\n- `.indexOf(\"\")`: 查找子字符串\n  - **input**: 希望查找的子字符串;\n  - **output**: 子字符串开始的下标(如果不存在则返回`-1`);\n- `.slice(indedxStart, indexEnd)`: 截取字符串\n  - **input**: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;\n  - **output**: 截取的子字符串;\n\n更多的`slice`知识:\n1. $\\underline{标准化负值}$ 如果索引是个负数, 取`index+str.length`进行标准化;\n2. 如果`indexStart`大于`str.length`, 返回空字符串;\n3. 如果标准化负值之后, `indexStart`大于`indexEnd`, 也返回空字符串;\n \n- `.toLowerCase()` & `.toUpperCase()`: 转换字符串中的所有字符为小写或大写;\n- `.replace(original, new)`: 替换字符串中`original`子字符串为`new`;\n> 此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.\n\n#### Cases\n利用 **indexOf** 和 **slice** 方法, 获取新字符串:\n- **input**: `\"str3\"`三位长字符串+`\"...\"`(无关字符串)+`\";\"`+`strLast`(剩余字符串);\n- **output**: `\"str3\"+\";\"+strLast`\n\n```js\nvar stations = ['MAN675847583748sjt567654;Manchester Piccadilly',\n                'GNF576746573fhdg4737dh4;Greenfield',\n                'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',\n                'SYB4f65hf75f736463;Stalybridge',\n                'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];\n\nfor(var i = 0; i < stations.length; i++){\n    var input = stations[i];\n    var str3 = input.slice(0,3);\n    var strLast = input.slice(input.indexOf(\";\")+1); //indexOf获取;位置\n    var output = str3 + \";\" + strLast;\n}\n```\n\n---\n\n通过 **indexOf** 根据子字符串筛选字符串数组:\n- **input**: 可能包含 *Christmas* 的字符串数组;\n- **output**: 包含 *Christmas* 的字符串数组;\n\n```js\nvar list = document.querySelector('.output ul');\nlist.innerHTML = '';\nvar greetings = ['Happy Birthday!',\n                 'Merry Christmas my love',\n                 'A happy Christmas to all the family',\n                 'You\\'re all I want for Christmas',\n                 'Get well soon'];\n\nfor(var i = 0; i < greetings.length; i++) {\n  var input = greetings[i];\n  if(greetings[i].indexOf('Christmas') !== -1) {\n    var result = input;\n    var listItem = document.createElement('li');\n    listItem.textContent = result;\n    list.appendChild(listItem);\n  }\n}\n```\n\n### 数字与字符串\n#### 相互转换\n非常神奇, 在JS当中, 数字和字符串可以直接通过函数`Number()`和`String()`进行转换, 与C语言不同.\n```js\nconst myString = \"123\";\nconst myNum = Number(myString);\nconsole.log(typeof myNum);\n// number\nconsole.log(myNum);\n// 123\n```\n\n```js\nconst myNum2 = 123;\nconst myString2 = String(myNum2);\nconsole.log(typeof myString2);\n// string\nconsole.log(myString2);\n// \"123\"\n```\n> 对于浮点数同样成立.\n\n#### 前后拼接\n使用`+`将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:\n```js\nconst name = \"Front \";\nconst number = 242;\nconst combine = name + number;\n\nconsole.log(combine); //Front 242\n\nconsole.log(typeof(combine));  //string\n```\n\n### 数组\n1. 存储任意类型元素--字符串，数字，对象，变量，**另一个数组**;\n2. 可以 **混合** 元素类型:\n```js\nlet random = [\"tree\", 795, [0, 1, 2]];\n```\n3. 像访问字符串一样, 利用索引访问数组元素;\n4. $\\underline{多维数组}$ 包含数组的数组结构称为~\n\n#### split()\n- 作用: 将一个字符串根据给定的字符分隔为字符串数组;\n```js\nlet myData = \"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\";\nlet myArray = myData.split(\",\");\nconsole.log(myArray);\n // [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]\n```\n\n#### join()\n`split`的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:\n```js\nlet myNewString = myArray.join(\",\");\nmyNewString;\n```\n\n#### toString()\n与`join`方法相似, 但是无法自定义分隔符, 默认为`,`:\n```js\nlet dogNames = [\"Rocket\", \"Flash\", \"Bella\", \"Slugger\"];\ndogNames.toString(); //Rocket,Flash,Bella,Slugger\n```\n\n#### push & pop\n`push()`方法可以将1或多个元素添加到数组的 **末尾**:\n1. 将会直接改写原来的数组,不需要重新赋值;\n2. 该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);\n```js\nlet myArray = [1, 2, 3];\nlet newLength = myArray.push(4, 5,\"string\");\nconsole.log(myArray); // [1, 2, 3, 4, 5, \"string\"]\nconsole.log(newLength); // 6\n```\n\n使用`.pop()`从数组中删除最后一个元素:\n```js\nmyArray.pop(); //\"string\"\nconsole.log(myArray); // [1, 2, 3, 4, 5]\n```\n1. 方法调用返回值就是删除的元素本身;\n2. 直接对原始数组操作并赋值, 不需要另外的赋值操作;\n\n> shift & unshift:\n> 在功能上分别与`push`和`pop`相同, 但是作用于数组的开始位置.\n\n## 条件语句\nJS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:\n### 天气预报\n```html\n<label for=\"weather\">选择今天的天气：</label\n><select id=\"weather\">\n  <option value=\"\">--作出选择--</option>\n  <option value=\"sunny\">晴天</option>\n  <option value=\"rainy\">雨天</option>\n  <option value=\"snowing\">雪天</option>\n  <option value=\"overcast\">阴天</option>\n</select>\n\n<p></p>\n```\n> `lable`当中的`for`标签与`select`标签的`id`属性对应, 用于关联两个标签.\n\n```js\nconst select = document.querySelector(\"select\");\nconst para = document.querySelector(\"p\");\n\nselect.addEventListener(\"change\", setWeather);\n\nfunction setWeather() {\n  const choice = select.value;\n\n  switch (choice) {\n    case \"sunny\":\n      para.textContent = \"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\";\n      break;\n    case \"rainy\":\n      para.textContent = \"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\";\n      break;\n    case \"snowing\":\n      para.textContent =\n        \"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\";\n      break;\n    case \"overcast\":\n      para.textContent =\n        \"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\";\n      break;\n    default:\n      para.textContent = \"\";\n  }\n}\n```\n> 1. 通过`querySelector`方法获取`select`和`p`标签;\n> 2. 然后为`select`标签添加事件监听器, 当内容改变时触发 **change** 事件, 同时调用`setWeather`函数;\n> 3. 进而通过 **switch** 语句处理不同天气的情况, 并设置相应的文字内容;\n> 在线网页示例:[simple-switch](https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html)\n\n\n## 事件介绍\n什么是$\\underline{事件}$? \n- 用户选择、点击或者光标悬停在某一元素;\n- 用户在键盘中按下某个按键;\n- 网页结束加载;\n- ...\n\n$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.\n\n### 处理点击事件\n以点击事件为例, 介绍html与js如何进行事件处理的交互:\n```html\n<button> 改变颜色 </button>\n```\n```js\nconst btn = document.querySelector(\"button\");\n\nfunction random(number){\n  return Math.floor(Math.random()*(number+1));\n  \n}\n```\n1. `Math.random()`方法生成一个介于[0,1)之间的随机数;\n2. `*(number+1)`之后利用向下取整的方法`Math.floor()`将其转换为整数, 范围为[0,number];\n> 假如输入的number为`4`, 则`random(4)`的结果可能为`0`, `1`, `2`, `3`, `4`中的一个;\n> 假设输入的number为`3.6`, 则输出的结果还是0~4中的整数.\n\n","slug":"JavaScript","published":1,"updated":"2025-01-13T03:11:25.903Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge10001kaqgcze59g9w","content":"<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logName</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myName);<br>&#125;<br><br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Chris&quot;</span><br><br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Aniya&quot;</span>;<br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>而<code>let</code>只能声明一次:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br>myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myAge = <span class=\"hljs-number\">20</span> ;<span class=\"hljs-comment\">// 数字</span><br><span class=\"hljs-keyword\">let</span> dolphinGoodbye = <span class=\"hljs-string\">&quot;So long and thanks for all the fish&quot;</span>; <span class=\"hljs-comment\">// 字符串</span><br><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">6</span> &lt; <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//boolean</span><br><br><span class=\"hljs-comment\">//数组类型</span><br><span class=\"hljs-keyword\">let</span> myNameArray = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Jim&quot;</span>];<br><span class=\"hljs-keyword\">let</span> myNumberArray = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>];<br><br><span class=\"hljs-comment\">//对象类型</span><br><span class=\"hljs-keyword\">let</span> dog = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spot&quot;</span>, <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNumber = <span class=\"hljs-string\">&quot;500&quot;</span>;<br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class=\"hljs-number\">500</span>; <br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>$\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">exampleFunction</span>();<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;函数内&quot;</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greeding</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;my friend&quot;</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">//Hello, my friend!</span><br><span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">&quot;world&quot;</span>); <span class=\"hljs-comment\">//Hello, world!</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>事件处理函数的默认接受值是<code>event</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span><br>onclick<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>nothing here<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>)</span><br><span class=\"language-javascript\">para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>)</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn.<span class=\"hljs-property\">onclick</span> = click;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>)&#123;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)</span><br><span class=\"language-javascript\">  para.<span class=\"hljs-property\">textContent</span> = string;</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li>\n<li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">btn.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)<br>  para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;You have clicked the button!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p>\n</blockquote>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 匿名函数</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logKey</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> originals = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-keyword\">const</span> doubled = originals.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item * <span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled); <span class=\"hljs-comment\">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleItem</span>(<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;textBox&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> textBox = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#textBox&quot;</span>);<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#output&quot;</span>);<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  output.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;first.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;second.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>  greeting();<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数字和操作符\"><a href=\"#数字和操作符\" class=\"headerlink\" title=\"数字和操作符\"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p>\n<ul>\n<li>JS当中只有一种数字类型 — <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li>\n<li>算术运算符: 求幂为<code>**</code>;</li>\n<li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li>\n<li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote>\n<p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>创建字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myString = <span class=\"hljs-string\">&quot;A string&quot;</span>;<br><span class=\"hljs-keyword\">const</span> constString = myString;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(constString);<br><span class=\"hljs-comment\">//A string</span><br></code></pre></td></tr></table></figure><br>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> single = <span class=\"hljs-string\">&#x27;单引号&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> double = <span class=\"hljs-string\">&quot;双引号&quot;</span>;<br><span class=\"hljs-keyword\">const</span> backtick = <span class=\"hljs-string\">`反引号`</span>;<br></code></pre></td></tr></table></figure></p>\n<p>反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p>\n<ul>\n<li>可以嵌入 <strong>JavaScript</strong>;</li>\n<li>可以声明<strong>多行</strong>的模板字面量.</li>\n</ul>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">`你好，<span class=\"hljs-subst\">$&#123;name&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在模板字面量中用<code>$&#123;&#125;</code>包装JS的变量或者表达式.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> one = <span class=\"hljs-string\">&quot;你好，&quot;</span>;<br><span class=\"hljs-keyword\">const</span> two = <span class=\"hljs-string\">&quot;请问最近如何？&quot;</span>;<br><span class=\"hljs-keyword\">const</span> joined = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;one&#125;</span><span class=\"hljs-subst\">$&#123;two&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(joined); <span class=\"hljs-comment\">// &quot;你好，请问最近如何？&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>连接2个变量.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> song = <span class=\"hljs-string\">&quot;青花瓷&quot;</span>;<br><span class=\"hljs-keyword\">const</span> score = <span class=\"hljs-number\">9</span>;<br><span class=\"hljs-keyword\">const</span> highestScore = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-string\">`我喜欢歌曲《<span class=\"hljs-subst\">$&#123;song&#125;</span>》。我给它打了 <span class=\"hljs-subst\">$&#123;</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">  (score / highestScore) * <span class=\"hljs-number\">100</span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">&#125;</span> 分。`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(output); <span class=\"hljs-comment\">// &quot;我喜欢歌曲《青花瓷》。我给它打了 90 分。&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在模板字面量的<code>$&#123;&#125;</code>内部包含表达式.</p>\n</blockquote>\n<p><br><br>除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用<code>+</code>直接连接:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&quot;你好&quot;</span>;<br><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting + <span class=\"hljs-string\">&quot;，&quot;</span> + name); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">`终于有一天，</span><br><span class=\"hljs-string\">你知道了必须做的事情，而且开始……`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\\n</code>,而非直接跨行:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">&quot;终于有一天，\\n你知道了必须做的事情，而且开始……&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"显示引号\"><a href=\"#显示引号\" class=\"headerlink\" title=\"显示引号\"></a>显示引号</h4><ol>\n<li>$\\underline{转义}$  通过在符号前加上反斜杠<code>\\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> bigmouth = <span class=\"hljs-string\">&#x27;I\\&#x27;ve got no right to take my place…&#x27;</span>;<br></code></pre></td></tr></table></figure></li>\n<li>换用其他字符: 在字面量内用不同于包裹字符串的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> goodQuotes1 = <span class=\"hljs-string\">&#x27;She said &quot;I think so!&quot;&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> goodQuotes2 = <span class=\"hljs-string\">`She said &quot;I&#x27;m not going in there!&quot;`</span>;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p>\n<ul>\n<li><code>.length</code>: 获取字符串的长度;</li>\n<li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li>\n<li><code>.indexOf(&quot;&quot;)</code>: 查找子字符串<ul>\n<li><strong>input</strong>: 希望查找的子字符串;</li>\n<li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li>\n</ul>\n</li>\n<li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul>\n<li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li>\n<li><strong>output</strong>: 截取的子字符串;</li>\n</ul>\n</li>\n</ul>\n<p>更多的<code>slice</code>知识:</p>\n<ol>\n<li>$\\underline{标准化负值}$ 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li>\n<li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li>\n<li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li>\n</ol>\n<ul>\n<li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li>\n<li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote>\n<p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Cases\"><a href=\"#Cases\" class=\"headerlink\" title=\"Cases\"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p>\n<ul>\n<li><strong>input</strong>: <code>&quot;str3&quot;</code>三位长字符串+<code>&quot;...&quot;</code>(无关字符串)+<code>&quot;;&quot;</code>+<code>strLast</code>(剩余字符串);</li>\n<li><strong>output</strong>: <code>&quot;str3&quot;+&quot;;&quot;+strLast</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> stations = [<span class=\"hljs-string\">&#x27;MAN675847583748sjt567654;Manchester Piccadilly&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;GNF576746573fhdg4737dh4;Greenfield&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;LIV5hg65hd737456236dch46dg4;Liverpool Lime Street&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;SYB4f65hf75f736463;Stalybridge&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; stations.<span class=\"hljs-property\">length</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">var</span> input = stations[i];<br>    <span class=\"hljs-keyword\">var</span> str3 = input.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">var</span> strLast = input.<span class=\"hljs-title function_\">slice</span>(input.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;;&quot;</span>)+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//indexOf获取;位置</span><br>    <span class=\"hljs-keyword\">var</span> output = str3 + <span class=\"hljs-string\">&quot;;&quot;</span> + strLast;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p>\n<ul>\n<li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li>\n<li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.output ul&#x27;</span>);<br>list.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> greetings = [<span class=\"hljs-string\">&#x27;Happy Birthday!&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Merry Christmas my love&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;A happy Christmas to all the family&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;You\\&#x27;re all I want for Christmas&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Get well soon&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; greetings.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  <span class=\"hljs-keyword\">var</span> input = greetings[i];<br>  <span class=\"hljs-keyword\">if</span>(greetings[i].<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;Christmas&#x27;</span>) !== -<span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> result = input;<br>    <span class=\"hljs-keyword\">var</span> listItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br>    listItem.<span class=\"hljs-property\">textContent</span> = result;<br>    list.<span class=\"hljs-title function_\">appendChild</span>(listItem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"数字与字符串\"><a href=\"#数字与字符串\" class=\"headerlink\" title=\"数字与字符串\"></a>数字与字符串</h3><h4 id=\"相互转换\"><a href=\"#相互转换\" class=\"headerlink\" title=\"相互转换\"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myString = <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-keyword\">const</span> myNum = <span class=\"hljs-title class_\">Number</span>(myString);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myNum);<br><span class=\"hljs-comment\">// number</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myNum);<br><span class=\"hljs-comment\">// 123</span><br></code></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myNum2 = <span class=\"hljs-number\">123</span>;<br><span class=\"hljs-keyword\">const</span> myString2 = <span class=\"hljs-title class_\">String</span>(myNum2);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myString2);<br><span class=\"hljs-comment\">// string</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myString2);<br><span class=\"hljs-comment\">// &quot;123&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对于浮点数同样成立.</p>\n</blockquote>\n<h4 id=\"前后拼接\"><a href=\"#前后拼接\" class=\"headerlink\" title=\"前后拼接\"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Front &quot;</span>;<br><span class=\"hljs-keyword\">const</span> number = <span class=\"hljs-number\">242</span>;<br><span class=\"hljs-keyword\">const</span> combine = name + number;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(combine); <span class=\"hljs-comment\">//Front 242</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">typeof</span>(combine));  <span class=\"hljs-comment\">//string</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ol>\n<li>存储任意类型元素—字符串，数字，对象，变量，<strong>另一个数组</strong>;</li>\n<li>可以 <strong>混合</strong> 元素类型:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> random = [<span class=\"hljs-string\">&quot;tree&quot;</span>, <span class=\"hljs-number\">795</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]];<br></code></pre></td></tr></table></figure></li>\n<li>像访问字符串一样, 利用索引访问数组元素;</li>\n<li>$\\underline{多维数组}$ 包含数组的数组结构称为~</li>\n</ol>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><ul>\n<li>作用: 将一个字符串根据给定的字符分隔为字符串数组;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myData = <span class=\"hljs-string\">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;<br><span class=\"hljs-keyword\">let</span> myArray = myData.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray);<br> <span class=\"hljs-comment\">// [&quot;Manchester&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;, &quot;Leeds&quot;, &quot;Carlisle&quot;]</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNewString = myArray.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>myNewString;<br></code></pre></td></tr></table></figure></p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> dogNames = [<span class=\"hljs-string\">&quot;Rocket&quot;</span>, <span class=\"hljs-string\">&quot;Flash&quot;</span>, <span class=\"hljs-string\">&quot;Bella&quot;</span>, <span class=\"hljs-string\">&quot;Slugger&quot;</span>];<br>dogNames.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">//Rocket,Flash,Bella,Slugger</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"push-amp-pop\"><a href=\"#push-amp-pop\" class=\"headerlink\" title=\"push &amp; pop\"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p>\n<ol>\n<li>将会直接改写原来的数组,不需要重新赋值;</li>\n<li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> newLength = myArray.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&quot;string&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, &quot;string&quot;]</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newLength); <span class=\"hljs-comment\">// 6</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用<code>.pop()</code>从数组中删除最后一个元素:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myArray.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">//&quot;string&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>方法调用返回值就是删除的元素本身;</li>\n<li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li>\n</ol>\n<blockquote>\n<p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p>\n</blockquote>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p>\n<h3 id=\"天气预报\"><a href=\"#天气预报\" class=\"headerlink\" title=\"天气预报\"></a>天气预报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span>选择今天的天气：&lt;/label<br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>--作出选择--<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;sunny&quot;</span>&gt;</span>晴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;rainy&quot;</span>&gt;</span>雨天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;snowing&quot;</span>&gt;</span>雪天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;overcast&quot;</span>&gt;</span>阴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> select = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;select&quot;</span>);<br><span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>);<br><br>select.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;change&quot;</span>, setWeather);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setWeather</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> choice = select.<span class=\"hljs-property\">value</span>;<br><br>  <span class=\"hljs-keyword\">switch</span> (choice) &#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;sunny&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;rainy&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;外面下着雨；带上雨衣和雨伞，不要在外面呆太久。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;snowing&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;overcast&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-attr\">default</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li>\n<li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li>\n<li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html\">simple-switch</a></li>\n</ol>\n</blockquote>\n<h2 id=\"事件介绍\"><a href=\"#事件介绍\" class=\"headerlink\" title=\"事件介绍\"></a>事件介绍</h2><p>什么是$\\underline{事件}$? </p>\n<ul>\n<li>用户选择、点击或者光标悬停在某一元素;</li>\n<li>用户在键盘中按下某个按键;</li>\n<li>网页结束加载;</li>\n<li>…</li>\n</ul>\n<p>$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p>\n<h3 id=\"处理点击事件\"><a href=\"#处理点击事件\" class=\"headerlink\" title=\"处理点击事件\"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span> 改变颜色 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">random</span>(<span class=\"hljs-params\">number</span>)&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*(number+<span class=\"hljs-number\">1</span>));<br>  <br>&#125;<br></code></pre></td></tr></table></figure></p>\n<ol>\n<li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li>\n<li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote>\n<p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p>\n</blockquote>\n</li>\n</ol>\n","more":"<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logName</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myName);<br>&#125;<br><br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Chris&quot;</span><br><br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Aniya&quot;</span>;<br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>而<code>let</code>只能声明一次:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br>myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myAge = <span class=\"hljs-number\">20</span> ;<span class=\"hljs-comment\">// 数字</span><br><span class=\"hljs-keyword\">let</span> dolphinGoodbye = <span class=\"hljs-string\">&quot;So long and thanks for all the fish&quot;</span>; <span class=\"hljs-comment\">// 字符串</span><br><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">6</span> &lt; <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//boolean</span><br><br><span class=\"hljs-comment\">//数组类型</span><br><span class=\"hljs-keyword\">let</span> myNameArray = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Jim&quot;</span>];<br><span class=\"hljs-keyword\">let</span> myNumberArray = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>];<br><br><span class=\"hljs-comment\">//对象类型</span><br><span class=\"hljs-keyword\">let</span> dog = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spot&quot;</span>, <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNumber = <span class=\"hljs-string\">&quot;500&quot;</span>;<br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class=\"hljs-number\">500</span>; <br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>$\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">exampleFunction</span>();<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;函数内&quot;</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greeding</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;my friend&quot;</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">//Hello, my friend!</span><br><span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">&quot;world&quot;</span>); <span class=\"hljs-comment\">//Hello, world!</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>事件处理函数的默认接受值是<code>event</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span><br>onclick<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>nothing here<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>)</span><br><span class=\"language-javascript\">para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>)</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn.<span class=\"hljs-property\">onclick</span> = click;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>)&#123;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)</span><br><span class=\"language-javascript\">  para.<span class=\"hljs-property\">textContent</span> = string;</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li>\n<li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">btn.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)<br>  para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;You have clicked the button!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p>\n</blockquote>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 匿名函数</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logKey</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> originals = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-keyword\">const</span> doubled = originals.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item * <span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled); <span class=\"hljs-comment\">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleItem</span>(<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;textBox&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> textBox = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#textBox&quot;</span>);<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#output&quot;</span>);<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  output.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;first.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;second.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>  greeting();<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数字和操作符\"><a href=\"#数字和操作符\" class=\"headerlink\" title=\"数字和操作符\"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p>\n<ul>\n<li>JS当中只有一种数字类型 — <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li>\n<li>算术运算符: 求幂为<code>**</code>;</li>\n<li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li>\n<li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote>\n<p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>创建字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myString = <span class=\"hljs-string\">&quot;A string&quot;</span>;<br><span class=\"hljs-keyword\">const</span> constString = myString;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(constString);<br><span class=\"hljs-comment\">//A string</span><br></code></pre></td></tr></table></figure><br>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> single = <span class=\"hljs-string\">&#x27;单引号&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> double = <span class=\"hljs-string\">&quot;双引号&quot;</span>;<br><span class=\"hljs-keyword\">const</span> backtick = <span class=\"hljs-string\">`反引号`</span>;<br></code></pre></td></tr></table></figure></p>\n<p>反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p>\n<ul>\n<li>可以嵌入 <strong>JavaScript</strong>;</li>\n<li>可以声明<strong>多行</strong>的模板字面量.</li>\n</ul>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">`你好，<span class=\"hljs-subst\">$&#123;name&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在模板字面量中用<code>$&#123;&#125;</code>包装JS的变量或者表达式.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> one = <span class=\"hljs-string\">&quot;你好，&quot;</span>;<br><span class=\"hljs-keyword\">const</span> two = <span class=\"hljs-string\">&quot;请问最近如何？&quot;</span>;<br><span class=\"hljs-keyword\">const</span> joined = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;one&#125;</span><span class=\"hljs-subst\">$&#123;two&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(joined); <span class=\"hljs-comment\">// &quot;你好，请问最近如何？&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>连接2个变量.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> song = <span class=\"hljs-string\">&quot;青花瓷&quot;</span>;<br><span class=\"hljs-keyword\">const</span> score = <span class=\"hljs-number\">9</span>;<br><span class=\"hljs-keyword\">const</span> highestScore = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-string\">`我喜欢歌曲《<span class=\"hljs-subst\">$&#123;song&#125;</span>》。我给它打了 <span class=\"hljs-subst\">$&#123;</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">  (score / highestScore) * <span class=\"hljs-number\">100</span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">&#125;</span> 分。`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(output); <span class=\"hljs-comment\">// &quot;我喜欢歌曲《青花瓷》。我给它打了 90 分。&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在模板字面量的<code>$&#123;&#125;</code>内部包含表达式.</p>\n</blockquote>\n<p><br><br>除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用<code>+</code>直接连接:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&quot;你好&quot;</span>;<br><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting + <span class=\"hljs-string\">&quot;，&quot;</span> + name); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">`终于有一天，</span><br><span class=\"hljs-string\">你知道了必须做的事情，而且开始……`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\\n</code>,而非直接跨行:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">&quot;终于有一天，\\n你知道了必须做的事情，而且开始……&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"显示引号\"><a href=\"#显示引号\" class=\"headerlink\" title=\"显示引号\"></a>显示引号</h4><ol>\n<li>$\\underline{转义}$  通过在符号前加上反斜杠<code>\\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> bigmouth = <span class=\"hljs-string\">&#x27;I\\&#x27;ve got no right to take my place…&#x27;</span>;<br></code></pre></td></tr></table></figure></li>\n<li>换用其他字符: 在字面量内用不同于包裹字符串的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> goodQuotes1 = <span class=\"hljs-string\">&#x27;She said &quot;I think so!&quot;&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> goodQuotes2 = <span class=\"hljs-string\">`She said &quot;I&#x27;m not going in there!&quot;`</span>;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p>\n<ul>\n<li><code>.length</code>: 获取字符串的长度;</li>\n<li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li>\n<li><code>.indexOf(&quot;&quot;)</code>: 查找子字符串<ul>\n<li><strong>input</strong>: 希望查找的子字符串;</li>\n<li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li>\n</ul>\n</li>\n<li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul>\n<li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li>\n<li><strong>output</strong>: 截取的子字符串;</li>\n</ul>\n</li>\n</ul>\n<p>更多的<code>slice</code>知识:</p>\n<ol>\n<li>$\\underline{标准化负值}$ 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li>\n<li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li>\n<li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li>\n</ol>\n<ul>\n<li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li>\n<li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote>\n<p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Cases\"><a href=\"#Cases\" class=\"headerlink\" title=\"Cases\"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p>\n<ul>\n<li><strong>input</strong>: <code>&quot;str3&quot;</code>三位长字符串+<code>&quot;...&quot;</code>(无关字符串)+<code>&quot;;&quot;</code>+<code>strLast</code>(剩余字符串);</li>\n<li><strong>output</strong>: <code>&quot;str3&quot;+&quot;;&quot;+strLast</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> stations = [<span class=\"hljs-string\">&#x27;MAN675847583748sjt567654;Manchester Piccadilly&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;GNF576746573fhdg4737dh4;Greenfield&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;LIV5hg65hd737456236dch46dg4;Liverpool Lime Street&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;SYB4f65hf75f736463;Stalybridge&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; stations.<span class=\"hljs-property\">length</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">var</span> input = stations[i];<br>    <span class=\"hljs-keyword\">var</span> str3 = input.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">var</span> strLast = input.<span class=\"hljs-title function_\">slice</span>(input.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;;&quot;</span>)+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//indexOf获取;位置</span><br>    <span class=\"hljs-keyword\">var</span> output = str3 + <span class=\"hljs-string\">&quot;;&quot;</span> + strLast;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p>\n<ul>\n<li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li>\n<li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.output ul&#x27;</span>);<br>list.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> greetings = [<span class=\"hljs-string\">&#x27;Happy Birthday!&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Merry Christmas my love&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;A happy Christmas to all the family&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;You\\&#x27;re all I want for Christmas&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Get well soon&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; greetings.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  <span class=\"hljs-keyword\">var</span> input = greetings[i];<br>  <span class=\"hljs-keyword\">if</span>(greetings[i].<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;Christmas&#x27;</span>) !== -<span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> result = input;<br>    <span class=\"hljs-keyword\">var</span> listItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br>    listItem.<span class=\"hljs-property\">textContent</span> = result;<br>    list.<span class=\"hljs-title function_\">appendChild</span>(listItem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"数字与字符串\"><a href=\"#数字与字符串\" class=\"headerlink\" title=\"数字与字符串\"></a>数字与字符串</h3><h4 id=\"相互转换\"><a href=\"#相互转换\" class=\"headerlink\" title=\"相互转换\"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myString = <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-keyword\">const</span> myNum = <span class=\"hljs-title class_\">Number</span>(myString);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myNum);<br><span class=\"hljs-comment\">// number</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myNum);<br><span class=\"hljs-comment\">// 123</span><br></code></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myNum2 = <span class=\"hljs-number\">123</span>;<br><span class=\"hljs-keyword\">const</span> myString2 = <span class=\"hljs-title class_\">String</span>(myNum2);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myString2);<br><span class=\"hljs-comment\">// string</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myString2);<br><span class=\"hljs-comment\">// &quot;123&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对于浮点数同样成立.</p>\n</blockquote>\n<h4 id=\"前后拼接\"><a href=\"#前后拼接\" class=\"headerlink\" title=\"前后拼接\"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Front &quot;</span>;<br><span class=\"hljs-keyword\">const</span> number = <span class=\"hljs-number\">242</span>;<br><span class=\"hljs-keyword\">const</span> combine = name + number;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(combine); <span class=\"hljs-comment\">//Front 242</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">typeof</span>(combine));  <span class=\"hljs-comment\">//string</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ol>\n<li>存储任意类型元素—字符串，数字，对象，变量，<strong>另一个数组</strong>;</li>\n<li>可以 <strong>混合</strong> 元素类型:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> random = [<span class=\"hljs-string\">&quot;tree&quot;</span>, <span class=\"hljs-number\">795</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]];<br></code></pre></td></tr></table></figure></li>\n<li>像访问字符串一样, 利用索引访问数组元素;</li>\n<li>$\\underline{多维数组}$ 包含数组的数组结构称为~</li>\n</ol>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><ul>\n<li>作用: 将一个字符串根据给定的字符分隔为字符串数组;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myData = <span class=\"hljs-string\">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;<br><span class=\"hljs-keyword\">let</span> myArray = myData.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray);<br> <span class=\"hljs-comment\">// [&quot;Manchester&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;, &quot;Leeds&quot;, &quot;Carlisle&quot;]</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNewString = myArray.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>myNewString;<br></code></pre></td></tr></table></figure></p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> dogNames = [<span class=\"hljs-string\">&quot;Rocket&quot;</span>, <span class=\"hljs-string\">&quot;Flash&quot;</span>, <span class=\"hljs-string\">&quot;Bella&quot;</span>, <span class=\"hljs-string\">&quot;Slugger&quot;</span>];<br>dogNames.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">//Rocket,Flash,Bella,Slugger</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"push-amp-pop\"><a href=\"#push-amp-pop\" class=\"headerlink\" title=\"push &amp; pop\"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p>\n<ol>\n<li>将会直接改写原来的数组,不需要重新赋值;</li>\n<li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> newLength = myArray.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&quot;string&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, &quot;string&quot;]</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newLength); <span class=\"hljs-comment\">// 6</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用<code>.pop()</code>从数组中删除最后一个元素:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myArray.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">//&quot;string&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>方法调用返回值就是删除的元素本身;</li>\n<li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li>\n</ol>\n<blockquote>\n<p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p>\n</blockquote>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p>\n<h3 id=\"天气预报\"><a href=\"#天气预报\" class=\"headerlink\" title=\"天气预报\"></a>天气预报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span>选择今天的天气：&lt;/label<br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>--作出选择--<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;sunny&quot;</span>&gt;</span>晴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;rainy&quot;</span>&gt;</span>雨天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;snowing&quot;</span>&gt;</span>雪天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;overcast&quot;</span>&gt;</span>阴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> select = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;select&quot;</span>);<br><span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>);<br><br>select.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;change&quot;</span>, setWeather);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setWeather</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> choice = select.<span class=\"hljs-property\">value</span>;<br><br>  <span class=\"hljs-keyword\">switch</span> (choice) &#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;sunny&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;rainy&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;外面下着雨；带上雨衣和雨伞，不要在外面呆太久。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;snowing&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;overcast&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-attr\">default</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li>\n<li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li>\n<li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html\">simple-switch</a></li>\n</ol>\n</blockquote>\n<h2 id=\"事件介绍\"><a href=\"#事件介绍\" class=\"headerlink\" title=\"事件介绍\"></a>事件介绍</h2><p>什么是$\\underline{事件}$? </p>\n<ul>\n<li>用户选择、点击或者光标悬停在某一元素;</li>\n<li>用户在键盘中按下某个按键;</li>\n<li>网页结束加载;</li>\n<li>…</li>\n</ul>\n<p>$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p>\n<h3 id=\"处理点击事件\"><a href=\"#处理点击事件\" class=\"headerlink\" title=\"处理点击事件\"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span> 改变颜色 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">random</span>(<span class=\"hljs-params\">number</span>)&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*(number+<span class=\"hljs-number\">1</span>));<br>  <br>&#125;<br></code></pre></td></tr></table></figure></p>\n<ol>\n<li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li>\n<li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote>\n<p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"TypeScript","date":"2025-01-09T05:45:55.000Z","excerpt":"让我们在编译时检查类型","_content":"\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2025-01-09 13:45:55\ntags:\ncategories: 前端学习\nexcerpt: 让我们在编译时检查类型\n---\n\n","slug":"TypeScript","published":1,"updated":"2025-01-12T09:22:50.692Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge30003kaqgeelafk17","content":"","more":""},{"title":"my-fisrt-draft","_content":"","source":"_drafts/my-fisrt-draft.md","raw":"---\ntitle: my-fisrt-draft\ntags:\n---\n","slug":"my-fisrt-draft","published":0,"date":"2025-01-12T09:22:50.692Z","updated":"2025-01-12T09:22:50.692Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge40005kaqg121xfza9","content":"","excerpt":"","more":""},{"title":"媒体查询","date":"2025-01-08T11:16:49.000Z","excerpt":"利用媒体查询建立响应式的设计","index_img":"/img/Aniya_放大镜.jpg","_content":"> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","source":"_posts/媒体查询.md","raw":"---\ntitle: 媒体查询\ndate: 2025-01-08 19:16:49\ntags:\nexcerpt: 利用媒体查询建立响应式的设计\nindex_img: /img/Aniya_放大镜.jpg\n---\n> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","slug":"媒体查询","published":1,"updated":"2025-01-12T09:22:50.693Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge40006kaqga79q7ohy","content":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\">媒体查询入门指南</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\">使用编程方法测试媒体查询</a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> media-type <span class=\"hljs-keyword\">and</span> (media-feature) &#123;<br>    <span class=\"hljs-comment\">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 窗口恰好等于600px时 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: portrait) &#123;<br>    <span class=\"hljs-comment\">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>    <span class=\"hljs-comment\">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><p><code>and</code>实现与逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>  <span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>,</code>实现或逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape), (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">480px</span>) &#123;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class=\"hljs-comment\">  */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n</li>\n<li><p><code>not</code>实现非逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br><span class=\"hljs-comment\">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>not</code>实现 <strong>反转查询</strong>:</p>\n<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-keyword\">not</span> (screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>))), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 检测设备的旋转方向是否为纵向</span><br><span class=\"hljs-keyword\">var</span> mediaQueryList = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查属性<code>matches</code>获取对应的查询结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">if (mediaQueryList<span class=\"hljs-selector-class\">.matches</span>) &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 定义媒体查询字符串</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>;<br><br><span class=\"hljs-comment\">// 创建查询列表</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryList</span>: <span class=\"hljs-title class_\">MediaQueryList</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(mediaQueryString);<br><br><span class=\"hljs-comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleOrientationChange</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MediaQueryListEvent</span></span>): <span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// 媒体查询匹配（竖屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 媒体查询不匹配（横屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class=\"hljs-title function_\">handleOrientationChange</span>(&#123;<br>    <span class=\"hljs-attr\">matches</span>: mediaQueryList.<span class=\"hljs-property\">matches</span>,<br>    <span class=\"hljs-attr\">media</span>: mediaQueryList.<span class=\"hljs-property\">media</span>,<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>&#125; <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MediaQueryListEvent</span>);<br><br><span class=\"hljs-comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class=\"hljs-comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class=\"hljs-comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n","more":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\">媒体查询入门指南</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\">使用编程方法测试媒体查询</a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> media-type <span class=\"hljs-keyword\">and</span> (media-feature) &#123;<br>    <span class=\"hljs-comment\">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 窗口恰好等于600px时 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: portrait) &#123;<br>    <span class=\"hljs-comment\">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>    <span class=\"hljs-comment\">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><p><code>and</code>实现与逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>  <span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>,</code>实现或逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape), (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">480px</span>) &#123;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class=\"hljs-comment\">  */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n</li>\n<li><p><code>not</code>实现非逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br><span class=\"hljs-comment\">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>not</code>实现 <strong>反转查询</strong>:</p>\n<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-keyword\">not</span> (screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>))), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 检测设备的旋转方向是否为纵向</span><br><span class=\"hljs-keyword\">var</span> mediaQueryList = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查属性<code>matches</code>获取对应的查询结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">if (mediaQueryList<span class=\"hljs-selector-class\">.matches</span>) &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 定义媒体查询字符串</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>;<br><br><span class=\"hljs-comment\">// 创建查询列表</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryList</span>: <span class=\"hljs-title class_\">MediaQueryList</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(mediaQueryString);<br><br><span class=\"hljs-comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleOrientationChange</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MediaQueryListEvent</span></span>): <span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// 媒体查询匹配（竖屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 媒体查询不匹配（横屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class=\"hljs-title function_\">handleOrientationChange</span>(&#123;<br>    <span class=\"hljs-attr\">matches</span>: mediaQueryList.<span class=\"hljs-property\">matches</span>,<br>    <span class=\"hljs-attr\">media</span>: mediaQueryList.<span class=\"hljs-property\">media</span>,<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>&#125; <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MediaQueryListEvent</span>);<br><br><span class=\"hljs-comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class=\"hljs-comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class=\"hljs-comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"css笔记","date":"2025-01-08T10:33:32.000Z","index_img":"/img/Aniya.png","excerpt":"css属性好多好复杂😶‍🌫️","_content":"> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n\n<style>\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n</style>\n```\n\n\n`:nth-child`可用于对序列中不同的元素进行有序的样式设计:\n```html\n<div class=\"index-card\">内容1</div>\n<div class=\"index-card\">内容2</div>\n<div class=\"index-card\">内容3</div>\n<div class=\"index-card\">内容4</div>\n\n<style>\n.index-card:nth-child(odd) {\n  flex-direction: row-reverse;\n}\n</style>\n```\n- 选择所有类名为 \"index-card\" 的元素;\n- `row-reverse` 会让 flex 容器中的项目从右到左排列;\n> 同理, `even`选择偶数位置的元素; `3n+1`等函数表达式也可以起作用.\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","source":"_posts/css笔记.md","raw":"---\ntitle: css笔记\ndate: 2025-01-08 18:33:32\ntags:\nindex_img: /img/Aniya.png\ncategories: 前端学习\nexcerpt: css属性好多好复杂😶‍🌫️\n---\n> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n\n<style>\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n</style>\n```\n\n\n`:nth-child`可用于对序列中不同的元素进行有序的样式设计:\n```html\n<div class=\"index-card\">内容1</div>\n<div class=\"index-card\">内容2</div>\n<div class=\"index-card\">内容3</div>\n<div class=\"index-card\">内容4</div>\n\n<style>\n.index-card:nth-child(odd) {\n  flex-direction: row-reverse;\n}\n</style>\n```\n- 选择所有类名为 \"index-card\" 的元素;\n- `row-reverse` 会让 flex 容器中的项目从右到左排列;\n> 同理, `even`选择偶数位置的元素; `3n+1`等函数表达式也可以起作用.\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","slug":"css笔记","published":1,"updated":"2025-01-12T12:58:03.622Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge40007kaqg2g7feubv","content":"<blockquote>\n<p><a href=\"https://jsfiddle.net/?locale=zh_CN\">在线编辑平台</a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot;Author: &quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* 加粗字体 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* 文本颜色为蓝色 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:after</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot; ✍️&quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>; <span class=\"hljs-comment\">/* 调整图标大小 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* 添加左边距 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.index-card</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(odd) &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">flex-direction</span>: row-reverse;</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ul>\n<li>选择所有类名为 “index-card” 的元素;</li>\n<li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote>\n<p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.my-element</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: green;<br>  <span class=\"hljs-attribute\">color</span>: red;<br>  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);<br>  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:active</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span> &#123;<br>      <span class=\"hljs-attribute\">border-color</span>: blue;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: purple;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-weight</span>: bold;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:last-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-style</span>: italic;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:only-child</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:empty</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex容器 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* 将容器设置为Flexbox容器 */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-direction: 定义主轴方向 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row: 水平从左到右（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row-reverse: 水平从右到左 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column: 垂直从上到下 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column-reverse: 垂直从下到上 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-direction</span>: row; <span class=\"hljs-comment\">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-wrap: 定义是否换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* nowrap: 不换行（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap: 换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap-reverse: 反向换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-wrap</span>: wrap; <span class=\"hljs-comment\">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-flow</span>: row wrap; <span class=\"hljs-comment\">/* 可以改为column nowrap等组合 */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 起始对齐（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">justify-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* baseline: 项目基线对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-items</span>: center; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>; <span class=\"hljs-comment\">/* 设置容器高度 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-comment\">/* 设置容器背景颜色 */</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    </span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex项目 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.item</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 设置项目内边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: lightblue; <span class=\"hljs-comment\">/* 设置项目背景颜色 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* 设置项目外边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-comment\">/* 设置项目文本居中 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">/*尝试向flex容器扩展空间*/</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p><a href=\"https://jsfiddle.net/?locale=zh_CN\">在线编辑平台</a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot;Author: &quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* 加粗字体 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* 文本颜色为蓝色 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:after</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot; ✍️&quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>; <span class=\"hljs-comment\">/* 调整图标大小 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* 添加左边距 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.index-card</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(odd) &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">flex-direction</span>: row-reverse;</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ul>\n<li>选择所有类名为 “index-card” 的元素;</li>\n<li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote>\n<p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.my-element</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: green;<br>  <span class=\"hljs-attribute\">color</span>: red;<br>  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);<br>  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:active</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span> &#123;<br>      <span class=\"hljs-attribute\">border-color</span>: blue;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: purple;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-weight</span>: bold;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:last-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-style</span>: italic;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:only-child</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:empty</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex容器 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* 将容器设置为Flexbox容器 */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-direction: 定义主轴方向 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row: 水平从左到右（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row-reverse: 水平从右到左 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column: 垂直从上到下 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column-reverse: 垂直从下到上 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-direction</span>: row; <span class=\"hljs-comment\">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-wrap: 定义是否换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* nowrap: 不换行（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap: 换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap-reverse: 反向换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-wrap</span>: wrap; <span class=\"hljs-comment\">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-flow</span>: row wrap; <span class=\"hljs-comment\">/* 可以改为column nowrap等组合 */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 起始对齐（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">justify-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* baseline: 项目基线对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-items</span>: center; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>; <span class=\"hljs-comment\">/* 设置容器高度 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-comment\">/* 设置容器背景颜色 */</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    </span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex项目 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.item</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 设置项目内边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: lightblue; <span class=\"hljs-comment\">/* 设置项目背景颜色 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* 设置项目外边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-comment\">/* 设置项目文本居中 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">/*尝试向flex容器扩展空间*/</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n"},{"title":"建站第一天","date":"2025-01-08T08:04:13.000Z","excerpt":"鸽了好久的小博客终于诞生了","sticky":100,"_content":"\n原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.\n\n然而发现Astro的文档~~还不够丰富, 配置起来还真是麻烦~~.折腾了几天, 还是放弃了. **还是hexo真香**.😊\n\n## 为什么搭建这个博客?😋\n- 记录一下自己的学习历程\n- 为生活的碎片留档, ~~越来越不想用puq了~~\n","source":"_posts/建站第一天.md","raw":"---\ntitle: 建站第一天\ndate: 2025-01-08 16:04:13\ntags: 杂记\nexcerpt: 鸽了好久的小博客终于诞生了\nsticky: 100\n---\n\n原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.\n\n然而发现Astro的文档~~还不够丰富, 配置起来还真是麻烦~~.折腾了几天, 还是放弃了. **还是hexo真香**.😊\n\n## 为什么搭建这个博客?😋\n- 记录一下自己的学习历程\n- 为生活的碎片留档, ~~越来越不想用puq了~~\n","slug":"建站第一天","published":1,"updated":"2025-01-12T12:58:03.623Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge50009kaqgbl5hh9ld","content":"<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p>\n<p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p>\n<h2 id=\"为什么搭建这个博客-😋\"><a href=\"#为什么搭建这个博客-😋\" class=\"headerlink\" title=\"为什么搭建这个博客?😋\"></a>为什么搭建这个博客?😋</h2><ul>\n<li>记录一下自己的学习历程</li>\n<li>为生活的碎片留档, <del>越来越不想用puq了</del></li>\n</ul>\n","more":"<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p>\n<p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p>\n<h2 id=\"为什么搭建这个博客-😋\"><a href=\"#为什么搭建这个博客-😋\" class=\"headerlink\" title=\"为什么搭建这个博客?😋\"></a>为什么搭建这个博客?😋</h2><ul>\n<li>记录一下自己的学习历程</li>\n<li>为生活的碎片留档, <del>越来越不想用puq了</del></li>\n</ul>\n"},{"title":"社会心理学","date":"2025-01-09T01:23:32.000Z","excerpt":"在专业基础课_社会心理学的教学内容基础上, 摘录个人感兴趣的部分, 同时补充了部分相关理论.","math":true,"index_img":"/img/社会心理学.png","banner_img":"/img/社会心理学.png","_content":"# 社会知觉\n## 非语言线索\n**面部表情反馈假设**: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;\n\n## 印象形成\n顺序效应\n- 首因效应: 最初获得的信息影响更大, 即第一印象效应;\n- 近因效应: 后来获得的信息影响更大, 即新颖效应;\n\n晕轮效应\n- 对一个人的某种特征 **形成** 好或坏的印象 **之后**, 据此推论其他方面的特征;\n- 与首因效应的区别: \n> 前者发生在初步印象形成之后, 后者发生在初步印象形成之前;\n\n投射效应\n- 在认知和形成他人印象时，认为他人与自己具有**相似**的特性;\n- 将自己的情感、特性投射到他人身上并强加于他人;\n\n### 期望效应\n***Self-fulfilling prophecy***\n> 自我实现预言 \n\n- “预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;\n- 人们的信念会影响他们的行为;\n\n可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. \n\n## 归因 \n> Attribution theory\n\n**归因**, 指观察者从他人的行为推论出行为原因、因果关系。\n\n**归因理论**, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。\n- $\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 --外因\n- $\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 --内因\n\n### 归因偏差\n**基本归因错误**: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;\n\n**行为者-观察者偏差**: \n- 归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;\n- 为什么会产生上述区别?\n  - 对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;\n  - 人们倾向于利用 **可得性** 高的信息来处理问题\n> 根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 **鲜明对比**;\n> 对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.\n---\n**错误共识效应**(False consensus effect): \n- 也称为 **虚假一致性效应**;\n- 指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;\n- 这同时导致人们倾向于与自己 **相似** 的个体交往;\n---\n**公平世界信念**: 指的是相信\"善有善报,恶有恶报\"而导致的归因偏差.\n- 认为每个人都应该为自己的行为负责;\n- 分析行为的原因时, 倾向于追溯个人自身的原因;\n---\n**动机性归因偏差**: \n- 倾向于将自己的成功归因于内在因素、失败归因于外在因素;\n- 而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;\n\n\n# 自我\n## 自我概念\n- $\\underline{自我知觉}$: 对自己持有的信念之集合;\n- $\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;\n- $\\underline{虚假一致性效应}$: \n\n\n","source":"_posts/社会心理学.md","raw":"---\ntitle: 社会心理学\ndate: 2025-01-09 09:23:32\ntags:\ncategories:\nexcerpt: 在专业基础课_社会心理学的教学内容基础上, 摘录个人感兴趣的部分, 同时补充了部分相关理论.\nmath: true\nindex_img: /img/社会心理学.png\nbanner_img: /img/社会心理学.png\n---\n# 社会知觉\n## 非语言线索\n**面部表情反馈假设**: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;\n\n## 印象形成\n顺序效应\n- 首因效应: 最初获得的信息影响更大, 即第一印象效应;\n- 近因效应: 后来获得的信息影响更大, 即新颖效应;\n\n晕轮效应\n- 对一个人的某种特征 **形成** 好或坏的印象 **之后**, 据此推论其他方面的特征;\n- 与首因效应的区别: \n> 前者发生在初步印象形成之后, 后者发生在初步印象形成之前;\n\n投射效应\n- 在认知和形成他人印象时，认为他人与自己具有**相似**的特性;\n- 将自己的情感、特性投射到他人身上并强加于他人;\n\n### 期望效应\n***Self-fulfilling prophecy***\n> 自我实现预言 \n\n- “预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;\n- 人们的信念会影响他们的行为;\n\n可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. \n\n## 归因 \n> Attribution theory\n\n**归因**, 指观察者从他人的行为推论出行为原因、因果关系。\n\n**归因理论**, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。\n- $\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 --外因\n- $\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 --内因\n\n### 归因偏差\n**基本归因错误**: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;\n\n**行为者-观察者偏差**: \n- 归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;\n- 为什么会产生上述区别?\n  - 对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;\n  - 人们倾向于利用 **可得性** 高的信息来处理问题\n> 根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 **鲜明对比**;\n> 对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.\n---\n**错误共识效应**(False consensus effect): \n- 也称为 **虚假一致性效应**;\n- 指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;\n- 这同时导致人们倾向于与自己 **相似** 的个体交往;\n---\n**公平世界信念**: 指的是相信\"善有善报,恶有恶报\"而导致的归因偏差.\n- 认为每个人都应该为自己的行为负责;\n- 分析行为的原因时, 倾向于追溯个人自身的原因;\n---\n**动机性归因偏差**: \n- 倾向于将自己的成功归因于内在因素、失败归因于外在因素;\n- 而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;\n\n\n# 自我\n## 自我概念\n- $\\underline{自我知觉}$: 对自己持有的信念之集合;\n- $\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;\n- $\\underline{虚假一致性效应}$: \n\n\n","slug":"社会心理学","published":1,"updated":"2025-01-12T12:58:03.624Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge5000akaqggwyo7fph","content":"<h1 id=\"社会知觉\"><a href=\"#社会知觉\" class=\"headerlink\" title=\"社会知觉\"></a>社会知觉</h1><h2 id=\"非语言线索\"><a href=\"#非语言线索\" class=\"headerlink\" title=\"非语言线索\"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p>\n<h2 id=\"印象形成\"><a href=\"#印象形成\" class=\"headerlink\" title=\"印象形成\"></a>印象形成</h2><p>顺序效应</p>\n<ul>\n<li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li>\n<li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li>\n</ul>\n<p>晕轮效应</p>\n<ul>\n<li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li>\n<li>与首因效应的区别: <blockquote>\n<p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p>\n</blockquote>\n</li>\n</ul>\n<p>投射效应</p>\n<ul>\n<li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li>\n<li>将自己的情感、特性投射到他人身上并强加于他人;</li>\n</ul>\n<h3 id=\"期望效应\"><a href=\"#期望效应\" class=\"headerlink\" title=\"期望效应\"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p>\n<blockquote>\n<p>自我实现预言 </p>\n</blockquote>\n<ul>\n<li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li>\n<li>人们的信念会影响他们的行为;</li>\n</ul>\n<p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p>\n<h2 id=\"归因\"><a href=\"#归因\" class=\"headerlink\" title=\"归因\"></a>归因</h2><blockquote>\n<p>Attribution theory</p>\n</blockquote>\n<p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p>\n<p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p>\n<ul>\n<li>$\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li>\n<li>$\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li>\n</ul>\n<h3 id=\"归因偏差\"><a href=\"#归因偏差\" class=\"headerlink\" title=\"归因偏差\"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p>\n<p><strong>行为者-观察者偏差</strong>: </p>\n<ul>\n<li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li>\n<li>为什么会产生上述区别?<ul>\n<li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li>\n<li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote>\n<p>根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>错误共识效应</strong>(False consensus effect): </p>\n<ul>\n<li>也称为 <strong>虚假一致性效应</strong>;</li>\n<li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li>\n<li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li>\n</ul>\n<hr>\n<p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p>\n<ul>\n<li>认为每个人都应该为自己的行为负责;</li>\n<li>分析行为的原因时, 倾向于追溯个人自身的原因;</li>\n</ul>\n<hr>\n<p><strong>动机性归因偏差</strong>: </p>\n<ul>\n<li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li>\n<li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li>\n</ul>\n<h1 id=\"自我\"><a href=\"#自我\" class=\"headerlink\" title=\"自我\"></a>自我</h1><h2 id=\"自我概念\"><a href=\"#自我概念\" class=\"headerlink\" title=\"自我概念\"></a>自我概念</h2><ul>\n<li>$\\underline{自我知觉}$: 对自己持有的信念之集合;</li>\n<li>$\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li>\n<li>$\\underline{虚假一致性效应}$: </li>\n</ul>\n","more":"<h1 id=\"社会知觉\"><a href=\"#社会知觉\" class=\"headerlink\" title=\"社会知觉\"></a>社会知觉</h1><h2 id=\"非语言线索\"><a href=\"#非语言线索\" class=\"headerlink\" title=\"非语言线索\"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p>\n<h2 id=\"印象形成\"><a href=\"#印象形成\" class=\"headerlink\" title=\"印象形成\"></a>印象形成</h2><p>顺序效应</p>\n<ul>\n<li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li>\n<li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li>\n</ul>\n<p>晕轮效应</p>\n<ul>\n<li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li>\n<li>与首因效应的区别: <blockquote>\n<p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p>\n</blockquote>\n</li>\n</ul>\n<p>投射效应</p>\n<ul>\n<li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li>\n<li>将自己的情感、特性投射到他人身上并强加于他人;</li>\n</ul>\n<h3 id=\"期望效应\"><a href=\"#期望效应\" class=\"headerlink\" title=\"期望效应\"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p>\n<blockquote>\n<p>自我实现预言 </p>\n</blockquote>\n<ul>\n<li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li>\n<li>人们的信念会影响他们的行为;</li>\n</ul>\n<p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p>\n<h2 id=\"归因\"><a href=\"#归因\" class=\"headerlink\" title=\"归因\"></a>归因</h2><blockquote>\n<p>Attribution theory</p>\n</blockquote>\n<p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p>\n<p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p>\n<ul>\n<li>$\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li>\n<li>$\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li>\n</ul>\n<h3 id=\"归因偏差\"><a href=\"#归因偏差\" class=\"headerlink\" title=\"归因偏差\"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p>\n<p><strong>行为者-观察者偏差</strong>: </p>\n<ul>\n<li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li>\n<li>为什么会产生上述区别?<ul>\n<li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li>\n<li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote>\n<p>根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>错误共识效应</strong>(False consensus effect): </p>\n<ul>\n<li>也称为 <strong>虚假一致性效应</strong>;</li>\n<li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li>\n<li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li>\n</ul>\n<hr>\n<p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p>\n<ul>\n<li>认为每个人都应该为自己的行为负责;</li>\n<li>分析行为的原因时, 倾向于追溯个人自身的原因;</li>\n</ul>\n<hr>\n<p><strong>动机性归因偏差</strong>: </p>\n<ul>\n<li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li>\n<li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li>\n</ul>\n<h1 id=\"自我\"><a href=\"#自我\" class=\"headerlink\" title=\"自我\"></a>自我</h1><h2 id=\"自我概念\"><a href=\"#自我概念\" class=\"headerlink\" title=\"自我概念\"></a>自我概念</h2><ul>\n<li>$\\underline{自我知觉}$: 对自己持有的信念之集合;</li>\n<li>$\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li>\n<li>$\\underline{虚假一致性效应}$: </li>\n</ul>\n"},{"title":"My New Post","date":"2025-01-08T07:06:40.000Z","math":true,"excerpt":"尝试修改简介","_content":"### 犯错问题\n\n第一类错误: $\\alpha = P_{H_0为真} \\\\{落在拒绝域\\\\}$\n\n第二类错误: $\\beta = P_{H_0为假} \\\\{落在接受域\\\\}$ \n\n解题策略:\n\n1. 根据犯错类型求出包含参数的式子;\n2. 根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);\n3. 然后根据已知分布求解概率.","source":"_posts/course_notes/My-New-Post.md","raw":"---\ntitle: My New Post\ndate: 2025-01-08 15:06:40\ntags: \nmath: true\nexcerpt: 尝试修改简介\n---\n### 犯错问题\n\n第一类错误: $\\alpha = P_{H_0为真} \\\\{落在拒绝域\\\\}$\n\n第二类错误: $\\beta = P_{H_0为假} \\\\{落在接受域\\\\}$ \n\n解题策略:\n\n1. 根据犯错类型求出包含参数的式子;\n2. 根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);\n3. 然后根据已知分布求解概率.","slug":"course_notes/My-New-Post","published":1,"updated":"2025-01-12T09:22:50.693Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge5000dkaqgfbtua4gy","content":"<h3 id=\"犯错问题\"><a href=\"#犯错问题\" class=\"headerlink\" title=\"犯错问题\"></a>犯错问题</h3><p>第一类错误: $\\alpha = P_{H_0为真} \\{落在拒绝域\\}$</p>\n<p>第二类错误: $\\beta = P_{H_0为假} \\{落在接受域\\}$ </p>\n<p>解题策略:</p>\n<ol>\n<li>根据犯错类型求出包含参数的式子;</li>\n<li>根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);</li>\n<li>然后根据已知分布求解概率.</li>\n</ol>\n","more":"<h3 id=\"犯错问题\"><a href=\"#犯错问题\" class=\"headerlink\" title=\"犯错问题\"></a>犯错问题</h3><p>第一类错误: $\\alpha = P_{H_0为真} \\{落在拒绝域\\}$</p>\n<p>第二类错误: $\\beta = P_{H_0为假} \\{落在接受域\\}$ </p>\n<p>解题策略:</p>\n<ol>\n<li>根据犯错类型求出包含参数的式子;</li>\n<li>根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);</li>\n<li>然后根据已知分布求解概率.</li>\n</ol>\n"},{"title":"倦鸟","date":"2025-01-08T08:10:10.000Z","excerpt":"等一处栖居 🪶","index_img":"/img/倦鸟.png","banner_img":"/img/倦鸟.png","_content":"我盘旋的目光是漂泊不息的倦鸟\n\n越过人海 落入你乌黑瞳仁中的夜\n\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>","source":"_posts/poets/bird.md","raw":"---\ntitle: 倦鸟\ndate: 2025-01-08 16:10:10\ntags: poet\ncategories: 随机掉落的文字碎片\nexcerpt: 等一处栖居 🪶\nindex_img: /img/倦鸟.png\nbanner_img: /img/倦鸟.png\n---\n我盘旋的目光是漂泊不息的倦鸟\n\n越过人海 落入你乌黑瞳仁中的夜\n\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>","slug":"poets/bird","published":1,"updated":"2025-01-12T12:58:03.623Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge5000fkaqg2pk24e1o","content":"<p>我盘旋的目光是漂泊不息的倦鸟</p>\n<p>越过人海 落入你乌黑瞳仁中的夜</p>\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>","more":"<p>我盘旋的目光是漂泊不息的倦鸟</p>\n<p>越过人海 落入你乌黑瞳仁中的夜</p>\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>"},{"title":"晚霞","date":"2025-01-09T12:59:02.000Z","excerpt":"记紫金港的世纪晚霞","hide":false,"archive":true,"_content":"\n\n白昼飞红了她的脸颊  \n以隐匿于远山之后的凝望  \n默默期待着  \n月色的降临🌔\n\n\n\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>\n\n","source":"_posts/poets/晚霞.md","raw":"---\ntitle: 晚霞\ndate: 2025-01-09 20:59:02\ntags: poet\ncategories: 随机掉落的文字碎片\nexcerpt: 记紫金港的世纪晚霞\nhide: false\narchive: true\n---\n\n\n白昼飞红了她的脸颊  \n以隐匿于远山之后的凝望  \n默默期待着  \n月色的降临🌔\n\n\n\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>\n\n","slug":"poets/晚霞","published":1,"updated":"2025-01-12T12:58:03.623Z","comments":1,"layout":"post","photos":[],"_id":"cm5uh4ge6000mkaqgah3535ug","content":"<p>白昼飞红了她的脸颊<br>以隐匿于远山之后的凝望<br>默默期待着<br>月色的降临🌔</p>\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>\n\n","more":"<p>白昼飞红了她的脸颊<br>以隐匿于远山之后的凝望<br>默默期待着<br>月色的降临🌔</p>\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 3em;\n}\n\n</style>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm5uh4ge10001kaqgcze59g9w","category_id":"cm5uh4ge30004kaqggsa0ho3p","_id":"cm5uh4ge5000bkaqgbbsi61jo"},{"post_id":"cm5uh4ge40007kaqg2g7feubv","category_id":"cm5uh4ge30004kaqggsa0ho3p","_id":"cm5uh4ge5000ekaqg4ry37p1p"},{"post_id":"cm5uh4ge30003kaqgeelafk17","category_id":"cm5uh4ge30004kaqggsa0ho3p","_id":"cm5uh4ge5000gkaqg4hwc7uqy"},{"post_id":"cm5uh4ge5000fkaqg2pk24e1o","category_id":"cm5uh4ge6000hkaqg58aw2nm1","_id":"cm5uh4ge6000lkaqga8cg67sw"},{"post_id":"cm5uh4ge6000mkaqgah3535ug","category_id":"cm5uh4ge6000hkaqg58aw2nm1","_id":"cm5uh4ge6000okaqg08y1ddim"}],"PostTag":[{"post_id":"cm5uh4ge50009kaqgbl5hh9ld","tag_id":"cm5uh4ge5000ckaqg206keqxn","_id":"cm5uh4ge6000jkaqg01ka37ai"},{"post_id":"cm5uh4ge5000fkaqg2pk24e1o","tag_id":"cm5uh4ge6000ikaqg45jpe9zg","_id":"cm5uh4ge6000kkaqg2lw57t2d"},{"post_id":"cm5uh4ge6000mkaqgah3535ug","tag_id":"cm5uh4ge6000ikaqg45jpe9zg","_id":"cm5uh4ge6000nkaqg8ik0a07e"}],"Tag":[{"name":"杂记","_id":"cm5uh4ge5000ckaqg206keqxn"},{"name":"poet","_id":"cm5uh4ge6000ikaqg45jpe9zg"}]}}