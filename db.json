{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","path":"fonts/LXGWWenKaiGBScreen.ttf","modified":0,"renderable":0},{"_id":"source/img/2025-01-16-23-58-21.png","path":"img/2025-01-16-23-58-21.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-17-14-00-36.png","path":"img/2025-01-17-14-00-36.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-11-41-54.png","path":"img/2025-01-18-11-41-54.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-11-45-41.png","path":"img/2025-01-18-11-45-41.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-12-58-38.png","path":"img/2025-01-18-12-58-38.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-13-01-29.png","path":"img/2025-01-18-13-01-29.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-13-03-21.png","path":"img/2025-01-18-13-03-21.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-13-15-38.png","path":"img/2025-01-18-13-15-38.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-13-23-22.png","path":"img/2025-01-18-13-23-22.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-17-06-50.png","path":"img/2025-01-18-17-06-50.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-17-11-36.png","path":"img/2025-01-18-17-11-36.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-17-13-45.png","path":"img/2025-01-18-17-13-45.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-13-09-11.png","path":"img/2025-01-18-13-09-11.png","modified":0,"renderable":0},{"_id":"source/img/Aniya.png","path":"img/Aniya.png","modified":0,"renderable":0},{"_id":"source/img/2025-01-18-17-14-29.png","path":"img/2025-01-18-17-14-29.png","modified":0,"renderable":0},{"_id":"source/img/Aniya_放大镜.jpg","path":"img/Aniya_放大镜.jpg","modified":0,"renderable":0},{"_id":"source/img/JS.png","path":"img/JS.png","modified":0,"renderable":0},{"_id":"source/img/bgImg.png","path":"img/bgImg.png","modified":0,"renderable":0},{"_id":"source/img/great.jpg","path":"img/great.jpg","modified":0,"renderable":0},{"_id":"source/img/legend-2025-01-21-21-19-51.png","path":"img/legend-2025-01-21-21-19-51.png","modified":0,"renderable":0},{"_id":"source/img/find-2025-01-22-11-58-20.png","path":"img/find-2025-01-22-11-58-20.png","modified":0,"renderable":0},{"_id":"source/img/me.jpg","path":"img/me.jpg","modified":0,"renderable":0},{"_id":"source/img/re0-2025-01-18-17-16-53.png","path":"img/re0-2025-01-18-17-16-53.png","modified":0,"renderable":0},{"_id":"source/img/re0-2025-01-18-17-40-27.png","path":"img/re0-2025-01-18-17-40-27.png","modified":0,"renderable":0},{"_id":"source/img/sun.png","path":"img/sun.png","modified":0,"renderable":0},{"_id":"source/img/倦鸟.png","path":"img/倦鸟.png","modified":0,"renderable":0},{"_id":"source/img/不死鸟.jpg","path":"img/不死鸟.jpg","modified":0,"renderable":0},{"_id":"source/img/哭哭帕克.jpg","path":"img/哭哭帕克.jpg","modified":0,"renderable":0},{"_id":"source/img/料理的加护.jpg","path":"img/料理的加护.jpg","modified":0,"renderable":0},{"_id":"source/img/晚霞.jpg","path":"img/晚霞.jpg","modified":0,"renderable":0},{"_id":"source/img/校长帕克.jpg","path":"img/校长帕克.jpg","modified":0,"renderable":0},{"_id":"source/img/照镜子.jpg","path":"img/照镜子.jpg","modified":0,"renderable":0},{"_id":"source/img/猫猫-2025-01-20-22-47-27.png","path":"img/猫猫-2025-01-20-22-47-27.png","modified":0,"renderable":0},{"_id":"source/img/跨域共享.jpg","path":"img/跨域共享.jpg","modified":0,"renderable":0},{"_id":"source/img/社会心理学.png","path":"img/社会心理学.png","modified":0,"renderable":0},{"_id":"source/img/闪耀pack.jpg","path":"img/闪耀pack.jpg","modified":0,"renderable":0},{"_id":"source/img/雪国.jpg","path":"img/雪国.jpg","modified":0,"renderable":0},{"_id":"source/img/雷姆拉姆.jpg","path":"img/雷姆拉姆.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_drafts/my-fisrt-draft.md","hash":"e142445800a90b2f3e176061f51fc052d41c884e","modified":1737287194121},{"_id":"source/.DS_Store","hash":"42d039798915dbd5b45a3d79dee6e4aefa5f5911","modified":1737287194121},{"_id":"source/about/index.md","hash":"51db98c8124ff2a7c6297aa8a8cfc4bd04303bc0","modified":1737287194126},{"_id":"source/_posts/CORS.md","hash":"c9b26c4ef559cd7c93fee12afca523e7c6275c33","modified":1737287194122},{"_id":"source/_posts/Re0.md","hash":"1e47dbad0740c7a6fe264833bcfe530243331a7d","modified":1737287194123},{"_id":"source/_posts/Tmux.md","hash":"7270b94efe83ff6a65be8cc4981f6b144c9fa8b3","modified":1737287194124},{"_id":"source/_posts/SSH隧道.md","hash":"21d084e11ea2583dcb2009b0cbed8c707fe4bf7b","modified":1737287194124},{"_id":"source/_posts/css笔记.md","hash":"a7f92a6fd6680a4bd6ba5259b6bffb5e0f785869","modified":1737287194124},{"_id":"source/_posts/makefile.md","hash":"bff71cf9ce46802b02108ca462812e4addef36d8","modified":1737528251866},{"_id":"source/_posts/pip-tools.md","hash":"84734fdbbef7b8782ae4eba48cd3f273fd244f97","modified":1737287194124},{"_id":"source/_posts/JavaScript.md","hash":"875b7ba209c14ce3af5c8fba09c83247f2367818","modified":1737287194123},{"_id":"source/_posts/媒体查询.md","hash":"9b196dfde66daae3b555d0018f7df5c3a3d89a56","modified":1737287194125},{"_id":"source/css/custom.css","hash":"9394c276ecae6a9eb30237cc625002db76c263a0","modified":1737464245792},{"_id":"source/_posts/关系数据库.md","hash":"0ff9fef4ee2efa84c2e00c80a13d8b65d7209025","modified":1737521247121},{"_id":"source/_posts/mermaid.md","hash":"7ee4337d6929add14b61127576aa8d4cfa9af9e1","modified":1737527828992},{"_id":"source/_posts/社会心理学.md","hash":"39314923e47e10c118940dd360e1bf4c607babe7","modified":1737287194126},{"_id":"source/_posts/认证配置.md","hash":"284a65ff1554ac90e36f4e8372589b10dc09cf3b","modified":1737287194126},{"_id":"source/js/duration.js","hash":"feffbc1f875e5df4e5799175ade39ae6b8a756ec","modified":1737287194208},{"_id":"source/_posts/themechange.md","hash":"47cc33e9ddfbd01319365f760d509a62ddf07678","modified":1737602576238},{"_id":"source/img/.DS_Store","hash":"9ef73987a0cd51fdfb75e81dba148a87958cb6bd","modified":1737287194172},{"_id":"source/_posts/建站第一天.md","hash":"228bb16a2d4a2d8de018e34e36dbe4a078db6526","modified":1737287194125},{"_id":"source/_posts/计.md","hash":"20d1708767d5e8521d4cccab5d906d0768732799","modified":1737471859192},{"_id":"source/img/2025-01-17-14-00-36.png","hash":"eacdd40a31bb3f4ccec48b38aa01d9e4f4a000d5","modified":1737287194173},{"_id":"source/img/JS.png","hash":"a115cbbec848dea5824181ef22411d8efc6dbfa8","modified":1737287194185},{"_id":"source/img/legend-2025-01-21-21-19-51.png","hash":"c56fc82db2388050164829230deac64751c69ea6","modified":1737465596946},{"_id":"source/img/find-2025-01-22-11-58-20.png","hash":"a889d1dd151686eb085de78836a2cc7e59a43606","modified":1737518306563},{"_id":"source/img/猫猫-2025-01-20-22-47-27.png","hash":"91d8cfe3cb9673a851c50fc6351c91b9cb54bb60","modified":1737464245792},{"_id":"source/_posts/poets/bird.md","hash":"6dab2c86bb85c964c1182c5c2776b68ee27f2f4f","modified":1737287194125},{"_id":"source/_posts/poets/晚霞.md","hash":"21e2d42d07d9dc322ad69cabcb458d7759001d1f","modified":1737287194125},{"_id":"source/img/2025-01-18-13-01-29.png","hash":"6dbe8216f8848a8f202de965f4313dbb2eecdd58","modified":1737287194174},{"_id":"source/img/2025-01-16-23-58-21.png","hash":"3707c7284cdeaada1b82a50889d6bc5b66cfab69","modified":1737287194172},{"_id":"source/img/2025-01-18-12-58-38.png","hash":"cf5073b3f0fcc5f8e8b013927dc633cdb0eb478b","modified":1737287194174},{"_id":"source/img/2025-01-18-11-41-54.png","hash":"1d85d673eebe40136f7058b03e7d4aa3d2760b14","modified":1737287194173},{"_id":"source/img/great.jpg","hash":"ad40b86f9b500d362074fe888853c2536ba6e834","modified":1737287194192},{"_id":"source/img/2025-01-18-13-03-21.png","hash":"25abaf57c0e17909b165180aaf9d390fe09d6c5a","modified":1737287194175},{"_id":"source/img/2025-01-18-13-09-11.png","hash":"47c213fc9292190467b8b6f0e19b9408dbe6824f","modified":1737287194176},{"_id":"source/img/Aniya_放大镜.jpg","hash":"538ff8e7ac38f341c0166820d43617d73675cc86","modified":1737287194184},{"_id":"source/img/不死鸟.jpg","hash":"0baad7c3a94594079f49165c91f061d0689c1035","modified":1737287194197},{"_id":"source/img/晚霞.jpg","hash":"c89abcb798ddb518b6e8ce08e8afd144b00e8a54","modified":1737287194201},{"_id":"source/img/2025-01-18-11-45-41.png","hash":"f9cf4255cce7bad9cfbe29c5264b022933a64c30","modified":1737287194173},{"_id":"source/img/2025-01-18-17-13-45.png","hash":"b4d0e8077ffe69dfd61db955e869126b24c76ce0","modified":1737287194182},{"_id":"source/img/me.jpg","hash":"bdfdab38c41980cff966c08ea26ca8699948cbd6","modified":1737287194192},{"_id":"source/img/料理的加护.jpg","hash":"6364a3389f2ac52ad1ec33c254ebde8740b257cc","modified":1737287194201},{"_id":"source/img/哭哭帕克.jpg","hash":"e20aa94b2a43c0194fb3d3a5d0762b6404458003","modified":1737287194200},{"_id":"source/img/雪国.jpg","hash":"e1cc8027328cbc55de92496f1e7c90d3812923b7","modified":1737464245793},{"_id":"source/img/闪耀pack.jpg","hash":"470edf49958168295976933a0135d5517954cdba","modified":1737287194208},{"_id":"source/img/2025-01-18-17-14-29.png","hash":"871f5a88a9d126706973463911056770ae7090e8","modified":1737287194183},{"_id":"source/img/re0-2025-01-18-17-16-53.png","hash":"871f5a88a9d126706973463911056770ae7090e8","modified":1737287194193},{"_id":"source/img/re0-2025-01-18-17-40-27.png","hash":"0f759367f3fa09abcf03a7e92ec340f38e133142","modified":1737287194194},{"_id":"source/img/跨域共享.jpg","hash":"438d4dda0d2271203947bb461416275504601355","modified":1737287194207},{"_id":"source/img/2025-01-18-13-15-38.png","hash":"a5774370c2e3ac61a14b5847c2c77ea69afecbfe","modified":1737287194177},{"_id":"source/img/2025-01-18-17-11-36.png","hash":"404b6f149798b76095753ac52d034516b37c1555","modified":1737287194182},{"_id":"source/img/2025-01-18-13-23-22.png","hash":"0c9345d1f0c9af7bc07f7bbf7a15153d4b16aea7","modified":1737287194178},{"_id":"source/img/照镜子.jpg","hash":"204a3b9a70ad3381fc5c2b78d3fc9afdecc2d995","modified":1737287194205},{"_id":"source/img/校长帕克.jpg","hash":"dbc8efb5b99bf953032dac803a4ea7ac1166974e","modified":1737287194204},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737287194229},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1737287194211},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1737287194210},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1737287194210},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1737287194212},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1737287194211},{"_id":"themes/fluid/package.json","hash":"d56f9287f8d95211c592fb8ffd27e9f409b96f61","modified":1737287194220},{"_id":"themes/fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1737287194213},{"_id":"themes/fluid/README.md","hash":"0f60b4293ffbe773a375d5acbdd9b9d6fd522655","modified":1737287194212},{"_id":"themes/fluid/README_en.md","hash":"4094caaa0e438ebb74064f1583c7eebb6685edba","modified":1737287194213},{"_id":"themes/fluid/_config.yml","hash":"01997c93736a63c64d7651ea23d86d479d7675d8","modified":1737464245794},{"_id":"themes/fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1737287194213},{"_id":"themes/fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1737287194213},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1737287194213},{"_id":"themes/fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1737287194213},{"_id":"themes/fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1737287194213},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1737287194213},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1737287194214},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1737287194214},{"_id":"themes/fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1737287194218},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1737287194218},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1737287194218},{"_id":"themes/fluid/layout/index.ejs","hash":"e46d610f256a9ec48f10530b08764431819d9ca3","modified":1737287194219},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1737287194219},{"_id":"themes/fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1737287194213},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1737287194219},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1737287194219},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f6d723e3712e359af13c8e00ad3cf8c5957d8ae","modified":1737464245794},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1737287194218},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"028abcad53bf9d9ee660b1c6434fc17739d91376","modified":1737287194214},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1737287194215},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1737287194220},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1737287194214},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1737287194218},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1737287194218},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1737287194216},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1737287194232},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1737287194231},{"_id":"themes/fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1737287194231},{"_id":"themes/fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1737287194231},{"_id":"themes/fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1737287194231},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1737287194231},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1737287194231},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1737287194232},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1737287194230},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1737287194231},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1737287194231},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"b80ee3cf3ffe95b5cfb9502071de7f56a63ce2d3","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/antd-icons.ejs","hash":"68dedd6f5f57e612a294386714fcab4d5d390123","modified":1737287194214},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1737287194230},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1737287194230},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1737287194230},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1737287194229},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1737287194220},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1737287194221},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1737287194222},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1737287194229},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1737287194223},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1737287194223},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1737287194222},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1737287194223},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1737287194223},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1737287194223},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1737287194222},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1737287194223},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1737287194223},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1737287194223},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1737287194223},{"_id":"themes/fluid/source/css/main.styl","hash":"ff1a17fcfbee8c80bdb586046c0e788e64b31e66","modified":1737287194230},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1737287194223},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1737287194223},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1737287194224},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1737287194224},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1737287194222},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1737287194222},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1737287194222},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1737287194224},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1737287194224},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1737287194224},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1737287194224},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1737287194224},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1737287194223},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1737287194215},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1737287194219},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1737287194215},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1737287194216},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1737287194217},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1737287194229},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1737287194218},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1737287194218},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1737287194217},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1737287194218},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1737287194225},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1737287194218},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1737287194217},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"e2c5ad258db47d4c1ef9dcd448f05194cbf75c6b","modified":1737287194223},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1737287194217},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1737287194223},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1737287194221},{"_id":"themes/fluid/scripts/events/lib/antd-icons.js","hash":"f8e2f9df089f6d7287c06233d84284a8b872420f","modified":1737287194220},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1737287194217},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1737287194221},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1737287194221},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1737287194221},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1737287194221},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1737287194221},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1737287194229},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1737287194225},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1737287194225},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1737287194229},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1737287194228},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1737287194228},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1737287194221},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1737287194225},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"d8eb7c7b76b70547d96701e9f4f5fb15f2fab907","modified":1737288708287},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1737287194228},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1737287194229},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1737287194228},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1737287194229},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1737287194229},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1737287194225},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1737287194225},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1737287194225},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1737287194225},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1737287194226},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1737287194228},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1737287194227},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1737287194229},{"_id":"source/img/2025-01-18-17-06-50.png","hash":"876ab15e17ea9dcea496b762bca7caf19c89fdec","modified":1737287194181},{"_id":"source/img/社会心理学.png","hash":"c9c128c4eec5c43793b46f64bbe65c4c3e248913","modified":1737287194206},{"_id":"source/img/倦鸟.png","hash":"3d1326ddaa360899150a6857a8c96b50ea6c5e80","modified":1737287194198},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1737287194230},{"_id":"source/img/Aniya.png","hash":"97b6ac6164cda9614d8a8abdcc1eb78c3bb38f41","modified":1737287194184},{"_id":"source/img/sun.png","hash":"fea6d5ddff389d6bc7e3cfb0ef1f8d768fdaf202","modified":1737287194197},{"_id":"source/img/bgImg.png","hash":"8869c9029beef9c1240289e9fefc394972af5f64","modified":1737287194191},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1737287194171},{"_id":"public/css/custom.css","hash":"9394c276ecae6a9eb30237cc625002db76c263a0","modified":1737598182212},{"_id":"public/js/duration.js","hash":"feffbc1f875e5df4e5799175ade39ae6b8a756ec","modified":1737598182212},{"_id":"public/local-search.xml","hash":"d8c8a93f3a1cef14db1c0f5d2aaba534202a2e96","modified":1737598182212},{"_id":"public/about/index.html","hash":"f40abf3cb07bbda399b7a5cb87af304b4c1efc96","modified":1737598182212},{"_id":"public/2025/01/23/themechange/index.html","hash":"ceb17b15bfa5f905457d85c8303e967567b12489","modified":1737598182212},{"_id":"public/2025/01/22/mermaid/index.html","hash":"9d2fadc9fec9123d661dc5f62bf2b4d1f2a728bb","modified":1737598182212},{"_id":"public/2025/01/22/makefile/index.html","hash":"0b5315870080ce1d66e7d89c3a78429dfb42b742","modified":1737598182212},{"_id":"public/2025/01/22/关系数据库/index.html","hash":"79e878afab2b870c57514b8481eec996e9f571a1","modified":1737598182212},{"_id":"public/2025/01/20/计/index.html","hash":"4413b52cd99d6f52be6782ac9acb4eca3b7e36ec","modified":1737598182212},{"_id":"public/2025/01/18/Re0/index.html","hash":"66cc2e1f31af9c05e26510caa110ae57ff8ca331","modified":1737598182212},{"_id":"public/2025/01/18/认证配置/index.html","hash":"c6aacc9b81f433a5fcd679e9f93fd4633c5b5f29","modified":1737598182212},{"_id":"public/2025/01/17/Tmux/index.html","hash":"812fe1947f6470610f02f112b3b583dd8b0fa73b","modified":1737598182212},{"_id":"public/2025/01/17/SSH隧道/index.html","hash":"8ede3573f3b82339686e037d0afb0ba0c1441ae3","modified":1737598182212},{"_id":"public/2025/01/16/CORS/index.html","hash":"e6177b6f51041afc97d7aaff7da96a330f5bea66","modified":1737598182212},{"_id":"public/2025/01/15/pip-tools/index.html","hash":"7b057db18c6bf7419288f0fa407c005a63f332d6","modified":1737598182212},{"_id":"public/2025/01/09/poets/晚霞/index.html","hash":"7187972087bbd0a86fbd8fb44edbdf9ef8151b60","modified":1737598182212},{"_id":"public/2025/01/09/JavaScript/index.html","hash":"c145567d4f94e4655a40a80d408bba316f3ef362","modified":1737598182212},{"_id":"public/2025/01/09/社会心理学/index.html","hash":"ade799927d7068cee3d25170ca3f1831239e4823","modified":1737598182212},{"_id":"public/2025/01/08/媒体查询/index.html","hash":"70a5ba430f8467c1e10a565df0f15ec25be6bca2","modified":1737598182212},{"_id":"public/2025/01/08/css笔记/index.html","hash":"f433a5442a230e1b72c54d981c529026a362a4b8","modified":1737598182212},{"_id":"public/2025/01/08/poets/bird/index.html","hash":"19510c971b72c5e40e5312de2a95a6adc63f2018","modified":1737598182212},{"_id":"public/2025/01/08/建站第一天/index.html","hash":"746eadb75f6d98814dde8c4b90b33183949ef5c2","modified":1737598182212},{"_id":"public/archives/page/2/index.html","hash":"d9500ee5a9cc694ac5f3d3cdafa1a72660954955","modified":1737598182212},{"_id":"public/archives/index.html","hash":"ba3f7dec636aa6f53d0dc6ec26f892102ac605aa","modified":1737598182212},{"_id":"public/archives/2025/index.html","hash":"39d716aa3036fa888c3f3b97b65d96278805a81d","modified":1737598182212},{"_id":"public/archives/2025/page/2/index.html","hash":"ba81b2e07521cdb18e62b4a424cdd612c89b66ed","modified":1737598182212},{"_id":"public/archives/2025/01/index.html","hash":"6b433ab654b5e232ad2e43390de71040752d328d","modified":1737598182212},{"_id":"public/archives/2025/01/page/2/index.html","hash":"afe914013dd7ea3e5cc445584ca6667ec1a5d30a","modified":1737598182212},{"_id":"public/categories/生活碎碎念/index.html","hash":"ea5a391355bcaf87791086fbf96a5eeec0ddaa0c","modified":1737598182212},{"_id":"public/categories/学习笔记/index.html","hash":"699d6b4f7276dd3738e5714a8ac53249effca58f","modified":1737598182212},{"_id":"public/categories/通用技能/index.html","hash":"a0a0a6b4a46dc1335f8321112449702e93afc467","modified":1737598182212},{"_id":"public/categories/兴趣阅读/index.html","hash":"30e3c5d49abd83d5c552ee5747b7719f4ac133a1","modified":1737598182212},{"_id":"public/categories/随机掉落的文字碎片/index.html","hash":"3c055ce8d7fba22c75a09a2b4d02bff3286410a6","modified":1737598182212},{"_id":"public/tags/前后端交互/index.html","hash":"3f7ed1eb5bd7801385e190293c1f2f8524bffd65","modified":1737598182212},{"_id":"public/tags/网站开发/index.html","hash":"7fd696d63ef3e0db87dabb5ee1fe644becf4cd32","modified":1737598182212},{"_id":"public/tags/追番/index.html","hash":"3b75468c6c78c395290e1f2a4d8225d021095c32","modified":1737598182212},{"_id":"public/tags/ssh/index.html","hash":"2a2f990fc15fce2bdda31820f66d5bd941776201","modified":1737598182212},{"_id":"public/tags/服务器/index.html","hash":"625156e5d74f806e783b134c186184af2445166e","modified":1737598182212},{"_id":"public/tags/多会话管理/index.html","hash":"f4e935a6e68fa087f2d6f0e58cadd6622d183e4f","modified":1737598182212},{"_id":"public/tags/前端/index.html","hash":"66a0948deac4b683b1213a65f6720e13af62094e","modified":1737598182212},{"_id":"public/tags/JS/index.html","hash":"8e21712990301376ba6b67e52791a93d441f4f39","modified":1737598182212},{"_id":"public/tags/python/index.html","hash":"85b36e64ef1201f0c65236abdc412f282a6d5004","modified":1737598182212},{"_id":"public/tags/环境配置/index.html","hash":"e822da868d6a8d5cbb8d448466910d8647033b6a","modified":1737598182212},{"_id":"public/tags/杂记/index.html","hash":"619ac916f10d59c1d26866b1bb2f181a20364cdc","modified":1737598182212},{"_id":"public/tags/心理学/index.html","hash":"772b2fe30b8530a259ae3c643407b539446047c9","modified":1737598182212},{"_id":"public/tags/PAT/index.html","hash":"ba42648e2ddebc455ce5261b3284c8413bf60f0d","modified":1737598182212},{"_id":"public/tags/短诗/index.html","hash":"4fd94c16f0f1aa123db1bd29d2dd2d18174a18f2","modified":1737598182212},{"_id":"public/tags/她/index.html","hash":"0d2b621a5e1c2133fad40a597ec591a270968268","modified":1737598182212},{"_id":"public/tags/自然/index.html","hash":"89aa60aed3cbd20e42295a72f54147ed18e135b1","modified":1737598182212},{"_id":"public/index.html","hash":"fade2b95550005c76e067005d257cf10d4b5ed0a","modified":1737598182212},{"_id":"public/tags/CSS/index.html","hash":"ef514e75b6e8e1f2dc3b025298194283aaabe89c","modified":1737598182212},{"_id":"public/page/2/index.html","hash":"8b82f559babc50a08b2da801f6176f8962be1897","modified":1737598182212},{"_id":"public/tags/index.html","hash":"1dd90555d25effa96d6d9e59cc5a393198737d8d","modified":1737598182212},{"_id":"public/categories/index.html","hash":"40f95e0b0c587df1c5b46509a3041a4e15d22567","modified":1737598182212},{"_id":"public/links/index.html","hash":"8a8a5269f8323ddfcd3cc3f9615fd7ba2a90c300","modified":1737598182212},{"_id":"public/404.html","hash":"32e847043b389f5abf16aac0cbcfc750eb73f8e2","modified":1737598182212},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1737598182212},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1737598182212},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1737598182212},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1737598182212},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1737598182212},{"_id":"public/img/2025-01-17-14-00-36.png","hash":"eacdd40a31bb3f4ccec48b38aa01d9e4f4a000d5","modified":1737598182212},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1737598182212},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1737598182212},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1737598182212},{"_id":"public/img/JS.png","hash":"a115cbbec848dea5824181ef22411d8efc6dbfa8","modified":1737598182212},{"_id":"public/img/find-2025-01-22-11-58-20.png","hash":"a889d1dd151686eb085de78836a2cc7e59a43606","modified":1737598182212},{"_id":"public/img/legend-2025-01-21-21-19-51.png","hash":"c56fc82db2388050164829230deac64751c69ea6","modified":1737598182212},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1737598182212},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1737598182212},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1737598182212},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1737598182212},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1737598182212},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1737598182212},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1737598182212},{"_id":"public/css/main.css","hash":"c0a15af485b1cae62e9188ecd86f95e5e9ffe5a6","modified":1737598182212},{"_id":"public/img/猫猫-2025-01-20-22-47-27.png","hash":"91d8cfe3cb9673a851c50fc6351c91b9cb54bb60","modified":1737598182212},{"_id":"public/img/2025-01-18-13-01-29.png","hash":"6dbe8216f8848a8f202de965f4313dbb2eecdd58","modified":1737598182212},{"_id":"public/img/2025-01-16-23-58-21.png","hash":"3707c7284cdeaada1b82a50889d6bc5b66cfab69","modified":1737598182212},{"_id":"public/img/2025-01-18-12-58-38.png","hash":"cf5073b3f0fcc5f8e8b013927dc633cdb0eb478b","modified":1737598182212},{"_id":"public/img/2025-01-18-11-41-54.png","hash":"1d85d673eebe40136f7058b03e7d4aa3d2760b14","modified":1737598182212},{"_id":"public/img/great.jpg","hash":"ad40b86f9b500d362074fe888853c2536ba6e834","modified":1737598182212},{"_id":"public/css/highlight.css","hash":"fccb2ef611250f9f5a38f3a2506ded52309e13ce","modified":1737598182212},{"_id":"public/css/highlight-dark.css","hash":"fccb2ef611250f9f5a38f3a2506ded52309e13ce","modified":1737598182212},{"_id":"public/img/2025-01-18-13-03-21.png","hash":"25abaf57c0e17909b165180aaf9d390fe09d6c5a","modified":1737598182212},{"_id":"public/img/2025-01-18-13-09-11.png","hash":"47c213fc9292190467b8b6f0e19b9408dbe6824f","modified":1737598182212},{"_id":"public/img/Aniya_放大镜.jpg","hash":"538ff8e7ac38f341c0166820d43617d73675cc86","modified":1737598182212},{"_id":"public/img/不死鸟.jpg","hash":"0baad7c3a94594079f49165c91f061d0689c1035","modified":1737598182212},{"_id":"public/img/晚霞.jpg","hash":"c89abcb798ddb518b6e8ce08e8afd144b00e8a54","modified":1737598182212},{"_id":"public/img/2025-01-18-11-45-41.png","hash":"f9cf4255cce7bad9cfbe29c5264b022933a64c30","modified":1737598182212},{"_id":"public/img/2025-01-18-17-13-45.png","hash":"b4d0e8077ffe69dfd61db955e869126b24c76ce0","modified":1737598182212},{"_id":"public/img/me.jpg","hash":"bdfdab38c41980cff966c08ea26ca8699948cbd6","modified":1737598182212},{"_id":"public/img/料理的加护.jpg","hash":"6364a3389f2ac52ad1ec33c254ebde8740b257cc","modified":1737598182212},{"_id":"public/img/哭哭帕克.jpg","hash":"e20aa94b2a43c0194fb3d3a5d0762b6404458003","modified":1737598182212},{"_id":"public/img/闪耀pack.jpg","hash":"470edf49958168295976933a0135d5517954cdba","modified":1737598182212},{"_id":"public/img/雪国.jpg","hash":"e1cc8027328cbc55de92496f1e7c90d3812923b7","modified":1737598182212},{"_id":"public/img/2025-01-18-17-14-29.png","hash":"871f5a88a9d126706973463911056770ae7090e8","modified":1737598182212},{"_id":"public/img/re0-2025-01-18-17-40-27.png","hash":"0f759367f3fa09abcf03a7e92ec340f38e133142","modified":1737598182212},{"_id":"public/img/re0-2025-01-18-17-16-53.png","hash":"871f5a88a9d126706973463911056770ae7090e8","modified":1737598182212},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1737598182212},{"_id":"public/img/跨域共享.jpg","hash":"438d4dda0d2271203947bb461416275504601355","modified":1737598182212},{"_id":"public/img/2025-01-18-13-15-38.png","hash":"a5774370c2e3ac61a14b5847c2c77ea69afecbfe","modified":1737598182212},{"_id":"public/img/2025-01-18-17-11-36.png","hash":"404b6f149798b76095753ac52d034516b37c1555","modified":1737598182212},{"_id":"public/img/2025-01-18-13-23-22.png","hash":"0c9345d1f0c9af7bc07f7bbf7a15153d4b16aea7","modified":1737598182212},{"_id":"public/img/照镜子.jpg","hash":"204a3b9a70ad3381fc5c2b78d3fc9afdecc2d995","modified":1737598182212},{"_id":"public/img/校长帕克.jpg","hash":"dbc8efb5b99bf953032dac803a4ea7ac1166974e","modified":1737598182212},{"_id":"public/img/社会心理学.png","hash":"c9c128c4eec5c43793b46f64bbe65c4c3e248913","modified":1737598182212},{"_id":"public/img/2025-01-18-17-06-50.png","hash":"876ab15e17ea9dcea496b762bca7caf19c89fdec","modified":1737598182212},{"_id":"public/img/倦鸟.png","hash":"3d1326ddaa360899150a6857a8c96b50ea6c5e80","modified":1737598182212},{"_id":"public/img/Aniya.png","hash":"97b6ac6164cda9614d8a8abdcc1eb78c3bb38f41","modified":1737598182212},{"_id":"public/img/sun.png","hash":"fea6d5ddff389d6bc7e3cfb0ef1f8d768fdaf202","modified":1737598182212},{"_id":"public/img/bgImg.png","hash":"8869c9029beef9c1240289e9fefc394972af5f64","modified":1737598182212},{"_id":"public/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1737598182212},{"_id":"source/img/雷姆拉姆.jpg","hash":"a3360d4afcc99266225d67003a06a133a2a8ecc7","modified":1737022344062}],"Category":[{"name":"学习笔记","_id":"cm68p3end0006uyqg2436dz40"},{"name":"生活碎碎念","_id":"cm68p3enf000buyqgepst36ah"},{"name":"通用技能","_id":"cm68p3enf000guyqg17f17io3"},{"name":"兴趣阅读","_id":"cm68p3eok001quyqg06kfdi9e"},{"name":"随机掉落的文字碎片","_id":"cm68p3eol001xuyqg1y8lf2yc"}],"Data":[],"Page":[{"_content":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n    font-display: swap;\n}\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n/* Timeline styles */\n.timeline-container {\n    position: relative;\n    padding-left: 30px;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .timeline-item {\n    position: relative;\n    padding-left: 10px;\n    margin-bottom: 0px;\n  }\n  \n  .timeline-line {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 1px;\n    background: var(--line-color);\n  }\n  \n  .timeline-dot {\n    position: absolute;\n    left: -0.15rem;\n    top: 45%;\n    transform: translateY(-50%);\n    width: 0.3rem;\n    height: 0.3rem;\n    border-radius: 50%;\n    background: #8e8c8c;\n    border: 0px solid white;\n    z-index: 1;\n    transition: all 0.3s ease;\n  }\n  \n  .timeline-item:hover .timeline-dot {\n    transform: scale(1.3);\n    background: var(--link-hover-color);\n  }\n  \n  .timeline-item:hover .list-group-item {\n    color: var(--link-hover-color);\n    transform: translateX(5px);\n  }\n  \n  .timeline-year {\n    position: relative;\n    margin-right: auto;\n    padding: 10px 0;\n    font-weight: bold;\n    border:none;\n    background: var(--board-color);\n    padding: 5px 15px;\n    border-radius: 20px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  }\n  \n  .list-group-item {\n    margin-bottom: 0px;\n    margin-left: 10px;\n    transition: all 0.3s ease;\n  }\n  \n  .list-group-item:hover {\n    box-shadow: 0 4px 15px rgba(33,150,243,0.2);\n    border-color: var(--post-link-color);\n  }\n  \n  .list-group-item-title {\n    font-size: 1rem;\n    font-weight: 500;\n  }\n  \n  .badge.bg-primary {\n    font-weight: 400;\n    font-size: 0.8rem;\n    padding: 4px 8px;\n  }\n  \n  .text-muted {\n    color: var(--sec-text-color) !important;\n    font-size: 0.9rem;\n    line-height: 1.5;\n  }\n  \n  @media (max-width: 768px) {\n    .timeline-container {\n      padding-left: 20px;\n    }\n    .timeline-item {\n      padding-left: 15px;\n    }\n  }\n  \n\n  .category-item, \n.category-subitem {\n  display: flex;\n  align-items: center;\n}\n\n.category-count {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding-right: 15px;\n}\n\n.category-count i,\n.category-count span {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.category-count i {\n  margin-right: 5px;\n}\n","source":"css/custom.css","raw":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n    font-display: swap;\n}\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n/* Timeline styles */\n.timeline-container {\n    position: relative;\n    padding-left: 30px;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .timeline-item {\n    position: relative;\n    padding-left: 10px;\n    margin-bottom: 0px;\n  }\n  \n  .timeline-line {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 1px;\n    background: var(--line-color);\n  }\n  \n  .timeline-dot {\n    position: absolute;\n    left: -0.15rem;\n    top: 45%;\n    transform: translateY(-50%);\n    width: 0.3rem;\n    height: 0.3rem;\n    border-radius: 50%;\n    background: #8e8c8c;\n    border: 0px solid white;\n    z-index: 1;\n    transition: all 0.3s ease;\n  }\n  \n  .timeline-item:hover .timeline-dot {\n    transform: scale(1.3);\n    background: var(--link-hover-color);\n  }\n  \n  .timeline-item:hover .list-group-item {\n    color: var(--link-hover-color);\n    transform: translateX(5px);\n  }\n  \n  .timeline-year {\n    position: relative;\n    margin-right: auto;\n    padding: 10px 0;\n    font-weight: bold;\n    border:none;\n    background: var(--board-color);\n    padding: 5px 15px;\n    border-radius: 20px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  }\n  \n  .list-group-item {\n    margin-bottom: 0px;\n    margin-left: 10px;\n    transition: all 0.3s ease;\n  }\n  \n  .list-group-item:hover {\n    box-shadow: 0 4px 15px rgba(33,150,243,0.2);\n    border-color: var(--post-link-color);\n  }\n  \n  .list-group-item-title {\n    font-size: 1rem;\n    font-weight: 500;\n  }\n  \n  .badge.bg-primary {\n    font-weight: 400;\n    font-size: 0.8rem;\n    padding: 4px 8px;\n  }\n  \n  .text-muted {\n    color: var(--sec-text-color) !important;\n    font-size: 0.9rem;\n    line-height: 1.5;\n  }\n  \n  @media (max-width: 768px) {\n    .timeline-container {\n      padding-left: 20px;\n    }\n    .timeline-item {\n      padding-left: 15px;\n    }\n  }\n  \n\n  .category-item, \n.category-subitem {\n  display: flex;\n  align-items: center;\n}\n\n.category-count {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding-right: 15px;\n}\n\n.category-count i,\n.category-count span {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.category-count i {\n  margin-right: 5px;\n}\n","date":"2025-01-21T12:57:25.792Z","updated":"2025-01-21T12:57:25.792Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cm68p3en60000uyqg6usy7bka","content":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n    font-display: swap;\n}\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n/* Timeline styles */\n.timeline-container {\n    position: relative;\n    padding-left: 30px;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .timeline-item {\n    position: relative;\n    padding-left: 10px;\n    margin-bottom: 0px;\n  }\n  \n  .timeline-line {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 1px;\n    background: var(--line-color);\n  }\n  \n  .timeline-dot {\n    position: absolute;\n    left: -0.15rem;\n    top: 45%;\n    transform: translateY(-50%);\n    width: 0.3rem;\n    height: 0.3rem;\n    border-radius: 50%;\n    background: #8e8c8c;\n    border: 0px solid white;\n    z-index: 1;\n    transition: all 0.3s ease;\n  }\n  \n  .timeline-item:hover .timeline-dot {\n    transform: scale(1.3);\n    background: var(--link-hover-color);\n  }\n  \n  .timeline-item:hover .list-group-item {\n    color: var(--link-hover-color);\n    transform: translateX(5px);\n  }\n  \n  .timeline-year {\n    position: relative;\n    margin-right: auto;\n    padding: 10px 0;\n    font-weight: bold;\n    border:none;\n    background: var(--board-color);\n    padding: 5px 15px;\n    border-radius: 20px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  }\n  \n  .list-group-item {\n    margin-bottom: 0px;\n    margin-left: 10px;\n    transition: all 0.3s ease;\n  }\n  \n  .list-group-item:hover {\n    box-shadow: 0 4px 15px rgba(33,150,243,0.2);\n    border-color: var(--post-link-color);\n  }\n  \n  .list-group-item-title {\n    font-size: 1rem;\n    font-weight: 500;\n  }\n  \n  .badge.bg-primary {\n    font-weight: 400;\n    font-size: 0.8rem;\n    padding: 4px 8px;\n  }\n  \n  .text-muted {\n    color: var(--sec-text-color) !important;\n    font-size: 0.9rem;\n    line-height: 1.5;\n  }\n  \n  @media (max-width: 768px) {\n    .timeline-container {\n      padding-left: 20px;\n    }\n    .timeline-item {\n      padding-left: 15px;\n    }\n  }\n  \n\n  .category-item, \n.category-subitem {\n  display: flex;\n  align-items: center;\n}\n\n.category-count {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding-right: 15px;\n}\n\n.category-count i,\n.category-count span {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.category-count i {\n  margin-right: 5px;\n}\n"},{"_content":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2025/01/08 14:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站已运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();","source":"js/duration.js","raw":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2025/01/08 14:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站已运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();","date":"2025-01-19T11:46:34.208Z","updated":"2025-01-19T11:46:34.208Z","path":"js/duration.js","layout":"false","title":"","comments":1,"_id":"cm68p3en90002uyqg2h94anz9","content":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2025/01/08 14:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站已运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();"},{"title":"about","layout":"about","date":"2025-01-08T06:42:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2025-01-08 14:42:30\n---\n","updated":"2025-01-19T11:46:34.126Z","path":"about/index.html","comments":1,"_id":"cm68p3enb0004uyqghct38dz0","content":"","excerpt":"","more":""}],"Post":[{"title":"my-fisrt-draft","_content":"","source":"_drafts/my-fisrt-draft.md","raw":"---\ntitle: my-fisrt-draft\ntags:\n---\n","slug":"my-fisrt-draft","published":0,"date":"2025-01-19T11:46:34.121Z","updated":"2025-01-19T11:46:34.121Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3en70001uyqg820nh452","content":"","excerpt":"","more":""},{"title":"CORS","date":"2025-01-16T02:11:38.000Z","excerpt":"在前后端分离的项目中, 常常需要注意跨域资源共享的问题.","index_img":"/img/跨域共享.jpg","_content":"\n# 跨域资源共享（CORS）技术指南\n\n## 目录\n1. [概述](#概述)\n2. [技术背景](#技术背景)\n3. [配置方案](#配置方案)\n4. [最佳实践](#最佳实践)\n5. [问题排查](#问题排查)\n6. [参考文献](#参考文献)\n\n## 概述\n\n跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。\n\n## 技术背景\n\n### 同源策略基础\n\n同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：\n\n```plaintext\n基准URL：http://example.com/page.html\n\n跨域场景：\n- http://api.example.com/data     // 子域名差异\n- https://example.com/data        // 协议差异\n- http://example.com:8080/data    // 端口差异\n```\n\n## 配置方案\n\n### 环境变量驱动的CORS配置\n\n以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：\n\n```python\nimport os\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\n\n# 从环境变量获取前端URL，如果没有设置则使用默认值\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n\n# CORS配置实现\nCORS(app, resources={\n    r\"/api/*\": {\n        \"origins\": FRONTEND_URL,\n        \"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"],\n        \"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\n        \"supports_credentials\": True,\n        \"expose_headers\": [\"Content-Disposition\"]\n    }\n})\n```\n\n### 配置详解\n\n让我们逐行分析这个配置：\n\n1. **环境变量设置**\n```python\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n```\n- 使用`os.environ.get()`获取环境变量\n- 提供默认值`'http://localhost:3000'`作为本地开发环境的配置\n- 可以通过环境变量轻松切换不同环境的配置\n\n2. **CORS配置参数**\n```python\n\"origins\": FRONTEND_URL\n```\n- 动态设置允许的源，基于环境变量\n- 避免了硬编码的问题\n- 支持不同部署环境的灵活配置\n\n3. **HTTP方法配置**\n```python\n\"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"]\n```\n- 明确定义允许的HTTP方法\n- 包含了RESTful API所需的全部方法\n- `OPTIONS`用于预检请求（preflight request）\n\n4. **请求头配置**\n```python\n\"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"]\n```\n- `Content-Type`：允许设置请求的内容类型\n- `Authorization`：支持身份验证令牌\n- `X-Requested-With`：用于标识AJAX请求\n\n5. **凭证支持**\n```python\n\"supports_credentials\": True\n```\n- 允许跨域请求携带凭证（如Cookie）\n- 对需要身份验证的API至关重要\n\n6. **响应头暴露**\n```python\n\"expose_headers\": [\"Content-Disposition\"]\n```\n- 允许客户端访问`Content-Disposition`响应头\n- 通常用于文件下载功能\n\n### 环境变量配置示例\n\n```bash\n# 开发环境\nexport FRONTEND_URL=http://localhost:3000\n\n# 测试环境\nexport FRONTEND_URL=http://test.example.com\n\n# 生产环境\nexport FRONTEND_URL=https://www.example.com\n```\n\n## 最佳实践\n\n### 环境变量管理建议\n\n1. **开发环境**\n- 使用`.env`文件管理本地开发环境变量\n- 将`.env`文件加入`.gitignore`\n\n2. **生产环境**\n- 使用容器化部署时通过环境变量注入\n- 使用配置管理系统统一管理环境变量\n\n### 安全性考虑\n\n1. **避免过于宽松的配置**\n```python\n# 不推荐\n\"origins\": \"*\"  \n\n# 推荐\n\"origins\": FRONTEND_URL\n```\n\n2. **合理设置凭证策略**\n- 仅在必要时启用`supports_credentials`\n- 确保前端配置匹配（`credentials: 'include'`）\n\n## 问题排查\n\n### 常见错误及解决方案\n\n1. **CORS策略违规**\n```plaintext\nAccess to XMLHttpRequest at 'http://api.example.com' from origin 'http://example.com' \nhas been blocked by CORS policy\n```\n解决方案：\n- 检查环境变量是否正确设置\n- 验证前端请求URL与配置是否匹配\n- 确认所有必要的请求头都已配置\n\n## 参考文献\n\n1. [W3C CORS Specification](https://fetch.spec.whatwg.org/?locale=zh_CN)\n2. [MDN Web Docs - Cross-Origin Resource Sharing](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n3. [Flask-CORS Official Documentation](https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN)\n","source":"_posts/CORS.md","raw":"---\ntitle: CORS\ndate: 2025-01-16 10:11:38\ntags: \n- 前后端交互  \n- 网站开发\ncategories: 学习笔记\nexcerpt: 在前后端分离的项目中, 常常需要注意跨域资源共享的问题.\nindex_img: /img/跨域共享.jpg\n---\n\n# 跨域资源共享（CORS）技术指南\n\n## 目录\n1. [概述](#概述)\n2. [技术背景](#技术背景)\n3. [配置方案](#配置方案)\n4. [最佳实践](#最佳实践)\n5. [问题排查](#问题排查)\n6. [参考文献](#参考文献)\n\n## 概述\n\n跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。\n\n## 技术背景\n\n### 同源策略基础\n\n同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：\n\n```plaintext\n基准URL：http://example.com/page.html\n\n跨域场景：\n- http://api.example.com/data     // 子域名差异\n- https://example.com/data        // 协议差异\n- http://example.com:8080/data    // 端口差异\n```\n\n## 配置方案\n\n### 环境变量驱动的CORS配置\n\n以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：\n\n```python\nimport os\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\n\n# 从环境变量获取前端URL，如果没有设置则使用默认值\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n\n# CORS配置实现\nCORS(app, resources={\n    r\"/api/*\": {\n        \"origins\": FRONTEND_URL,\n        \"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"],\n        \"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\n        \"supports_credentials\": True,\n        \"expose_headers\": [\"Content-Disposition\"]\n    }\n})\n```\n\n### 配置详解\n\n让我们逐行分析这个配置：\n\n1. **环境变量设置**\n```python\nFRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')\n```\n- 使用`os.environ.get()`获取环境变量\n- 提供默认值`'http://localhost:3000'`作为本地开发环境的配置\n- 可以通过环境变量轻松切换不同环境的配置\n\n2. **CORS配置参数**\n```python\n\"origins\": FRONTEND_URL\n```\n- 动态设置允许的源，基于环境变量\n- 避免了硬编码的问题\n- 支持不同部署环境的灵活配置\n\n3. **HTTP方法配置**\n```python\n\"methods\": [\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\"]\n```\n- 明确定义允许的HTTP方法\n- 包含了RESTful API所需的全部方法\n- `OPTIONS`用于预检请求（preflight request）\n\n4. **请求头配置**\n```python\n\"allow_headers\": [\"Content-Type\", \"Authorization\", \"X-Requested-With\"]\n```\n- `Content-Type`：允许设置请求的内容类型\n- `Authorization`：支持身份验证令牌\n- `X-Requested-With`：用于标识AJAX请求\n\n5. **凭证支持**\n```python\n\"supports_credentials\": True\n```\n- 允许跨域请求携带凭证（如Cookie）\n- 对需要身份验证的API至关重要\n\n6. **响应头暴露**\n```python\n\"expose_headers\": [\"Content-Disposition\"]\n```\n- 允许客户端访问`Content-Disposition`响应头\n- 通常用于文件下载功能\n\n### 环境变量配置示例\n\n```bash\n# 开发环境\nexport FRONTEND_URL=http://localhost:3000\n\n# 测试环境\nexport FRONTEND_URL=http://test.example.com\n\n# 生产环境\nexport FRONTEND_URL=https://www.example.com\n```\n\n## 最佳实践\n\n### 环境变量管理建议\n\n1. **开发环境**\n- 使用`.env`文件管理本地开发环境变量\n- 将`.env`文件加入`.gitignore`\n\n2. **生产环境**\n- 使用容器化部署时通过环境变量注入\n- 使用配置管理系统统一管理环境变量\n\n### 安全性考虑\n\n1. **避免过于宽松的配置**\n```python\n# 不推荐\n\"origins\": \"*\"  \n\n# 推荐\n\"origins\": FRONTEND_URL\n```\n\n2. **合理设置凭证策略**\n- 仅在必要时启用`supports_credentials`\n- 确保前端配置匹配（`credentials: 'include'`）\n\n## 问题排查\n\n### 常见错误及解决方案\n\n1. **CORS策略违规**\n```plaintext\nAccess to XMLHttpRequest at 'http://api.example.com' from origin 'http://example.com' \nhas been blocked by CORS policy\n```\n解决方案：\n- 检查环境变量是否正确设置\n- 验证前端请求URL与配置是否匹配\n- 确认所有必要的请求头都已配置\n\n## 参考文献\n\n1. [W3C CORS Specification](https://fetch.spec.whatwg.org/?locale=zh_CN)\n2. [MDN Web Docs - Cross-Origin Resource Sharing](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n3. [Flask-CORS Official Documentation](https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN)\n","slug":"CORS","published":1,"updated":"2025-01-19T11:46:34.122Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3en90003uyqggym4831o","content":"<h1 id=\"跨域资源共享（CORS）技术指南\"><a href=\"#跨域资源共享（CORS）技术指南\" class=\"headerlink\" title=\"跨域资源共享（CORS）技术指南\"></a>跨域资源共享（CORS）技术指南</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#技术背景\">技术背景</a></li>\n<li><a href=\"#配置方案\">配置方案</a></li>\n<li><a href=\"#最佳实践\">最佳实践</a></li>\n<li><a href=\"#问题排查\">问题排查</a></li>\n<li><a href=\"#参考文献\">参考文献</a></li>\n</ol>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。</p>\n<h2 id=\"技术背景\"><a href=\"#技术背景\" class=\"headerlink\" title=\"技术背景\"></a>技术背景</h2><h3 id=\"同源策略基础\"><a href=\"#同源策略基础\" class=\"headerlink\" title=\"同源策略基础\"></a>同源策略基础</h3><p>同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">基准URL：http://example.com/page.html<br><br>跨域场景：<br>- http://api.example.com/data     // 子域名差异<br>- https://example.com/data        // 协议差异<br>- http://example.com:8080/data    // 端口差异<br></code></pre></td></tr></table></figure>\n<h2 id=\"配置方案\"><a href=\"#配置方案\" class=\"headerlink\" title=\"配置方案\"></a>配置方案</h2><h3 id=\"环境变量驱动的CORS配置\"><a href=\"#环境变量驱动的CORS配置\" class=\"headerlink\" title=\"环境变量驱动的CORS配置\"></a>环境变量驱动的CORS配置</h3><p>以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask<br><span class=\"hljs-keyword\">from</span> flask_cors <span class=\"hljs-keyword\">import</span> CORS<br><br>app = Flask(__name__)<br><br><span class=\"hljs-comment\"># 从环境变量获取前端URL，如果没有设置则使用默认值</span><br>FRONTEND_URL = os.environ.get(<span class=\"hljs-string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"hljs-string\">&#x27;http://localhost:3000&#x27;</span>)<br><br><span class=\"hljs-comment\"># CORS配置实现</span><br>CORS(app, resources=&#123;<br>    <span class=\"hljs-string\">r&quot;/api/*&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;origins&quot;</span>: FRONTEND_URL,<br>        <span class=\"hljs-string\">&quot;methods&quot;</span>: [<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>],<br>        <span class=\"hljs-string\">&quot;allow_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;Authorization&quot;</span>, <span class=\"hljs-string\">&quot;X-Requested-With&quot;</span>],<br>        <span class=\"hljs-string\">&quot;supports_credentials&quot;</span>: <span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-string\">&quot;expose_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Disposition&quot;</span>]<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><p>让我们逐行分析这个配置：</p>\n<ol>\n<li><strong>环境变量设置</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">FRONTEND_URL = os.environ.get(<span class=\"hljs-string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"hljs-string\">&#x27;http://localhost:3000&#x27;</span>)<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>使用<code>os.environ.get()</code>获取环境变量</li>\n<li>提供默认值<code>&#39;http://localhost:3000&#39;</code>作为本地开发环境的配置</li>\n<li>可以通过环境变量轻松切换不同环境的配置</li>\n</ul>\n<ol>\n<li><strong>CORS配置参数</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;origins&quot;</span>: FRONTEND_URL<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>动态设置允许的源，基于环境变量</li>\n<li>避免了硬编码的问题</li>\n<li>支持不同部署环境的灵活配置</li>\n</ul>\n<ol>\n<li><strong>HTTP方法配置</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;methods&quot;</span>: [<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>明确定义允许的HTTP方法</li>\n<li>包含了RESTful API所需的全部方法</li>\n<li><code>OPTIONS</code>用于预检请求（preflight request）</li>\n</ul>\n<ol>\n<li><strong>请求头配置</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;allow_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;Authorization&quot;</span>, <span class=\"hljs-string\">&quot;X-Requested-With&quot;</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>Content-Type</code>：允许设置请求的内容类型</li>\n<li><code>Authorization</code>：支持身份验证令牌</li>\n<li><code>X-Requested-With</code>：用于标识AJAX请求</li>\n</ul>\n<ol>\n<li><strong>凭证支持</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;supports_credentials&quot;</span>: <span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>允许跨域请求携带凭证（如Cookie）</li>\n<li>对需要身份验证的API至关重要</li>\n</ul>\n<ol>\n<li><strong>响应头暴露</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;expose_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Disposition&quot;</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>允许客户端访问<code>Content-Disposition</code>响应头</li>\n<li>通常用于文件下载功能</li>\n</ul>\n<h3 id=\"环境变量配置示例\"><a href=\"#环境变量配置示例\" class=\"headerlink\" title=\"环境变量配置示例\"></a>环境变量配置示例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 开发环境</span><br><span class=\"hljs-built_in\">export</span> FRONTEND_URL=http://localhost:3000<br><br><span class=\"hljs-comment\"># 测试环境</span><br><span class=\"hljs-built_in\">export</span> FRONTEND_URL=http://test.example.com<br><br><span class=\"hljs-comment\"># 生产环境</span><br><span class=\"hljs-built_in\">export</span> FRONTEND_URL=https://www.example.com<br></code></pre></td></tr></table></figure>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"环境变量管理建议\"><a href=\"#环境变量管理建议\" class=\"headerlink\" title=\"环境变量管理建议\"></a>环境变量管理建议</h3><ol>\n<li><strong>开发环境</strong></li>\n</ol>\n<ul>\n<li>使用<code>.env</code>文件管理本地开发环境变量</li>\n<li>将<code>.env</code>文件加入<code>.gitignore</code></li>\n</ul>\n<ol>\n<li><strong>生产环境</strong></li>\n</ol>\n<ul>\n<li>使用容器化部署时通过环境变量注入</li>\n<li>使用配置管理系统统一管理环境变量</li>\n</ul>\n<h3 id=\"安全性考虑\"><a href=\"#安全性考虑\" class=\"headerlink\" title=\"安全性考虑\"></a>安全性考虑</h3><ol>\n<li><p><strong>避免过于宽松的配置</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 不推荐</span><br><span class=\"hljs-string\">&quot;origins&quot;</span>: <span class=\"hljs-string\">&quot;*&quot;</span>  <br><br><span class=\"hljs-comment\"># 推荐</span><br><span class=\"hljs-string\">&quot;origins&quot;</span>: FRONTEND_URL<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>合理设置凭证策略</strong></p>\n</li>\n</ol>\n<ul>\n<li>仅在必要时启用<code>supports_credentials</code></li>\n<li>确保前端配置匹配（<code>credentials: &#39;include&#39;</code>）</li>\n</ul>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><h3 id=\"常见错误及解决方案\"><a href=\"#常见错误及解决方案\" class=\"headerlink\" title=\"常见错误及解决方案\"></a>常见错误及解决方案</h3><ol>\n<li><strong>CORS策略违规</strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Access to XMLHttpRequest at &#x27;http://api.example.com&#x27; from origin &#x27;http://example.com&#x27; <br>has been blocked by CORS policy<br></code></pre></td></tr></table></figure>\n解决方案：</li>\n</ol>\n<ul>\n<li>检查环境变量是否正确设置</li>\n<li>验证前端请求URL与配置是否匹配</li>\n<li>确认所有必要的请求头都已配置</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://fetch.spec.whatwg.org/?locale=zh_CN\">W3C CORS Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">MDN Web Docs - Cross-Origin Resource Sharing</a></li>\n<li><a href=\"https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN\">Flask-CORS Official Documentation</a></li>\n</ol>\n","more":"<h1 id=\"跨域资源共享（CORS）技术指南\"><a href=\"#跨域资源共享（CORS）技术指南\" class=\"headerlink\" title=\"跨域资源共享（CORS）技术指南\"></a>跨域资源共享（CORS）技术指南</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#技术背景\">技术背景</a></li>\n<li><a href=\"#配置方案\">配置方案</a></li>\n<li><a href=\"#最佳实践\">最佳实践</a></li>\n<li><a href=\"#问题排查\">问题排查</a></li>\n<li><a href=\"#参考文献\">参考文献</a></li>\n</ol>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>跨域资源共享（Cross-Origin Resource Sharing, CORS）是现代Web应用程序中的重要安全机制。本文档旨在提供全面的CORS配置指南，涵盖从开发环境到生产部署的完整实施方案。</p>\n<h2 id=\"技术背景\"><a href=\"#技术背景\" class=\"headerlink\" title=\"技术背景\"></a>技术背景</h2><h3 id=\"同源策略基础\"><a href=\"#同源策略基础\" class=\"headerlink\" title=\"同源策略基础\"></a>同源策略基础</h3><p>同源策略是Web应用安全的基石，要求协议（Protocol）、域名（Domain）和端口（Port）三者均相同。以下为不同场景的示例分析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">基准URL：http://example.com/page.html<br><br>跨域场景：<br>- http://api.example.com/data     // 子域名差异<br>- https://example.com/data        // 协议差异<br>- http://example.com:8080/data    // 端口差异<br></code></pre></td></tr></table></figure>\n<h2 id=\"配置方案\"><a href=\"#配置方案\" class=\"headerlink\" title=\"配置方案\"></a>配置方案</h2><h3 id=\"环境变量驱动的CORS配置\"><a href=\"#环境变量驱动的CORS配置\" class=\"headerlink\" title=\"环境变量驱动的CORS配置\"></a>环境变量驱动的CORS配置</h3><p>以下是一个完整的、基于环境变量的CORS配置示例。这种方案具有良好的灵活性和可维护性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask<br><span class=\"hljs-keyword\">from</span> flask_cors <span class=\"hljs-keyword\">import</span> CORS<br><br>app = Flask(__name__)<br><br><span class=\"hljs-comment\"># 从环境变量获取前端URL，如果没有设置则使用默认值</span><br>FRONTEND_URL = os.environ.get(<span class=\"hljs-string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"hljs-string\">&#x27;http://localhost:3000&#x27;</span>)<br><br><span class=\"hljs-comment\"># CORS配置实现</span><br>CORS(app, resources=&#123;<br>    <span class=\"hljs-string\">r&quot;/api/*&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;origins&quot;</span>: FRONTEND_URL,<br>        <span class=\"hljs-string\">&quot;methods&quot;</span>: [<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>],<br>        <span class=\"hljs-string\">&quot;allow_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;Authorization&quot;</span>, <span class=\"hljs-string\">&quot;X-Requested-With&quot;</span>],<br>        <span class=\"hljs-string\">&quot;supports_credentials&quot;</span>: <span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-string\">&quot;expose_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Disposition&quot;</span>]<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><p>让我们逐行分析这个配置：</p>\n<ol>\n<li><strong>环境变量设置</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">FRONTEND_URL = os.environ.get(<span class=\"hljs-string\">&#x27;FRONTEND_URL&#x27;</span>, <span class=\"hljs-string\">&#x27;http://localhost:3000&#x27;</span>)<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>使用<code>os.environ.get()</code>获取环境变量</li>\n<li>提供默认值<code>&#39;http://localhost:3000&#39;</code>作为本地开发环境的配置</li>\n<li>可以通过环境变量轻松切换不同环境的配置</li>\n</ul>\n<ol>\n<li><strong>CORS配置参数</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;origins&quot;</span>: FRONTEND_URL<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>动态设置允许的源，基于环境变量</li>\n<li>避免了硬编码的问题</li>\n<li>支持不同部署环境的灵活配置</li>\n</ul>\n<ol>\n<li><strong>HTTP方法配置</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;methods&quot;</span>: [<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>明确定义允许的HTTP方法</li>\n<li>包含了RESTful API所需的全部方法</li>\n<li><code>OPTIONS</code>用于预检请求（preflight request）</li>\n</ul>\n<ol>\n<li><strong>请求头配置</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;allow_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;Authorization&quot;</span>, <span class=\"hljs-string\">&quot;X-Requested-With&quot;</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><code>Content-Type</code>：允许设置请求的内容类型</li>\n<li><code>Authorization</code>：支持身份验证令牌</li>\n<li><code>X-Requested-With</code>：用于标识AJAX请求</li>\n</ul>\n<ol>\n<li><strong>凭证支持</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;supports_credentials&quot;</span>: <span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>允许跨域请求携带凭证（如Cookie）</li>\n<li>对需要身份验证的API至关重要</li>\n</ul>\n<ol>\n<li><strong>响应头暴露</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;expose_headers&quot;</span>: [<span class=\"hljs-string\">&quot;Content-Disposition&quot;</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>允许客户端访问<code>Content-Disposition</code>响应头</li>\n<li>通常用于文件下载功能</li>\n</ul>\n<h3 id=\"环境变量配置示例\"><a href=\"#环境变量配置示例\" class=\"headerlink\" title=\"环境变量配置示例\"></a>环境变量配置示例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 开发环境</span><br><span class=\"hljs-built_in\">export</span> FRONTEND_URL=http://localhost:3000<br><br><span class=\"hljs-comment\"># 测试环境</span><br><span class=\"hljs-built_in\">export</span> FRONTEND_URL=http://test.example.com<br><br><span class=\"hljs-comment\"># 生产环境</span><br><span class=\"hljs-built_in\">export</span> FRONTEND_URL=https://www.example.com<br></code></pre></td></tr></table></figure>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"环境变量管理建议\"><a href=\"#环境变量管理建议\" class=\"headerlink\" title=\"环境变量管理建议\"></a>环境变量管理建议</h3><ol>\n<li><strong>开发环境</strong></li>\n</ol>\n<ul>\n<li>使用<code>.env</code>文件管理本地开发环境变量</li>\n<li>将<code>.env</code>文件加入<code>.gitignore</code></li>\n</ul>\n<ol>\n<li><strong>生产环境</strong></li>\n</ol>\n<ul>\n<li>使用容器化部署时通过环境变量注入</li>\n<li>使用配置管理系统统一管理环境变量</li>\n</ul>\n<h3 id=\"安全性考虑\"><a href=\"#安全性考虑\" class=\"headerlink\" title=\"安全性考虑\"></a>安全性考虑</h3><ol>\n<li><p><strong>避免过于宽松的配置</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 不推荐</span><br><span class=\"hljs-string\">&quot;origins&quot;</span>: <span class=\"hljs-string\">&quot;*&quot;</span>  <br><br><span class=\"hljs-comment\"># 推荐</span><br><span class=\"hljs-string\">&quot;origins&quot;</span>: FRONTEND_URL<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>合理设置凭证策略</strong></p>\n</li>\n</ol>\n<ul>\n<li>仅在必要时启用<code>supports_credentials</code></li>\n<li>确保前端配置匹配（<code>credentials: &#39;include&#39;</code>）</li>\n</ul>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><h3 id=\"常见错误及解决方案\"><a href=\"#常见错误及解决方案\" class=\"headerlink\" title=\"常见错误及解决方案\"></a>常见错误及解决方案</h3><ol>\n<li><strong>CORS策略违规</strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Access to XMLHttpRequest at &#x27;http://api.example.com&#x27; from origin &#x27;http://example.com&#x27; <br>has been blocked by CORS policy<br></code></pre></td></tr></table></figure>\n解决方案：</li>\n</ol>\n<ul>\n<li>检查环境变量是否正确设置</li>\n<li>验证前端请求URL与配置是否匹配</li>\n<li>确认所有必要的请求头都已配置</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://fetch.spec.whatwg.org/?locale=zh_CN\">W3C CORS Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">MDN Web Docs - Cross-Origin Resource Sharing</a></li>\n<li><a href=\"https://flask-cors.readthedocs.io/en/latest/?locale=zh_CN\">Flask-CORS Official Documentation</a></li>\n</ol>\n"},{"title":"Re0!","date":"2025-01-18T09:05:18.000Z","excerpt":"好好看!","hide":false,"archive":true,"_content":"\n\n为了寻找合适的封面，用一天半从零开始刷了Re0新编集的13话+ OVA1 + 16集的sp\n\n真是辛苦自己了😳（）\n\n<img src = \"/img/2025-01-18-17-06-50.png\" width = \"30%\" class = \"smallImg\">\n\n<br>\n刚出宅邸篇的时候看得是真坐牢😥——感觉486真是自信过头、又完全没有脑袋, 真是太弱了.\n于是本打算转而去玩铲铲, 但是恰好遇到铲铲要更新😬, ~~勉为其难~~再看几话吧.\n\n终于到了白鲸篇, 看着486从一次次的死亡打击中逐渐崩溃:\n![](/img/2025-01-18-17-13-45.png)\n> ~~这不是熬夜熬多了的我吗~~\n\n\n到最后与雷姆的“私奔”对话中完成心态的转变:\n![](/img/re0-2025-01-18-17-16-53.png)\n也是为男主的 **增强** 感到十分的欣慰.😌\n![](/img/2025-01-18-17-11-36.png)\n\n<p style = \"\n    font-size: 0.9em;  \n    color: grey;\n    text-align : center;\n\">\n当然 不是这种增强🤭 \n</p>\n\n<hr>\n<p style = \" font-size : 1.3em; text-align: center;\">\n但是我的雷姆呢!🤬😐 感觉都没有动力追第二季了🙃\n</p>\n\n![](/img/re0-2025-01-18-17-40-27.png)\n\n<style>\n.post-content img:not(.smallImg){\n    width: 70%;\n    height: auto;\n    display: block;\n    margin: 1rem auto;\n}\n</style>","source":"_posts/Re0.md","raw":"---\ntitle: Re0!\ndate: 2025-01-18 17:05:18\ntags:\n- 追番\ncategories: 生活碎碎念\nexcerpt: 好好看!\nhide: false\narchive: true\n---\n\n\n为了寻找合适的封面，用一天半从零开始刷了Re0新编集的13话+ OVA1 + 16集的sp\n\n真是辛苦自己了😳（）\n\n<img src = \"/img/2025-01-18-17-06-50.png\" width = \"30%\" class = \"smallImg\">\n\n<br>\n刚出宅邸篇的时候看得是真坐牢😥——感觉486真是自信过头、又完全没有脑袋, 真是太弱了.\n于是本打算转而去玩铲铲, 但是恰好遇到铲铲要更新😬, ~~勉为其难~~再看几话吧.\n\n终于到了白鲸篇, 看着486从一次次的死亡打击中逐渐崩溃:\n![](/img/2025-01-18-17-13-45.png)\n> ~~这不是熬夜熬多了的我吗~~\n\n\n到最后与雷姆的“私奔”对话中完成心态的转变:\n![](/img/re0-2025-01-18-17-16-53.png)\n也是为男主的 **增强** 感到十分的欣慰.😌\n![](/img/2025-01-18-17-11-36.png)\n\n<p style = \"\n    font-size: 0.9em;  \n    color: grey;\n    text-align : center;\n\">\n当然 不是这种增强🤭 \n</p>\n\n<hr>\n<p style = \" font-size : 1.3em; text-align: center;\">\n但是我的雷姆呢!🤬😐 感觉都没有动力追第二季了🙃\n</p>\n\n![](/img/re0-2025-01-18-17-40-27.png)\n\n<style>\n.post-content img:not(.smallImg){\n    width: 70%;\n    height: auto;\n    display: block;\n    margin: 1rem auto;\n}\n</style>","slug":"Re0","published":1,"updated":"2025-01-19T11:46:34.123Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enc0005uyqg6lzh8sde","content":"<p>为了寻找合适的封面，用一天半从零开始刷了Re0新编集的13话+ OVA1 + 16集的sp</p>\n<p>真是辛苦自己了😳（）</p>\n<p><img src = \"/img/2025-01-18-17-06-50.png\" width = \"30%\" class = \"smallImg\"></p>\n<p><br><br>刚出宅邸篇的时候看得是真坐牢😥——感觉486真是自信过头、又完全没有脑袋, 真是太弱了.<br>于是本打算转而去玩铲铲, 但是恰好遇到铲铲要更新😬, <del>勉为其难</del>再看几话吧.</p>\n<p>终于到了白鲸篇, 看着486从一次次的死亡打击中逐渐崩溃:<br><img src=\"/img/2025-01-18-17-13-45.png\" alt=\"\"></p>\n<blockquote>\n<p><del>这不是熬夜熬多了的我吗</del></p>\n</blockquote>\n<p>到最后与雷姆的“私奔”对话中完成心态的转变:<br><img src=\"/img/re0-2025-01-18-17-16-53.png\" alt=\"\"><br>也是为男主的 <strong>增强</strong> 感到十分的欣慰.😌<br><img src=\"/img/2025-01-18-17-11-36.png\" alt=\"\"></p>\n<p style = \"\n    font-size: 0.9em;  \n    color: grey;\n    text-align : center;\n\">\n当然 不是这种增强🤭 \n</p>\n\n<p><hr></p>\n<p style = \" font-size : 1.3em; text-align: center;\">\n但是我的雷姆呢!🤬😐 感觉都没有动力追第二季了🙃\n</p>\n\n<p><img src=\"/img/re0-2025-01-18-17-40-27.png\" alt=\"\"></p>\n<style>\n.post-content img:not(.smallImg){\n    width: 70%;\n    height: auto;\n    display: block;\n    margin: 1rem auto;\n}\n</style>","more":"<p>为了寻找合适的封面，用一天半从零开始刷了Re0新编集的13话+ OVA1 + 16集的sp</p>\n<p>真是辛苦自己了😳（）</p>\n<p><img src = \"/img/2025-01-18-17-06-50.png\" width = \"30%\" class = \"smallImg\"></p>\n<p><br><br>刚出宅邸篇的时候看得是真坐牢😥——感觉486真是自信过头、又完全没有脑袋, 真是太弱了.<br>于是本打算转而去玩铲铲, 但是恰好遇到铲铲要更新😬, <del>勉为其难</del>再看几话吧.</p>\n<p>终于到了白鲸篇, 看着486从一次次的死亡打击中逐渐崩溃:<br><img src=\"/img/2025-01-18-17-13-45.png\" alt=\"\"></p>\n<blockquote>\n<p><del>这不是熬夜熬多了的我吗</del></p>\n</blockquote>\n<p>到最后与雷姆的“私奔”对话中完成心态的转变:<br><img src=\"/img/re0-2025-01-18-17-16-53.png\" alt=\"\"><br>也是为男主的 <strong>增强</strong> 感到十分的欣慰.😌<br><img src=\"/img/2025-01-18-17-11-36.png\" alt=\"\"></p>\n<p style = \"\n    font-size: 0.9em;  \n    color: grey;\n    text-align : center;\n\">\n当然 不是这种增强🤭 \n</p>\n\n<p><hr></p>\n<p style = \" font-size : 1.3em; text-align: center;\">\n但是我的雷姆呢!🤬😐 感觉都没有动力追第二季了🙃\n</p>\n\n<p><img src=\"/img/re0-2025-01-18-17-40-27.png\" alt=\"\"></p>\n<style>\n.post-content img:not(.smallImg){\n    width: 70%;\n    height: auto;\n    display: block;\n    margin: 1rem auto;\n}\n</style>"},{"title":"SSH隧道","date":"2025-01-17T05:53:33.000Z","excerpt":"让服务器能够共享本地代理, 在服务器自身没有设置代理的情况下是一个简便可行的好方法.","index_img":"/img/照镜子.jpg","_content":" \n# 通过 SSH 隧道实现远程服务器使用本地代理\n\n在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。\n\n## 背景\n\n通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。\n\n## 原理解释\n\nSSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。\n\n```\n[远程服务器] <--- SSH隧道 ---> [本地电脑] <--- 代理 ---> [互联网]\n```\n\n## 具体步骤\n\n### 1. 前提条件\n- 本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）\n- 能够通过 SSH 连接到远程服务器\n- 确保本地代理软件正常工作\n\n### 2. 建立 SSH 隧道\n在本地电脑的终端中执行：\n\n```bash\nssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP\n```\n\n参数说明：\n- `-R 7890:127.0.0.1:7890`：将远程服务器的 7890 端口转发到本地的 7890 端口\n- `-o ServerAliveInterval=60`：每 60 秒发送一次心跳包\n- `-o ServerAliveCountMax=3`：最多允许丢失 3 次心跳包\n\n<br>\n\n然后根据提示输入服务器用户的密码:\n![](/img/2025-01-18-11-45-41.png)\n### 3. 配置服务器代理\n在服务器终端中执行：\n\n```bash\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n```\n\n### 4. 验证代理是否生效\n在服务器上执行：\n\n```bash\ncurl -v https://github.com\n```\n\n如果能够正常访问，说明代理配置成功。\n\n## 持久化配置\n\n如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：\n\n```bash\n# 编辑 ~/.bashrc 或 ~/.zshrc\necho 'export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890' >> ~/.bashrc\n\n# 重新加载配置\nsource ~/.bashrc\n```\n\n## 注意事项\n\n1. **安全性考虑**：SSH 隧道是加密的，相对安全\n2. **连接维护**：保持 SSH 连接不断开，否则代理会失效\n3. **带宽限制**：代理流量会经过你的本地电脑，注意带宽占用\n4. **临时使用**：这种方法适合临时使用，长期使用建议直接在服务器上配置代理\n\n## 常见问题排查\n\n1. **隧道无法建立**\n   - 检查本地代理是否正常运行\n   - 确认端口号是否正确\n   - 检查服务器防火墙设置\n\n2. **代理失效**\n   - SSH 连接是否断开\n   - 本地代理软件是否正常运行\n   - 环境变量是否正确设置\n\n### Clash设置\n在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:\n以mac的ClashX Pro为例, 在`更多设置`中\n![](/img/2025-01-17-14-00-36.png)\n\n## 结论\n\n通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。\n","source":"_posts/SSH隧道.md","raw":"---\ntitle: SSH隧道\ndate: 2025-01-17 13:53:33\ntags:\n- ssh\n- 服务器\ncategories: 通用技能\nexcerpt: 让服务器能够共享本地代理, 在服务器自身没有设置代理的情况下是一个简便可行的好方法.\nindex_img: /img/照镜子.jpg\n--- \n# 通过 SSH 隧道实现远程服务器使用本地代理\n\n在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。\n\n## 背景\n\n通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。\n\n## 原理解释\n\nSSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。\n\n```\n[远程服务器] <--- SSH隧道 ---> [本地电脑] <--- 代理 ---> [互联网]\n```\n\n## 具体步骤\n\n### 1. 前提条件\n- 本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）\n- 能够通过 SSH 连接到远程服务器\n- 确保本地代理软件正常工作\n\n### 2. 建立 SSH 隧道\n在本地电脑的终端中执行：\n\n```bash\nssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP\n```\n\n参数说明：\n- `-R 7890:127.0.0.1:7890`：将远程服务器的 7890 端口转发到本地的 7890 端口\n- `-o ServerAliveInterval=60`：每 60 秒发送一次心跳包\n- `-o ServerAliveCountMax=3`：最多允许丢失 3 次心跳包\n\n<br>\n\n然后根据提示输入服务器用户的密码:\n![](/img/2025-01-18-11-45-41.png)\n### 3. 配置服务器代理\n在服务器终端中执行：\n\n```bash\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n```\n\n### 4. 验证代理是否生效\n在服务器上执行：\n\n```bash\ncurl -v https://github.com\n```\n\n如果能够正常访问，说明代理配置成功。\n\n## 持久化配置\n\n如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：\n\n```bash\n# 编辑 ~/.bashrc 或 ~/.zshrc\necho 'export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890' >> ~/.bashrc\n\n# 重新加载配置\nsource ~/.bashrc\n```\n\n## 注意事项\n\n1. **安全性考虑**：SSH 隧道是加密的，相对安全\n2. **连接维护**：保持 SSH 连接不断开，否则代理会失效\n3. **带宽限制**：代理流量会经过你的本地电脑，注意带宽占用\n4. **临时使用**：这种方法适合临时使用，长期使用建议直接在服务器上配置代理\n\n## 常见问题排查\n\n1. **隧道无法建立**\n   - 检查本地代理是否正常运行\n   - 确认端口号是否正确\n   - 检查服务器防火墙设置\n\n2. **代理失效**\n   - SSH 连接是否断开\n   - 本地代理软件是否正常运行\n   - 环境变量是否正确设置\n\n### Clash设置\n在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:\n以mac的ClashX Pro为例, 在`更多设置`中\n![](/img/2025-01-17-14-00-36.png)\n\n## 结论\n\n通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。\n","slug":"SSH隧道","published":1,"updated":"2025-01-19T11:46:34.124Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3ene0008uyqg4dw22x18","content":"<h1 id=\"通过-SSH-隧道实现远程服务器使用本地代理\"><a href=\"#通过-SSH-隧道实现远程服务器使用本地代理\" class=\"headerlink\" title=\"通过 SSH 隧道实现远程服务器使用本地代理\"></a>通过 SSH 隧道实现远程服务器使用本地代理</h1><p>在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。</p>\n<h2 id=\"原理解释\"><a href=\"#原理解释\" class=\"headerlink\" title=\"原理解释\"></a>原理解释</h2><p>SSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs brainfuck\"><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">远程服务器</span><span class=\"hljs-title\">]</span> &lt;<span class=\"hljs-literal\">---</span> <span class=\"hljs-comment\">SSH隧道</span> <span class=\"hljs-literal\">---</span>&gt; <span class=\"hljs-title\">[</span><span class=\"hljs-comment\">本地电脑</span><span class=\"hljs-title\">]</span> &lt;<span class=\"hljs-literal\">---</span> <span class=\"hljs-comment\">代理</span> <span class=\"hljs-literal\">---</span>&gt; <span class=\"hljs-title\">[</span><span class=\"hljs-comment\">互联网</span><span class=\"hljs-title\">]</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1. 前提条件\"></a>1. 前提条件</h3><ul>\n<li>本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）</li>\n<li>能够通过 SSH 连接到远程服务器</li>\n<li>确保本地代理软件正常工作</li>\n</ul>\n<h3 id=\"2-建立-SSH-隧道\"><a href=\"#2-建立-SSH-隧道\" class=\"headerlink\" title=\"2. 建立 SSH 隧道\"></a>2. 建立 SSH 隧道</h3><p>在本地电脑的终端中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP<br></code></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><code>-R 7890:127.0.0.1:7890</code>：将远程服务器的 7890 端口转发到本地的 7890 端口</li>\n<li><code>-o ServerAliveInterval=60</code>：每 60 秒发送一次心跳包</li>\n<li><code>-o ServerAliveCountMax=3</code>：最多允许丢失 3 次心跳包</li>\n</ul>\n<p><br></p>\n<p>然后根据提示输入服务器用户的密码:<br><img src=\"/img/2025-01-18-11-45-41.png\" alt=\"\"></p>\n<h3 id=\"3-配置服务器代理\"><a href=\"#3-配置服务器代理\" class=\"headerlink\" title=\"3. 配置服务器代理\"></a>3. 配置服务器代理</h3><p>在服务器终端中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-验证代理是否生效\"><a href=\"#4-验证代理是否生效\" class=\"headerlink\" title=\"4. 验证代理是否生效\"></a>4. 验证代理是否生效</h3><p>在服务器上执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -v https://github.com<br></code></pre></td></tr></table></figure>\n<p>如果能够正常访问，说明代理配置成功。</p>\n<h2 id=\"持久化配置\"><a href=\"#持久化配置\" class=\"headerlink\" title=\"持久化配置\"></a>持久化配置</h2><p>如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 编辑 ~/.bashrc 或 ~/.zshrc</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&#x27;</span> &gt;&gt; ~/.bashrc<br><br><span class=\"hljs-comment\"># 重新加载配置</span><br><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><strong>安全性考虑</strong>：SSH 隧道是加密的，相对安全</li>\n<li><strong>连接维护</strong>：保持 SSH 连接不断开，否则代理会失效</li>\n<li><strong>带宽限制</strong>：代理流量会经过你的本地电脑，注意带宽占用</li>\n<li><strong>临时使用</strong>：这种方法适合临时使用，长期使用建议直接在服务器上配置代理</li>\n</ol>\n<h2 id=\"常见问题排查\"><a href=\"#常见问题排查\" class=\"headerlink\" title=\"常见问题排查\"></a>常见问题排查</h2><ol>\n<li><p><strong>隧道无法建立</strong></p>\n<ul>\n<li>检查本地代理是否正常运行</li>\n<li>确认端口号是否正确</li>\n<li>检查服务器防火墙设置</li>\n</ul>\n</li>\n<li><p><strong>代理失效</strong></p>\n<ul>\n<li>SSH 连接是否断开</li>\n<li>本地代理软件是否正常运行</li>\n<li>环境变量是否正确设置</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Clash设置\"><a href=\"#Clash设置\" class=\"headerlink\" title=\"Clash设置\"></a>Clash设置</h3><p>在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:<br>以mac的ClashX Pro为例, 在<code>更多设置</code>中<br><img src=\"/img/2025-01-17-14-00-36.png\" alt=\"\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。</p>\n","more":"<h1 id=\"通过-SSH-隧道实现远程服务器使用本地代理\"><a href=\"#通过-SSH-隧道实现远程服务器使用本地代理\" class=\"headerlink\" title=\"通过 SSH 隧道实现远程服务器使用本地代理\"></a>通过 SSH 隧道实现远程服务器使用本地代理</h1><p>在进行服务器运维时，经常会遇到需要代理来访问某些资源的情况。本文将介绍如何通过 SSH 隧道，让远程服务器共享使用本地电脑的代理，实现优雅的科学上网解决方案。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>通常我们在本地电脑上都配置了代理软件（如 Clash），但远程服务器往往没有代理。如何让远程服务器也能使用上我们本地的代理呢？这就需要用到 SSH 的端口转发功能。</p>\n<h2 id=\"原理解释\"><a href=\"#原理解释\" class=\"headerlink\" title=\"原理解释\"></a>原理解释</h2><p>SSH 隧道技术允许我们将本地端口转发到远程服务器。通过建立一个加密的通道，远程服务器可以通过这个通道访问本地电脑的代理服务。</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs brainfuck\"><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">远程服务器</span><span class=\"hljs-title\">]</span> &lt;<span class=\"hljs-literal\">---</span> <span class=\"hljs-comment\">SSH隧道</span> <span class=\"hljs-literal\">---</span>&gt; <span class=\"hljs-title\">[</span><span class=\"hljs-comment\">本地电脑</span><span class=\"hljs-title\">]</span> &lt;<span class=\"hljs-literal\">---</span> <span class=\"hljs-comment\">代理</span> <span class=\"hljs-literal\">---</span>&gt; <span class=\"hljs-title\">[</span><span class=\"hljs-comment\">互联网</span><span class=\"hljs-title\">]</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1. 前提条件\"></a>1. 前提条件</h3><ul>\n<li>本地电脑已安装并运行代理软件（如 Clash，默认端口 7890）</li>\n<li>能够通过 SSH 连接到远程服务器</li>\n<li>确保本地代理软件正常工作</li>\n</ul>\n<h3 id=\"2-建立-SSH-隧道\"><a href=\"#2-建立-SSH-隧道\" class=\"headerlink\" title=\"2. 建立 SSH 隧道\"></a>2. 建立 SSH 隧道</h3><p>在本地电脑的终端中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ssh -R 7890:127.0.0.1:7890 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 用户名@服务器IP<br></code></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li><code>-R 7890:127.0.0.1:7890</code>：将远程服务器的 7890 端口转发到本地的 7890 端口</li>\n<li><code>-o ServerAliveInterval=60</code>：每 60 秒发送一次心跳包</li>\n<li><code>-o ServerAliveCountMax=3</code>：最多允许丢失 3 次心跳包</li>\n</ul>\n<p><br></p>\n<p>然后根据提示输入服务器用户的密码:<br><img src=\"/img/2025-01-18-11-45-41.png\" alt=\"\"></p>\n<h3 id=\"3-配置服务器代理\"><a href=\"#3-配置服务器代理\" class=\"headerlink\" title=\"3. 配置服务器代理\"></a>3. 配置服务器代理</h3><p>在服务器终端中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-验证代理是否生效\"><a href=\"#4-验证代理是否生效\" class=\"headerlink\" title=\"4. 验证代理是否生效\"></a>4. 验证代理是否生效</h3><p>在服务器上执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -v https://github.com<br></code></pre></td></tr></table></figure>\n<p>如果能够正常访问，说明代理配置成功。</p>\n<h2 id=\"持久化配置\"><a href=\"#持久化配置\" class=\"headerlink\" title=\"持久化配置\"></a>持久化配置</h2><p>如果想让代理设置持久生效，可以将代理配置命令添加到 Shell 的配置文件中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 编辑 ~/.bashrc 或 ~/.zshrc</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&#x27;</span> &gt;&gt; ~/.bashrc<br><br><span class=\"hljs-comment\"># 重新加载配置</span><br><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><strong>安全性考虑</strong>：SSH 隧道是加密的，相对安全</li>\n<li><strong>连接维护</strong>：保持 SSH 连接不断开，否则代理会失效</li>\n<li><strong>带宽限制</strong>：代理流量会经过你的本地电脑，注意带宽占用</li>\n<li><strong>临时使用</strong>：这种方法适合临时使用，长期使用建议直接在服务器上配置代理</li>\n</ol>\n<h2 id=\"常见问题排查\"><a href=\"#常见问题排查\" class=\"headerlink\" title=\"常见问题排查\"></a>常见问题排查</h2><ol>\n<li><p><strong>隧道无法建立</strong></p>\n<ul>\n<li>检查本地代理是否正常运行</li>\n<li>确认端口号是否正确</li>\n<li>检查服务器防火墙设置</li>\n</ul>\n</li>\n<li><p><strong>代理失效</strong></p>\n<ul>\n<li>SSH 连接是否断开</li>\n<li>本地代理软件是否正常运行</li>\n<li>环境变量是否正确设置</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Clash设置\"><a href=\"#Clash设置\" class=\"headerlink\" title=\"Clash设置\"></a>Clash设置</h3><p>在默认的代理设置基础上进行了如下修改, 但是不确保这是正常访问的必须操作:<br>以mac的ClashX Pro为例, 在<code>更多设置</code>中<br><img src=\"/img/2025-01-17-14-00-36.png\" alt=\"\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过 SSH 隧道共享本地代理是一个简单而优雅的解决方案，特别适合临时需要代理访问的场景。它不需要在服务器上安装额外的软件，配置简单，安全可靠。</p>\n"},{"title":"Tmux","date":"2025-01-17T07:56:29.000Z","excerpt":"在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~","index_img":"/img/不死鸟.jpg","_content":">在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~\n<img src = \"/img/不死鸟.jpg\" width = \"70%\">\n\n# Tmux 入门指南：多会话终端管理利器\n## 什么是 Tmux？\n\nTmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。\n## 为什么需要 Tmux？\n\n在以下场景中，tmux 特别有用：\n\n1. **远程服务器管理**\n   - SSH 连接意外断开时，tmux 会话仍然保持运行\n   - 可以随时重新连接到之前的工作环境\n\n2. **多任务管理**\n   - 在同一个终端窗口中同时运行多个程序\n   - 方便地在不同任务之间切换\n\n3. **结对编程**\n   - 多人可以同时连接到同一个 tmux 会话\n   - 实时查看和协作编辑\n\n## 基本概念\n\ntmux 采用三层架构：\n\n- **会话（Session）**：最顶层的概念，包含多个窗口\n- **窗口（Window）**：类似于浏览器的标签页\n- **窗格（Pane）**：窗口内的分割区域\n\n## 常用操作指南\n\n### 1. 安装\n\n不同系统的安装命令：\n\n```bash\n# MacOS\nbrew install tmux\n\n# Ubuntu/Debian\nsudo apt install tmux\n\n# CentOS/RHEL\nsudo yum install tmux\n```\n\n### 2. 会话管理\n\n#### 启动新会话\n```bash\n# 创建默认会话\ntmux\n\n# 创建命名会话\ntmux new -s session_name\n```\n\n#### 会话操作\n```bash\n# 断开当前会话\nCtrl+b d\n\n# 列出所有会话\ntmux ls\n\n# 连接到指定会话\ntmux attach -t session_name\n\n# 关闭指定会话\ntmux kill-session -t session_name\n```\n\n### 3. 窗口管理\n\n所有命令都需要先按前缀键 `Ctrl+b`：\n\n- `c`: 创建新窗口\n- `&`: 关闭当前窗口\n- `p`: 切换到上一个窗口\n- `n`: 切换到下一个窗口\n- `数字键`: 切换到指定编号的窗口\n\n### 4. 窗格操作\n\n同样需要先按前缀键 `Ctrl+b`：\n\n- `%`: 垂直分割窗格\n- `\"`: 水平分割窗格\n- `方向键`: 在窗格之间移动\n- `x`: 关闭当前窗格\n- `z`: 最大化/还原当前窗格\n\n## 进阶技巧\n\n### 1. 自定义配置\n\n创建 `~/.tmux.conf` 文件来自定义 tmux 配置：\n\n```bash\n# 修改前缀键为 Ctrl+a\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\n\n# 开启鼠标支持\nset -g mouse on\n\n# 设置窗口编号从 1 开始\nset -g base-index 1\n```\n\n### 2. 复制模式\n\n1. 按 `Ctrl+b [` 进入复制模式\n2. 使用方向键移动光标\n3. 按 `Space` 开始选择\n4. 按 `Enter` 复制选中内容\n5. 按 `Ctrl+b ]` 粘贴\n\n## 最佳实践\n\n1. **使用有意义的会话名**：便于识别和管理\n2. **合理使用窗格**：避免过度分割\n3. **保持配置文件的整洁**：注释清晰，逻辑分明\n4. **定期保存重要会话**：使用插件或脚本自动保存\n\n## 常见问题解决\n\n1. **无法创建会话**\n   - 检查 tmux 是否正确安装\n   - 确认用户权限\n\n2. **快捷键不响应**\n   - 确认是否正确按下前缀键\n   - 检查配置文件是否有冲突\n\n3. **会话丢失**\n   - 使用 `tmux ls` 检查会话状态\n   - 查看系统日志寻找错误信息\n\n## 结语\n\ntmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。\n\n## 参考资源\n\n- [Tmux 官方文档](https://github.com/tmux/tmux/wiki)\n- [Tmux 速查表](https://tmuxcheatsheet.com/)\n- [Awesome Tmux](https://github.com/rothgar/awesome-tmux)","source":"_posts/Tmux.md","raw":"---\ntitle: Tmux\ndate: 2025-01-17 15:56:29\ntags:\n- 服务器\n- 多会话管理\ncategories: 通用技能\nexcerpt: 在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~\nindex_img: /img/不死鸟.jpg\n---\n>在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~\n<img src = \"/img/不死鸟.jpg\" width = \"70%\">\n\n# Tmux 入门指南：多会话终端管理利器\n## 什么是 Tmux？\n\nTmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。\n## 为什么需要 Tmux？\n\n在以下场景中，tmux 特别有用：\n\n1. **远程服务器管理**\n   - SSH 连接意外断开时，tmux 会话仍然保持运行\n   - 可以随时重新连接到之前的工作环境\n\n2. **多任务管理**\n   - 在同一个终端窗口中同时运行多个程序\n   - 方便地在不同任务之间切换\n\n3. **结对编程**\n   - 多人可以同时连接到同一个 tmux 会话\n   - 实时查看和协作编辑\n\n## 基本概念\n\ntmux 采用三层架构：\n\n- **会话（Session）**：最顶层的概念，包含多个窗口\n- **窗口（Window）**：类似于浏览器的标签页\n- **窗格（Pane）**：窗口内的分割区域\n\n## 常用操作指南\n\n### 1. 安装\n\n不同系统的安装命令：\n\n```bash\n# MacOS\nbrew install tmux\n\n# Ubuntu/Debian\nsudo apt install tmux\n\n# CentOS/RHEL\nsudo yum install tmux\n```\n\n### 2. 会话管理\n\n#### 启动新会话\n```bash\n# 创建默认会话\ntmux\n\n# 创建命名会话\ntmux new -s session_name\n```\n\n#### 会话操作\n```bash\n# 断开当前会话\nCtrl+b d\n\n# 列出所有会话\ntmux ls\n\n# 连接到指定会话\ntmux attach -t session_name\n\n# 关闭指定会话\ntmux kill-session -t session_name\n```\n\n### 3. 窗口管理\n\n所有命令都需要先按前缀键 `Ctrl+b`：\n\n- `c`: 创建新窗口\n- `&`: 关闭当前窗口\n- `p`: 切换到上一个窗口\n- `n`: 切换到下一个窗口\n- `数字键`: 切换到指定编号的窗口\n\n### 4. 窗格操作\n\n同样需要先按前缀键 `Ctrl+b`：\n\n- `%`: 垂直分割窗格\n- `\"`: 水平分割窗格\n- `方向键`: 在窗格之间移动\n- `x`: 关闭当前窗格\n- `z`: 最大化/还原当前窗格\n\n## 进阶技巧\n\n### 1. 自定义配置\n\n创建 `~/.tmux.conf` 文件来自定义 tmux 配置：\n\n```bash\n# 修改前缀键为 Ctrl+a\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\n\n# 开启鼠标支持\nset -g mouse on\n\n# 设置窗口编号从 1 开始\nset -g base-index 1\n```\n\n### 2. 复制模式\n\n1. 按 `Ctrl+b [` 进入复制模式\n2. 使用方向键移动光标\n3. 按 `Space` 开始选择\n4. 按 `Enter` 复制选中内容\n5. 按 `Ctrl+b ]` 粘贴\n\n## 最佳实践\n\n1. **使用有意义的会话名**：便于识别和管理\n2. **合理使用窗格**：避免过度分割\n3. **保持配置文件的整洁**：注释清晰，逻辑分明\n4. **定期保存重要会话**：使用插件或脚本自动保存\n\n## 常见问题解决\n\n1. **无法创建会话**\n   - 检查 tmux 是否正确安装\n   - 确认用户权限\n\n2. **快捷键不响应**\n   - 确认是否正确按下前缀键\n   - 检查配置文件是否有冲突\n\n3. **会话丢失**\n   - 使用 `tmux ls` 检查会话状态\n   - 查看系统日志寻找错误信息\n\n## 结语\n\ntmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。\n\n## 参考资源\n\n- [Tmux 官方文档](https://github.com/tmux/tmux/wiki)\n- [Tmux 速查表](https://tmuxcheatsheet.com/)\n- [Awesome Tmux](https://github.com/rothgar/awesome-tmux)","slug":"Tmux","published":1,"updated":"2025-01-19T11:46:34.124Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3ene0009uyqgdp49bs99","content":"<blockquote>\n<p>在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~<br><img src = \"/img/不死鸟.jpg\" width = \"70%\"></p>\n</blockquote>\n<h1 id=\"Tmux-入门指南：多会话终端管理利器\"><a href=\"#Tmux-入门指南：多会话终端管理利器\" class=\"headerlink\" title=\"Tmux 入门指南：多会话终端管理利器\"></a>Tmux 入门指南：多会话终端管理利器</h1><h2 id=\"什么是-Tmux？\"><a href=\"#什么是-Tmux？\" class=\"headerlink\" title=\"什么是 Tmux？\"></a>什么是 Tmux？</h2><p>Tmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。</p>\n<h2 id=\"为什么需要-Tmux？\"><a href=\"#为什么需要-Tmux？\" class=\"headerlink\" title=\"为什么需要 Tmux？\"></a>为什么需要 Tmux？</h2><p>在以下场景中，tmux 特别有用：</p>\n<ol>\n<li><p><strong>远程服务器管理</strong></p>\n<ul>\n<li>SSH 连接意外断开时，tmux 会话仍然保持运行</li>\n<li>可以随时重新连接到之前的工作环境</li>\n</ul>\n</li>\n<li><p><strong>多任务管理</strong></p>\n<ul>\n<li>在同一个终端窗口中同时运行多个程序</li>\n<li>方便地在不同任务之间切换</li>\n</ul>\n</li>\n<li><p><strong>结对编程</strong></p>\n<ul>\n<li>多人可以同时连接到同一个 tmux 会话</li>\n<li>实时查看和协作编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>tmux 采用三层架构：</p>\n<ul>\n<li><strong>会话（Session）</strong>：最顶层的概念，包含多个窗口</li>\n<li><strong>窗口（Window）</strong>：类似于浏览器的标签页</li>\n<li><strong>窗格（Pane）</strong>：窗口内的分割区域</li>\n</ul>\n<h2 id=\"常用操作指南\"><a href=\"#常用操作指南\" class=\"headerlink\" title=\"常用操作指南\"></a>常用操作指南</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>不同系统的安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># MacOS</span><br>brew install tmux<br><br><span class=\"hljs-comment\"># Ubuntu/Debian</span><br><span class=\"hljs-built_in\">sudo</span> apt install tmux<br><br><span class=\"hljs-comment\"># CentOS/RHEL</span><br><span class=\"hljs-built_in\">sudo</span> yum install tmux<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-会话管理\"><a href=\"#2-会话管理\" class=\"headerlink\" title=\"2. 会话管理\"></a>2. 会话管理</h3><h4 id=\"启动新会话\"><a href=\"#启动新会话\" class=\"headerlink\" title=\"启动新会话\"></a>启动新会话</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 创建默认会话</span><br>tmux<br><br><span class=\"hljs-comment\"># 创建命名会话</span><br>tmux new -s session_name<br></code></pre></td></tr></table></figure>\n<h4 id=\"会话操作\"><a href=\"#会话操作\" class=\"headerlink\" title=\"会话操作\"></a>会话操作</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 断开当前会话</span><br>Ctrl+b d<br><br><span class=\"hljs-comment\"># 列出所有会话</span><br>tmux <span class=\"hljs-built_in\">ls</span><br><br><span class=\"hljs-comment\"># 连接到指定会话</span><br>tmux attach -t session_name<br><br><span class=\"hljs-comment\"># 关闭指定会话</span><br>tmux kill-session -t session_name<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-窗口管理\"><a href=\"#3-窗口管理\" class=\"headerlink\" title=\"3. 窗口管理\"></a>3. 窗口管理</h3><p>所有命令都需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>c</code>: 创建新窗口</li>\n<li><code>&amp;</code>: 关闭当前窗口</li>\n<li><code>p</code>: 切换到上一个窗口</li>\n<li><code>n</code>: 切换到下一个窗口</li>\n<li><code>数字键</code>: 切换到指定编号的窗口</li>\n</ul>\n<h3 id=\"4-窗格操作\"><a href=\"#4-窗格操作\" class=\"headerlink\" title=\"4. 窗格操作\"></a>4. 窗格操作</h3><p>同样需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>%</code>: 垂直分割窗格</li>\n<li><code>&quot;</code>: 水平分割窗格</li>\n<li><code>方向键</code>: 在窗格之间移动</li>\n<li><code>x</code>: 关闭当前窗格</li>\n<li><code>z</code>: 最大化/还原当前窗格</li>\n</ul>\n<h2 id=\"进阶技巧\"><a href=\"#进阶技巧\" class=\"headerlink\" title=\"进阶技巧\"></a>进阶技巧</h2><h3 id=\"1-自定义配置\"><a href=\"#1-自定义配置\" class=\"headerlink\" title=\"1. 自定义配置\"></a>1. 自定义配置</h3><p>创建 <code>~/.tmux.conf</code> 文件来自定义 tmux 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 修改前缀键为 Ctrl+a</span><br><span class=\"hljs-built_in\">set</span> -g prefix C-a<br>unbind C-b<br><span class=\"hljs-built_in\">bind</span> C-a send-prefix<br><br><span class=\"hljs-comment\"># 开启鼠标支持</span><br><span class=\"hljs-built_in\">set</span> -g mouse on<br><br><span class=\"hljs-comment\"># 设置窗口编号从 1 开始</span><br><span class=\"hljs-built_in\">set</span> -g base-index 1<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-复制模式\"><a href=\"#2-复制模式\" class=\"headerlink\" title=\"2. 复制模式\"></a>2. 复制模式</h3><ol>\n<li>按 <code>Ctrl+b [</code> 进入复制模式</li>\n<li>使用方向键移动光标</li>\n<li>按 <code>Space</code> 开始选择</li>\n<li>按 <code>Enter</code> 复制选中内容</li>\n<li>按 <code>Ctrl+b ]</code> 粘贴</li>\n</ol>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ol>\n<li><strong>使用有意义的会话名</strong>：便于识别和管理</li>\n<li><strong>合理使用窗格</strong>：避免过度分割</li>\n<li><strong>保持配置文件的整洁</strong>：注释清晰，逻辑分明</li>\n<li><strong>定期保存重要会话</strong>：使用插件或脚本自动保存</li>\n</ol>\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><ol>\n<li><p><strong>无法创建会话</strong></p>\n<ul>\n<li>检查 tmux 是否正确安装</li>\n<li>确认用户权限</li>\n</ul>\n</li>\n<li><p><strong>快捷键不响应</strong></p>\n<ul>\n<li>确认是否正确按下前缀键</li>\n<li>检查配置文件是否有冲突</li>\n</ul>\n</li>\n<li><p><strong>会话丢失</strong></p>\n<ul>\n<li>使用 <code>tmux ls</code> 检查会话状态</li>\n<li>查看系统日志寻找错误信息</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>tmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。</p>\n<h2 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h2><ul>\n<li><a href=\"https://github.com/tmux/tmux/wiki\">Tmux 官方文档</a></li>\n<li><a href=\"https://tmuxcheatsheet.com/\">Tmux 速查表</a></li>\n<li><a href=\"https://github.com/rothgar/awesome-tmux\">Awesome Tmux</a></li>\n</ul>\n","more":"<blockquote>\n<p>在利用SSH连接远端服务器并需要长期运行程序?  使用Tmux赋予进程以「不死鸟的加护」—— 退出终端窗口后依旧在后台运行~<br><img src = \"/img/不死鸟.jpg\" width = \"70%\"></p>\n</blockquote>\n<h1 id=\"Tmux-入门指南：多会话终端管理利器\"><a href=\"#Tmux-入门指南：多会话终端管理利器\" class=\"headerlink\" title=\"Tmux 入门指南：多会话终端管理利器\"></a>Tmux 入门指南：多会话终端管理利器</h1><h2 id=\"什么是-Tmux？\"><a href=\"#什么是-Tmux？\" class=\"headerlink\" title=\"什么是 Tmux？\"></a>什么是 Tmux？</h2><p>Tmux（Terminal Multiplexer）是一个终端复用器，它允许用户在单个终端窗口中运行和管理多个终端会话。作为一个强大的命令行工具，tmux 特别适合需要长时间运行程序或需要同时管理多个终端窗口的场景。</p>\n<h2 id=\"为什么需要-Tmux？\"><a href=\"#为什么需要-Tmux？\" class=\"headerlink\" title=\"为什么需要 Tmux？\"></a>为什么需要 Tmux？</h2><p>在以下场景中，tmux 特别有用：</p>\n<ol>\n<li><p><strong>远程服务器管理</strong></p>\n<ul>\n<li>SSH 连接意外断开时，tmux 会话仍然保持运行</li>\n<li>可以随时重新连接到之前的工作环境</li>\n</ul>\n</li>\n<li><p><strong>多任务管理</strong></p>\n<ul>\n<li>在同一个终端窗口中同时运行多个程序</li>\n<li>方便地在不同任务之间切换</li>\n</ul>\n</li>\n<li><p><strong>结对编程</strong></p>\n<ul>\n<li>多人可以同时连接到同一个 tmux 会话</li>\n<li>实时查看和协作编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>tmux 采用三层架构：</p>\n<ul>\n<li><strong>会话（Session）</strong>：最顶层的概念，包含多个窗口</li>\n<li><strong>窗口（Window）</strong>：类似于浏览器的标签页</li>\n<li><strong>窗格（Pane）</strong>：窗口内的分割区域</li>\n</ul>\n<h2 id=\"常用操作指南\"><a href=\"#常用操作指南\" class=\"headerlink\" title=\"常用操作指南\"></a>常用操作指南</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>不同系统的安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># MacOS</span><br>brew install tmux<br><br><span class=\"hljs-comment\"># Ubuntu/Debian</span><br><span class=\"hljs-built_in\">sudo</span> apt install tmux<br><br><span class=\"hljs-comment\"># CentOS/RHEL</span><br><span class=\"hljs-built_in\">sudo</span> yum install tmux<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-会话管理\"><a href=\"#2-会话管理\" class=\"headerlink\" title=\"2. 会话管理\"></a>2. 会话管理</h3><h4 id=\"启动新会话\"><a href=\"#启动新会话\" class=\"headerlink\" title=\"启动新会话\"></a>启动新会话</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 创建默认会话</span><br>tmux<br><br><span class=\"hljs-comment\"># 创建命名会话</span><br>tmux new -s session_name<br></code></pre></td></tr></table></figure>\n<h4 id=\"会话操作\"><a href=\"#会话操作\" class=\"headerlink\" title=\"会话操作\"></a>会话操作</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 断开当前会话</span><br>Ctrl+b d<br><br><span class=\"hljs-comment\"># 列出所有会话</span><br>tmux <span class=\"hljs-built_in\">ls</span><br><br><span class=\"hljs-comment\"># 连接到指定会话</span><br>tmux attach -t session_name<br><br><span class=\"hljs-comment\"># 关闭指定会话</span><br>tmux kill-session -t session_name<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-窗口管理\"><a href=\"#3-窗口管理\" class=\"headerlink\" title=\"3. 窗口管理\"></a>3. 窗口管理</h3><p>所有命令都需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>c</code>: 创建新窗口</li>\n<li><code>&amp;</code>: 关闭当前窗口</li>\n<li><code>p</code>: 切换到上一个窗口</li>\n<li><code>n</code>: 切换到下一个窗口</li>\n<li><code>数字键</code>: 切换到指定编号的窗口</li>\n</ul>\n<h3 id=\"4-窗格操作\"><a href=\"#4-窗格操作\" class=\"headerlink\" title=\"4. 窗格操作\"></a>4. 窗格操作</h3><p>同样需要先按前缀键 <code>Ctrl+b</code>：</p>\n<ul>\n<li><code>%</code>: 垂直分割窗格</li>\n<li><code>&quot;</code>: 水平分割窗格</li>\n<li><code>方向键</code>: 在窗格之间移动</li>\n<li><code>x</code>: 关闭当前窗格</li>\n<li><code>z</code>: 最大化/还原当前窗格</li>\n</ul>\n<h2 id=\"进阶技巧\"><a href=\"#进阶技巧\" class=\"headerlink\" title=\"进阶技巧\"></a>进阶技巧</h2><h3 id=\"1-自定义配置\"><a href=\"#1-自定义配置\" class=\"headerlink\" title=\"1. 自定义配置\"></a>1. 自定义配置</h3><p>创建 <code>~/.tmux.conf</code> 文件来自定义 tmux 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 修改前缀键为 Ctrl+a</span><br><span class=\"hljs-built_in\">set</span> -g prefix C-a<br>unbind C-b<br><span class=\"hljs-built_in\">bind</span> C-a send-prefix<br><br><span class=\"hljs-comment\"># 开启鼠标支持</span><br><span class=\"hljs-built_in\">set</span> -g mouse on<br><br><span class=\"hljs-comment\"># 设置窗口编号从 1 开始</span><br><span class=\"hljs-built_in\">set</span> -g base-index 1<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-复制模式\"><a href=\"#2-复制模式\" class=\"headerlink\" title=\"2. 复制模式\"></a>2. 复制模式</h3><ol>\n<li>按 <code>Ctrl+b [</code> 进入复制模式</li>\n<li>使用方向键移动光标</li>\n<li>按 <code>Space</code> 开始选择</li>\n<li>按 <code>Enter</code> 复制选中内容</li>\n<li>按 <code>Ctrl+b ]</code> 粘贴</li>\n</ol>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ol>\n<li><strong>使用有意义的会话名</strong>：便于识别和管理</li>\n<li><strong>合理使用窗格</strong>：避免过度分割</li>\n<li><strong>保持配置文件的整洁</strong>：注释清晰，逻辑分明</li>\n<li><strong>定期保存重要会话</strong>：使用插件或脚本自动保存</li>\n</ol>\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><ol>\n<li><p><strong>无法创建会话</strong></p>\n<ul>\n<li>检查 tmux 是否正确安装</li>\n<li>确认用户权限</li>\n</ul>\n</li>\n<li><p><strong>快捷键不响应</strong></p>\n<ul>\n<li>确认是否正确按下前缀键</li>\n<li>检查配置文件是否有冲突</li>\n</ul>\n</li>\n<li><p><strong>会话丢失</strong></p>\n<ul>\n<li>使用 <code>tmux ls</code> 检查会话状态</li>\n<li>查看系统日志寻找错误信息</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>tmux 是一个强大的终端管理工具，掌握它可以显著提高命令行工作效率。从基本的会话管理到高级的自定义配置，tmux 都提供了灵活而强大的功能。随着使用经验的积累，你会发现它是开发工作中不可或缺的工具之一。</p>\n<h2 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h2><ul>\n<li><a href=\"https://github.com/tmux/tmux/wiki\">Tmux 官方文档</a></li>\n<li><a href=\"https://tmuxcheatsheet.com/\">Tmux 速查表</a></li>\n<li><a href=\"https://github.com/rothgar/awesome-tmux\">Awesome Tmux</a></li>\n</ul>\n"},{"title":"JavaScript","date":"2025-01-09T06:06:30.000Z","excerpt":"一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「料理的加护」下, 尽可能将JS处理得更加可口一些)","math":true,"index_img":"/img/料理的加护.jpg","_content":"> JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「**料理的加护**」下, 尽可能将JS处理得更加**可口**一些)\n<img src=\"/img/料理的加护.jpg\" width = \"35%\">\n\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n<br>\n\n事件处理函数的默认接受值是`event`:\n```html\n<button>\nonclick\n</button>\n\n<p>\nnothing here\n</p>\n\n<script>\nbtn = document.querySelector(\"button\")\npara = document.querySelector(\"p\")\n\nbtn.onclick = click;\n\nfunction click(string){\n  console.log(\"clicked!\")\n  para.textContent = string;\n}\n</script>\n```\n1. 上述的`btn`在点击之后调用函数`click`, 该函数需要一个参数`string`, 由于`btn.onclick = click;`的绑定方式, 我们无法指定传参的值, 因此点击之后的`para`的内容显示为: `[object PointerEvent]`;\n2. `textContent`是属性而非方法, 因此采用赋值实现;\n\n\n```js\nbtn.onclick = function click(string) {\n  console.log(\"clicked!\")\n  para.textContent = \"You have clicked the button!\";\n}\n```\n> 将上述的绑定方式如此改写, 可以在`btn`外对`string`进行赋值, 然后点击按钮可以传入指定参数供后续处理.\n\n\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n## 数据类型\n### 数字和操作符\n大部分与C语言相同, 概括需要注意的差异:\n- JS当中只有一种数字类型 -- `number`, 对于整型或者浮点数的初始化得到的量, 由`typeof`均得到`number`;\n- 算术运算符: 求幂为`**`;\n- 常量无法使用自增或自减,~~好像也是C语言的 忘了~~\n- `===`表示严格等于, `!==`表示不等于;\n> 同时存在`==`和`!=`来判断是否相等, 但是它们只是测试 **值** 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用`===`和`!==`来避免类型不一致的错误.\n\n### 字符串\n创建字符串\n```js\nlet myString = \"A string\";\nconst constString = myString;\nconsole.log(constString);\n//A string\n``` \n可以使用单引号,双引号和**反引号**来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:\n```js\nconst single = '单引号';\nconst double = \"双引号\";\nconst backtick = `反引号`;\n```\n\n反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:\n- 可以嵌入 **JavaScript**;\n- 可以声明**多行**的模板字面量.\n\n#### 字符串的拼接\n字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:\n```js\nconst name = \"克里斯\";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // \"你好，克里斯\"\n```\n> 在模板字面量中用`${}`包装JS的变量或者表达式.\n\n\n```js\nconst one = \"你好，\";\nconst two = \"请问最近如何？\";\nconst joined = `${one}${two}`;\nconsole.log(joined); // \"你好，请问最近如何？\"\n```\n> 连接2个变量.\n\n```js\nconst song = \"青花瓷\";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"\n```\n> 在模板字面量的`${}`内部包含表达式.\n\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n```js\nconst greeting = \"你好\";\nconst name = \"克里斯\";\nconsole.log(greeting + \"，\" + name); // \"你好，克里斯\"\n```\n\n#### 多行字符串\n模板字符串会**保留**源代码中的换行符，因此可以编写跨越多行的字符串:\n```js\nconst newline = `终于有一天，\n你知道了必须做的事情，而且开始……`;\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n如果希望用普通的字符串得到等效的输出, 必须在字符串中包含`\\n`,而非直接跨行:\n```js\nconst newline = \"终于有一天，\\n你知道了必须做的事情，而且开始……\";\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n#### 显示引号\n1. $\\underline{转义}$  通过在符号前加上反斜杠`\\`, 可以转义字符串中的特殊字符,包括字符串中的引号:\n```js\nconst bigmouth = 'I\\'ve got no right to take my place…';\n```\n2. 换用其他字符: 在字面量内用不同于包裹字符串的引号:\n```js\nconst goodQuotes1 = 'She said \"I think so!\"';\nconst goodQuotes2 = `She said \"I'm not going in there!\"`;\n```\n\n\n#### 常用方法\n对于字符串对象实例,其常用的方法:\n- `.length`: 获取字符串的长度;\n- `[]`: 返回字符串中对应索引的字符, 索引同样从`0`开始;\n- `.indexOf(\"\")`: 查找子字符串\n  - **input**: 希望查找的子字符串;\n  - **output**: 子字符串开始的下标(如果不存在则返回`-1`);\n- `.slice(indedxStart, indexEnd)`: 截取字符串\n  - **input**: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;\n  - **output**: 截取的子字符串;\n\n更多的`slice`知识:\n1. $\\underline{标准化负值}$ 如果索引是个负数, 取`index+str.length`进行标准化;\n2. 如果`indexStart`大于`str.length`, 返回空字符串;\n3. 如果标准化负值之后, `indexStart`大于`indexEnd`, 也返回空字符串;\n \n- `.toLowerCase()` & `.toUpperCase()`: 转换字符串中的所有字符为小写或大写;\n- `.replace(original, new)`: 替换字符串中`original`子字符串为`new`;\n> 此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.\n\n#### Cases\n利用 **indexOf** 和 **slice** 方法, 获取新字符串:\n- **input**: `\"str3\"`三位长字符串+`\"...\"`(无关字符串)+`\";\"`+`strLast`(剩余字符串);\n- **output**: `\"str3\"+\";\"+strLast`\n\n```js\nvar stations = ['MAN675847583748sjt567654;Manchester Piccadilly',\n                'GNF576746573fhdg4737dh4;Greenfield',\n                'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',\n                'SYB4f65hf75f736463;Stalybridge',\n                'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];\n\nfor(var i = 0; i < stations.length; i++){\n    var input = stations[i];\n    var str3 = input.slice(0,3);\n    var strLast = input.slice(input.indexOf(\";\")+1); //indexOf获取;位置\n    var output = str3 + \";\" + strLast;\n}\n```\n\n---\n\n通过 **indexOf** 根据子字符串筛选字符串数组:\n- **input**: 可能包含 *Christmas* 的字符串数组;\n- **output**: 包含 *Christmas* 的字符串数组;\n\n```js\nvar list = document.querySelector('.output ul');\nlist.innerHTML = '';\nvar greetings = ['Happy Birthday!',\n                 'Merry Christmas my love',\n                 'A happy Christmas to all the family',\n                 'You\\'re all I want for Christmas',\n                 'Get well soon'];\n\nfor(var i = 0; i < greetings.length; i++) {\n  var input = greetings[i];\n  if(greetings[i].indexOf('Christmas') !== -1) {\n    var result = input;\n    var listItem = document.createElement('li');\n    listItem.textContent = result;\n    list.appendChild(listItem);\n  }\n}\n```\n\n### 数字与字符串\n#### 相互转换\n非常神奇, 在JS当中, 数字和字符串可以直接通过函数`Number()`和`String()`进行转换, 与C语言不同.\n```js\nconst myString = \"123\";\nconst myNum = Number(myString);\nconsole.log(typeof myNum);\n// number\nconsole.log(myNum);\n// 123\n```\n\n```js\nconst myNum2 = 123;\nconst myString2 = String(myNum2);\nconsole.log(typeof myString2);\n// string\nconsole.log(myString2);\n// \"123\"\n```\n> 对于浮点数同样成立.\n\n#### 前后拼接\n使用`+`将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:\n```js\nconst name = \"Front \";\nconst number = 242;\nconst combine = name + number;\n\nconsole.log(combine); //Front 242\n\nconsole.log(typeof(combine));  //string\n```\n\n### 数组\n1. 存储任意类型元素--字符串，数字，对象，变量，**另一个数组**;\n2. 可以 **混合** 元素类型:\n```js\nlet random = [\"tree\", 795, [0, 1, 2]];\n```\n3. 像访问字符串一样, 利用索引访问数组元素;\n4. $\\underline{多维数组}$ 包含数组的数组结构称为~\n\n#### split()\n- 作用: 将一个字符串根据给定的字符分隔为字符串数组;\n```js\nlet myData = \"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\";\nlet myArray = myData.split(\",\");\nconsole.log(myArray);\n // [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]\n```\n\n#### join()\n`split`的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:\n```js\nlet myNewString = myArray.join(\",\");\nmyNewString;\n```\n\n#### toString()\n与`join`方法相似, 但是无法自定义分隔符, 默认为`,`:\n```js\nlet dogNames = [\"Rocket\", \"Flash\", \"Bella\", \"Slugger\"];\ndogNames.toString(); //Rocket,Flash,Bella,Slugger\n```\n\n#### push & pop\n`push()`方法可以将1或多个元素添加到数组的 **末尾**:\n1. 将会直接改写原来的数组,不需要重新赋值;\n2. 该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);\n```js\nlet myArray = [1, 2, 3];\nlet newLength = myArray.push(4, 5,\"string\");\nconsole.log(myArray); // [1, 2, 3, 4, 5, \"string\"]\nconsole.log(newLength); // 6\n```\n\n使用`.pop()`从数组中删除最后一个元素:\n```js\nmyArray.pop(); //\"string\"\nconsole.log(myArray); // [1, 2, 3, 4, 5]\n```\n1. 方法调用返回值就是删除的元素本身;\n2. 直接对原始数组操作并赋值, 不需要另外的赋值操作;\n\n> shift & unshift:\n> 在功能上分别与`push`和`pop`相同, 但是作用于数组的开始位置.\n\n## 条件语句\nJS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:\n### 天气预报\n```html\n<label for=\"weather\">选择今天的天气：</label\n><select id=\"weather\">\n  <option value=\"\">--作出选择--</option>\n  <option value=\"sunny\">晴天</option>\n  <option value=\"rainy\">雨天</option>\n  <option value=\"snowing\">雪天</option>\n  <option value=\"overcast\">阴天</option>\n</select>\n\n<p></p>\n```\n> `lable`当中的`for`标签与`select`标签的`id`属性对应, 用于关联两个标签.\n\n```js\nconst select = document.querySelector(\"select\");\nconst para = document.querySelector(\"p\");\n\nselect.addEventListener(\"change\", setWeather);\n\nfunction setWeather() {\n  const choice = select.value;\n\n  switch (choice) {\n    case \"sunny\":\n      para.textContent = \"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\";\n      break;\n    case \"rainy\":\n      para.textContent = \"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\";\n      break;\n    case \"snowing\":\n      para.textContent =\n        \"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\";\n      break;\n    case \"overcast\":\n      para.textContent =\n        \"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\";\n      break;\n    default:\n      para.textContent = \"\";\n  }\n}\n```\n> 1. 通过`querySelector`方法获取`select`和`p`标签;\n> 2. 然后为`select`标签添加事件监听器, 当内容改变时触发 **change** 事件, 同时调用`setWeather`函数;\n> 3. 进而通过 **switch** 语句处理不同天气的情况, 并设置相应的文字内容;\n> 在线网页示例:[simple-switch](https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html)\n\n\n## 事件介绍\n什么是$\\underline{事件}$? \n- 用户选择、点击或者光标悬停在某一元素;\n- 用户在键盘中按下某个按键;\n- 网页结束加载;\n- ...\n\n$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.\n\n### 处理点击事件\n以点击事件为例, 介绍html与js如何进行事件处理的交互:\n```html\n<button> 改变颜色 </button>\n```\n```js\nconst btn = document.querySelector(\"button\");\n\nfunction random(number){\n  return Math.floor(Math.random()*(number+1));\n  \n}\n\nbtn.addEventListener(\"click\", ()=>{\n  const rndCol = `rgb(${random(255)},${random(255)},${random(255)})`;\n  document.body.style.backgroundColor = rndCol;\n})\n```\n1. `Math.random()`方法生成一个介于[0,1)之间的随机数;\n2. `*(number+1)`之后利用向下取整的方法`Math.floor()`将其转换为整数, 范围为[0,number];\n> 假如输入的number为`4`, 则`random(4)`的结果可能为`0`, `1`, `2`, `3`, `4`中的一个;\n> 假设输入的number为`3.6`, 则输出的结果还是0~4中的整数.\n3. ``rndCol = `rgb(${random(255)},${random(255)},${random(255)})`` 采用的是在$\\underline{模板字符串}$内部使用`${}`调用函数变量的方法.\n\n### addEventListener()\n`adEventListener`方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.\n\n通过`EventTarget.adddEventListener()`的方法, 将指定的监听器注册到对象上, 具体的语法如下:\n```js\naddEventListener(type, listener);\naddEventListener(type, listener, options);\naddEventListener(type, listener, useCapture);\n```\n- `type`: 事件类型, 如`click`, `mouseover`, `mouseout`, `keydown`, `keyup`等;\n- `listener`: 事件处理函数, 该函数将在事件发生时被调用;\n  - 包括 **回调函数** 以及 实现了 **EventListener 接口的对象**;\n- `options`: 可选参数, 用于配置事件监听器的行为;\n> 可以为单个事件添加多个事件监听器.\n#### listener\n\n$\\underline{回调函数}$ 简单来说, ~指的是当某个事件发生时被调用的一段代码.\n- 是一个函数, 但是只有等到特定的事件发生时才会执行.\n\n$\\underline{实现了 EventListener 接口的对象}$ \n- **特点**: 以对象作为listener, 对象中具有名为`handleEvent()`的方法;\n- **作用**: \n  - 将事件处理封装到一个对象当中, 可以更好地组织代码;\n  - 便于在对象中保存更多的状态信息;\n```js\nconst listenerObject = {\n    count: 0,\n    handleEvent(event) {\n        this.count++;\n        console.log(`事件类型是：${event.type}，已触发 ${this.count} 次`);\n    }\n};\n\nconst button = document.querySelector('button');\nbutton.addEventListener('click', listenerObject);\n```\n\n#### options\n一个指定有关 listener 属性的可选参数对象.\n##### Capture\n- 含义:\n  - 一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;\n  - 默认为false, 表示只有在冒泡阶段才触发.\n\n- 区别:\n  - `capture`和`useCapture`实际上指的都是 **监听器是否在捕获阶段触发** 的布尔值.\n> 捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.\n  - 后来DOM的规范更新时引入了`options`参数, 此后`capture`取代了`useCapture`的作用.\n  - 如果`addEventListener`的第三个参数不指定对象, 只有布尔值, 那么默认是在设置`useCapture`\n\n> 可以先查看[事件传播的阶段](#事件传播的阶段)来辅助理解不同的阶段.\n\n##### Once\n- 含义:\n  - 一个布尔值，表示 listener 在添加之后最多只调用一次;\n  - 默认为false, 表示可以多次调用.\n- e.g.\n```js\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n},{once: true});\n```\n> `once`属性被设置为`true`, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.\n\n##### Passive\n- 含义:\n  - 一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();\n\n- 作用:\n  - 明确不会在`listener`中不会调用`preventDefault()`方法, 即不会阻止浏览器的[默认行为](#默认行为);\n  - 此时, 浏览器可以直接渲染默认行为的结果, 无需等待`listener`的执行与默认行为的检查, 从而提高了性能.\n- Notice:\n  - 如果设置`passive`为`true`, 则`listener`当中不可出现`preventDefault()`方法, 否则会报错.\n\ne.g.\n```js\ndocument.addEventListener('wheel',()=>{\n\tevent.preventDefault();\n  console.log(\"scrolling\");\n},{passive: false});\n```\n- `wheel`事件的默认行为是滚动页面;\n- `event.preventDefault();`表示会阻止鼠标滚动带来的页面滚动;\n\n\n```js\ndocument.addEventListener('wheel',()=>{\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> 明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.\n\n```js\ndocument.addEventListener('wheel',()=>{\n  event.preventDefault();\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> `passive`的设置与`listener`内部矛盾, 将会报错.\n\n##### Signal\n用于有条件地移除事件监听器, 具体使用参见[可被移除的监听器](#可被移除的监听器).\n\n### 事件传播的阶段\n1. 捕获阶段 $\\underline{capture\\space phase}$: 事件从根节点开始向目标节点传播;\n> e.g. 点击事件从document开始传播, 经过html,body直到目标元素.\n2. 目标阶段阶段 $\\underline{target\\space phase}$: 事件到达目标元素;\n3. 冒泡阶段 $\\underline{bubble\\space phase}$: 事件从目标元素开始沿着DOM树向上传播.\n\n#### Case\n```html\n<div id=\"parent\">\n  parent\n  <div id=\"child\">child</div>\n</div>\n```\n```js\nconst parent = document.querySelector('#parent');\nconst child = document.querySelector('#child');\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 冒泡阶段');\n});\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n}, { capture: true });\n\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n});\n```\n上述的`child`被包裹在`parent`内部.\n- 当点击`parent`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> 由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;\n\n- 当点击`child`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"子元素 - 目标阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> `child`是整个事件流的目标元素, 所以触发时机介于二者之间.\n\n#### Notice\n1. 如果将`div`换成`button`, 则点击`child`时可能只会显示 **目标** 阶段的输出.\n> 这是因为, 不同浏览器对于`button`元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段\n\n2.  `event.stopPropagation();`加入该~~咒语~~代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:\n```js\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n    event.stopPropagation();\n}, { capture: true });\n```\n> 此时, 点击`parent`时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.\n\n### 可被移除的监听器\n```html\n<table id=\"outside\">\n  <tr>\n    <td id=\"t1\">one</td>\n  </tr>\n  <tr>\n    <td id=\"t2\">two</td>\n  </tr>\n</table>\n```\n```js\n// 为 table 添加可被移除的事件监听器\nconst controller = new AbortController();\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\"click\", modifyText, { signal: controller.signal });\n\n// 改变 t2 内容的函数\nfunction modifyText() {\n  const t2 = document.getElementById(\"t2\");\n  if (t2.firstChild.nodeValue === \"three\") {\n    t2.firstChild.nodeValue = \"two\";\n  } else {\n    t2.firstChild.nodeValue = \"three\";\n    controller.abort(); // 当值变为 \"three\" 后，移除监听器\n  }\n}\n```\n> - `AbortController`是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;\n> - `signal`属性是一个`AbortSignal`对象, 用于控制监听器的移除;\n> - `controller.abort()`方法用于移除监听器;\n> - 当`t2`的内容变为\"three\"时, 移除监听器, 使得`modifyText`函数不再执行. 此后, 点击`t2`不会触发`modifyText`函数.\n\n具体的**构造步骤:**\n1. 创建一个`AbortController`实例: `const controller = new AbortController();`\n2. 在事件监听器内的参数中添加`signal: controller.signal`选项;\n3. 在需要移除监听器的地方调用`controller.abort()`方法;\n\n---\n\n我们也可以直接使用`removeEventListener()`方法来移除事件监听器:\n```js\nremoveEventListener(type, listener);\nremoveEventListener(type, listener, options);\nremoveEventListener(type, listener, useCapture);\n```\n\n\n- Notices:\n  - 如果同一个对象上存在2个事件监听器, 且仅在`useCapture`参数存在差异, 那么需要先后2次调用`removeEventListener()`方法才能完全移除其事件监听器;\n  - 如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;\n  - `type`,`listener`参数必须完全匹配才能移除事件监听器;\n  - 对于`options`参数:\n    - 字段相同: 一定可以移除;\n    - 字段不同: 需要与默认值false匹配才可以移除.\n```js\nelement.addEventListener(\"mousedown\", handleMouseDown, { passive: true });\n\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: true }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: true }); // 失败\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, false); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, true); // 失败\n```\n\n---\n**添加与移除**的结合使用:\n```js\nconst body = document.querySelector(\"body\");\nconst clickTarget = document.getElementById(\"click-target\");\nconst mouseOverTarget = document.getElementById(\"mouse-over-target\");\n\nlet toggle = false;\nfunction makeBackgroundYellow() {\n  body.style.backgroundColor = toggle ? \"white\" : \"yellow\";\n\n  toggle = !toggle;\n}\n\nclickTarget.addEventListener(\"click\", makeBackgroundYellow, false);\n\nmouseOverTarget.addEventListener(\"mouseover\", () => {\n  clickTarget.removeEventListener(\"click\", makeBackgroundYellow, false);\n});\n```\n\n\n### 使用匿名函数\n在上述`html`例子下:\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  const t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用匿名函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  function () {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过匿名函数封装代码, 将参数传入函数`modifyText`, 使得函数可以被调用.\n\n### 使用箭头函数\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  var t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用箭头函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  () => {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过`=>{}`形式的箭头函数简化代码书写.\n\n---\n#### 比较匿名与箭头\n匿名函数与箭头函数在此处的应用基本相同, 但是在`this`的指向上有所不同:\n- 匿名函数与其他普通的JS函数:`this`指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为`undefined`);\n```js\nfunction sayHello() {\n  console.log(this); // 在非严格模式下，this 指向 window\n}\nsayHello();\n```\n\n- 箭头函数的`this`继承自外部作用域, 即调用该方法的对象.\n```js\nconst obj = {\n  name: \"ZJU\",\n  greet: function () {\n    console.log(this.name); // this 指向 obj\n  },\n};\nobj.greet(); // 输出：ZJU\n```\n\n- e.g.\n```js\nconst obj = {\n  name: \"ZJU\",\n  getNameWithAnonymous: function () {\n    return function () {\n      console.log(this.name);\n    };\n  },\n  getNameWithArrow: function () {\n    return () => {\n      console.log(this.name);\n    };\n  },\n};\n\nconst anonymousFn = obj.getNameWithAnonymous();\nanonymousFn(); // 输出：undefined\n\nconst arrowFn = obj.getNameWithArrow();\narrowFn(); // 输出：ZJU\n```\n> 进一步完善.\n\n### 事件对象\n$\\underline{事件对象}$ 在事件处理函数的内部, 以固定指定名称出现的参数, 例如`event`,`e`,`evt`. 它被自动传递给事件处理函数，以提供额外的功能和信息。\n\n`e.target`始终是对 **事件刚刚发生的元素** 的引用\n\n## 表达式和运算符\n### new()\n$\\underline{new}$ 用来创建对象实例的一个关键字. \n- 作用: **调用** 一个 构造函数, 并返回一个由该构造函数创建的对象实例.\n#### 语法\n```js\nnew constructor\nnew constructor()\nnew constructor(arg1)\nnew constructor(arg1, arg2)\nnew constructor(arg1, arg2, /* …, */ argN)\n```\n1. 如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即`new foo` 等价于 `new foo()`;\n2. 构造函数内部的`this`将被绑定到新建的对象实例上;\n\n- e.g. \n```js\nfunction Car(color, brand) {\n  this.color = color;   // 将 color 赋值给新对象\n  this.brand = brand;   // 将 brand 赋值给新对象\n}\n\nconst myCar = new Car(\"red\", \"Toyota\");\n\nconsole.log(myCar.color); // 输出 \"red\"\nconsole.log(myCar.brand); // 输出 \"Toyota\"\n```\n\n使用`new()`的**步骤**:\n 1. 定义构造函数;\n 2. 使用`new()`并传入构造函数的参数;\n 3. 将返回的对象实例赋值给一个变量;\n\n#### 新增属性\n- 为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:\n```js\ncar1.color = \"black\" //为car1新增color属性\n```\n<br>\n\n- 添加共享属性到构造函数中的`prototype`:\n```js\nfunction Car() {}\ncar1 = new Car();\ncar2 = new Car();\n\nconsole.log(car1.color); // undefined\n\nCar.prototype.color = \"原色\";\nconsole.log(car1.color); // '原色'\n\ncar1.color = \"黑色\";\nconsole.log(car1.color); // '黑色'\n\nconsole.log(Object.getPrototypeOf(car1).color); // '原色'\nconsole.log(Object.getPrototypeOf(car2).color); // '原色'\nconsole.log(car1.color); // '黑色'\nconsole.log(car2.color); // '原色'\n```\n> - 此处的构造函数名为`Car`, 因此通过`Car.prototype`可以访问到构造函数的原型对象;\n> - `getPrototypeOf` 表示获取对象的**原型对象**, 因此此处均为最初定义的 **原色**.\n\n#### new.target\n函数通过`new.target`属性可以判断是否通过`new`关键字调用, 即构造.\n- 如果函数是正常调用, 则返回`undefined`;\n- 如果函数是通过`new`调用, 返回被调用的构造函数.\n\n- e.g.\n```js\nfunction Car(color) {\n  if (!new.target) {\n    // 以函数的形式被调用。\n    return `${color}车`;\n  }\n  // 通过 new 被调用。\n  this.color = color;\n}\n\nconst a = Car(\"红\"); // a 是“红车”\nconst b = new Car(\"红\"); // b 是 `Car { color: \"红\" }`\n```\n\n#### 对象类型与实例\n$\\underline{对象类型}$ 通过构造函数可以创建一个对象类型:\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\n$\\underline{对象实例}$ 通过使用`new()`方法, 由对象类型构造一个对象实例:\n```js\nconst myCar = new Car(\"鹰牌\", \"Talon TSi\", 1993);\n```\n\n#### 类与new\n在JS当中, 类 **必须** 通过`new`调用.\n> 可以优先阅读[类相关的知识](#类)\n\n- e.g. \n```js\nclass Animal {\n  //构造函数\n  constructor(name) {\n    this.name = name;\n  }\n  //实例方法\n  greet() {\n    console.log(`你好，我的名字是${this.name}`);\n  }\n}\n```\n对于上述的类, 必须使用如下的调用方式:\n```js\nconst animal = new Animal(\"Dog\"); // 正常\n```\n而下面这样类似于普通函数的调用方式会抛出错误:\n```js\nAnimal(\"Cat\"); // TypeError:  Class constructor Animal cannot be invoked without 'new'\n```\n<br>\n\n在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:\n```js\nanimal.greet(); // 输出 \"你好，我的名字是Dog\"\n```\n\n---\n\n下面给出与普通函数的区别:\n```js\nfunction Car(model) {\n  this.model = model;\n}\n\nconst car = new Car(\"Toyota\"); // 正常\nCar(\"Honda\"); // 不抛出错误，但 this 会指向全局对象.\nconst anotherCar = Car(\"cat\"); //此时全局对象下的model值为 \"cat\", 覆盖了上一行的定义.\n```\n总结:\n- 以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;\n- 如果以new方法构造得到对象实例, 依旧正常.\n\n---\n\n# 补充\n## 默认行为\n$\\underline{默认行为}$ 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.\n\n- 比如存在以下的默认行为:\n  - 滚动事件：触摸屏上滑动手指，页面会滚动;\n  - 拖拽文件到浏览器：浏览器会尝试加载文件;\n  - 点击链接 `(<a href=\"...\">)`：跳转到指定的 URL;\n\n$\\underline{阻止默认行为}$ 使用 `event.preventDefault()` 方法可以阻止事件的默认行为.\n\n- e.g: 阻止链接跳转\n```js\ndocument.querySelector('a').addEventListener('click', function(event) {\n    event.preventDefault(); // 阻止点击链接时的默认行为\n    console.log('链接被点击，但没有跳转');\n});\n```\n\n- 作用:\n  - 通过阻止默认行为, 可以实现自定义逻辑.\n\n## this\n\n- `this`可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;\n- `this` 指向的是**当前函数的调用者**，而不是函数内部定义的变量.\n\n<br>\n\n- e.g.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处的`f`\n\n### 函数上下文中的this\n- `this`参数的值取决于函数**如何**被调用, 而不是函数如何被定义.\n```js\n// 对象可以作为第一个参数传递给 'call' 或 'apply'，\n// 并且 'this' 将被绑定到它。\nconst obj = { a: \"Custom\" };\n\n// 使用 var 声明的变量成为 'globalThis' 的属性。\nvar a = \"Global\";\n\nfunction whatsThis() {\n  return this.a; // 'this' 取决于函数如何被调用\n}\n\nwhatsThis(); // 'Global'; 在非严格模式下，'this' 参数默认为 'globalThis'\nobj.whatsThis = whatsThis;\nobj.whatsThis(); // 'Custom'; 'this' 参数被绑定到 obj\n```\n1. 同样是调用函数`whatsThis()`, 但是`this`参数被绑定到不同的对象上, 导致返回值不同;\n2. 在非严格模式下, `this`参数默认指向`globalThis`, 即全局对象;\n3. 对于典型函数, `this`指向函数访问的对象;\n\n- e.g. \n```js\nconst obj = {\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处`f`作为`obj`对象的方法被调用, 因此普通函数的`this`指向`obj`.\n\n- e.g. 直接调用的普通函数`this`指向全局:\n```js\nconst obj = {\n    a: \"a in the obj\",\n    f: function() {\n        const funcA = function () { return this.a }; // 普通函数，this 由调用方式决定\n        console.log(funcA()); // 访问 this.a\n    }\n};\n\nvar a = \"a in the global\";\nobj.f(); // \"a in the global\"\n```\n> - 此处的`funcA`并没有类似于作为对象的属性调用(`obj.funcA()`), 因此其`this`指向全局作用域(`window`), 输出`undefined`, 而是直接调用的形式, 因此其`this`指向全局作用域.\n\n\n\n\n\n### 对this传值\n使用`call()`以及`apply()`方法可以将`this`绑定到其他对象上.\n#### call()\n- 形式: `func.call(thisArg, arg1, arg2, ...)`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 剩余的参数被绑定到命名参数。\nadd.call(o, 5, 7); // 16\n```\n\n#### apply()\n- 形式: `func.apply(thisArg, [argsArray])`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 第二个参数是一个数组，其成员被绑定到命名参数。\nadd.apply(o, [10, 20]); // 34\n```\n\n#### bind()\n- 形式: `f.bind(someObject)`;\n- **作用**: \n  - 创建一个新的函数(需要重新赋值), 具有与`f`相同的函数体和作用域;\n  - 新函数的`this`被 **永久地** 绑定到`someObject`, 不随调用方式的变化而变化.\n- **限制**: \n  - `bind`无法多次生效. 即对函数f`bind`得到的g, 无法继续用`bind`得到期望的h;\n- e.g. 多次`bind`:\n```js\nfunction f() {\n  return this.a;\n}\n\nconst g = f.bind({ b: \"azerty\" });\nconsole.log(g()); // undefined\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // undefined\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 undefined undefined\n```\n> - 由于`bind`只能对一个原始函数作用, 因此由f得到的g无法继续由`bind`绑定`this`得到期望的h, 此处h的`this`依旧是`{b: \"azerty\"}`, 因此在输出对象`a`时显示`undefined`;\n> - `o.f()`的调用是普通函数的调用, 因此其`this`继承自对象`o`, 输出`37`;\n\n- e.g. 对象\n```js\nfunction f() {\n  return this.a + \" \" + this.c;\n}\n\nconst g = f.bind({ b: \"azerty\" , c:\"ccc\"});\nconsole.log(g()); // \"undefined ccc\"\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // \"undefined ccc\"\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 azerty azerty\n```\n> - `bind`绑定的`this`是永久覆盖, 而非简单叠加;\n> - 由于`bind`绑定的`this`不随者调用方式的变化而变化, 因此即使处于对象`o`当中, `g`,`h`依旧不会输出`o`中的`a`.\n\n### 箭头函数中的this\n\n\n使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。\n\n\n普通函数:\n```js\nconst a = \"a in the global\";\nconst foo = function () {return this.a};\n\nconst obj = {\n a: \"a in the obj\",\n f: foo\n};\n\nconsole.log(obj.f()); // \"a in the obj\"\n```\n\n`call()`、 `apply()`、 `bind()` 无法改变箭头函数的`this`(但是call与apply的其他参数可以正常传递:\n```js\nconst foo = ()=> this.a;\n\nconst obj = {\n a: \"a in the obj\",\n f: foo.bind({a:\"a in the bind\"}) // 显式绑定 this 到 obj, 但是无法生效\n};\n\nconsole.log(obj.f()); // undefined\n\n```\n> 换成普通函数则输出`a in the obj`.\n\n\n- 全局作用域\n```js\nvar a = \"a in the global\";\nconst foo1 = () => this.a;\n\nconst obj = {\n\ta: \"a in the obj\",\n\tf: ()=> a\n};\n\nconsole.log(obj.f());\n```\n\n## 作用域\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n- 块级作用域: 由`let`或`const`声明的变量的作用域.(对于`var`无效);\n\n```js\n{\n  var x = 1;\n}\nconsole.log(x); // 1\n\n{\n  const x = 1;\n}\nconsole.log(x); // undefined\n```\n\nNotices:\n- 对象本身并不会创建作用域, 只是一个键值对的集合;\n- 箭头函数也不会创建自己的作用域, 而是 **继承** 外层作用域中的`this`;\n\n### 变量与作用域\n- `var`在全局作用域中声明时会成为 **全局对象** (`window`或`global`)的属性;\n- `let`和`const`即使在全局作用域中声明, 也不会成为全局对象的属性;\n```js\nvar a = \"1\";\nlet b = \"2\";\n\nwindow.a; // \"1\"\nwindow.b; // undefined\n```\n> 因此, 建议在全局作用域中不要使用`var`声明变量, 而使用`let`或`const`声明变量. 从而避免导致意外的覆盖和冲突.\n\n\n### 函数与作用域\n#### 普通函数\n普通函数和匿名函数的作用域继承自其定义时的作用域.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: function() {\n            return this.a; // 普通函数，this 动态绑定到 insideObj\n        }\n    },\n    f: function() {\n        return this.a; // 普通函数，this 动态绑定到 obj\n    }\n};\n\nconsole.log(obj.f());        // \"a in the obj\"\nconsole.log(obj.insideObj.g()); // undefined，因为 insideObj 中没有 a\n```\n\n#### 箭头函数\ne.g. **箭头函数继承外层作用域**:\n```js\nvar a = \"a in the global\";\n\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: () => this.a\n    },\n    f: () => this.a\n};\n\nconsole.log(obj.f());        // \"a in the global\"\nconsole.log(obj.insideObj.g()); //\"a in the global\"\n```\n由于对象不会创建作用域, 因此此处的箭头函数的`this`继承了外层作用域(window)的`this`, 且`var`创建的变量存在于全局作用域中.\n\n## 语法糖\n$\\underline{语法糖}$ 一种让代码更简洁、更易读的语法形式.\n- 本质上没有增加语言的功能, 而是对已有功能的 **包装** 或者优化;\n- **可读性提升**: ~~让代码更填~~ 使得代码更加容易理解和书写;\n- **底层实现**: 实质上依旧用基础的语法实现.\n\n### 类\n类 `class` 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承`prototype`的封装.\n\n使用`class`的写法:\n```js\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n等价的原型写法:\n```js\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n### 箭头函数\n箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.\n\n- e.g.\n```js\n// 使用箭头函数\nconst add = (a, b) => a + b;\n\n// 等价的普通函数\nconst add = function add(a, b) {\n  return a + b;\n}\n```\n\n### 结构赋值\n$\\underline{结构赋值}$ 手动提取**对象**属性的语法糖.\n\n- 使用结构赋值:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst {name, gender} = person;\n```\n\n- 等价的原型写法:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst name = person.name;\nconst gender = person.gender;\n```\n\n#### 赋值规则\n结构赋值时, 基于 **属性名匹配** 而非顺序. \n因此, 对象结构的`{}`内部属性必须和 **对象的属性名** 相对应.\n\n**错误**的示例:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { a, b } = person;\n\nconsole.log(a); // 输出：undefined\nconsole.log(b); // 输出：undefined\n```\n\n**重命名属性**的写法:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { name: a, age: b } = person;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n\n**手动赋值**: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:\n```js\nconst person = { name: \"Alice\" };\nconst { name, age = 30 } = person;\n\nconsole.log(name); // 输出：Alice\nconsole.log(age);  // 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）\n```\n#### 数组的结构赋值\n上述讨论的结构赋值都是对 **对象** 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— **基于顺序**赋值:\n```js\nconst arr = [\"Alice\", 25];\nconst [a, b] = arr;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n","source":"_posts/JavaScript.md","raw":"---\ntitle: JavaScript\ndate: 2025-01-09 14:06:30\ntags: \n- 前端\n- JS\ncategories: 学习笔记\nexcerpt: 一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「料理的加护」下, 尽可能将JS处理得更加可口一些)\nmath: true\nindex_img: /img/料理的加护.jpg\n---\n> JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「**料理的加护**」下, 尽可能将JS处理得更加**可口**一些)\n<img src=\"/img/料理的加护.jpg\" width = \"35%\">\n\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n<br>\n\n事件处理函数的默认接受值是`event`:\n```html\n<button>\nonclick\n</button>\n\n<p>\nnothing here\n</p>\n\n<script>\nbtn = document.querySelector(\"button\")\npara = document.querySelector(\"p\")\n\nbtn.onclick = click;\n\nfunction click(string){\n  console.log(\"clicked!\")\n  para.textContent = string;\n}\n</script>\n```\n1. 上述的`btn`在点击之后调用函数`click`, 该函数需要一个参数`string`, 由于`btn.onclick = click;`的绑定方式, 我们无法指定传参的值, 因此点击之后的`para`的内容显示为: `[object PointerEvent]`;\n2. `textContent`是属性而非方法, 因此采用赋值实现;\n\n\n```js\nbtn.onclick = function click(string) {\n  console.log(\"clicked!\")\n  para.textContent = \"You have clicked the button!\";\n}\n```\n> 将上述的绑定方式如此改写, 可以在`btn`外对`string`进行赋值, 然后点击按钮可以传入指定参数供后续处理.\n\n\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n## 数据类型\n### 数字和操作符\n大部分与C语言相同, 概括需要注意的差异:\n- JS当中只有一种数字类型 -- `number`, 对于整型或者浮点数的初始化得到的量, 由`typeof`均得到`number`;\n- 算术运算符: 求幂为`**`;\n- 常量无法使用自增或自减,~~好像也是C语言的 忘了~~\n- `===`表示严格等于, `!==`表示不等于;\n> 同时存在`==`和`!=`来判断是否相等, 但是它们只是测试 **值** 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用`===`和`!==`来避免类型不一致的错误.\n\n### 字符串\n创建字符串\n```js\nlet myString = \"A string\";\nconst constString = myString;\nconsole.log(constString);\n//A string\n``` \n可以使用单引号,双引号和**反引号**来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:\n```js\nconst single = '单引号';\nconst double = \"双引号\";\nconst backtick = `反引号`;\n```\n\n反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:\n- 可以嵌入 **JavaScript**;\n- 可以声明**多行**的模板字面量.\n\n#### 字符串的拼接\n字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:\n```js\nconst name = \"克里斯\";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // \"你好，克里斯\"\n```\n> 在模板字面量中用`${}`包装JS的变量或者表达式.\n\n\n```js\nconst one = \"你好，\";\nconst two = \"请问最近如何？\";\nconst joined = `${one}${two}`;\nconsole.log(joined); // \"你好，请问最近如何？\"\n```\n> 连接2个变量.\n\n```js\nconst song = \"青花瓷\";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // \"我喜欢歌曲《青花瓷》。我给它打了 90 分。\"\n```\n> 在模板字面量的`${}`内部包含表达式.\n\n<br>\n除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用`+`直接连接:\n```js\nconst greeting = \"你好\";\nconst name = \"克里斯\";\nconsole.log(greeting + \"，\" + name); // \"你好，克里斯\"\n```\n\n#### 多行字符串\n模板字符串会**保留**源代码中的换行符，因此可以编写跨越多行的字符串:\n```js\nconst newline = `终于有一天，\n你知道了必须做的事情，而且开始……`;\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n如果希望用普通的字符串得到等效的输出, 必须在字符串中包含`\\n`,而非直接跨行:\n```js\nconst newline = \"终于有一天，\\n你知道了必须做的事情，而且开始……\";\nconsole.log(newline);\n\n/*\n终于有一天，\n你知道了必须做的事情，而且开始……\n*/\n```\n\n#### 显示引号\n1. $\\underline{转义}$  通过在符号前加上反斜杠`\\`, 可以转义字符串中的特殊字符,包括字符串中的引号:\n```js\nconst bigmouth = 'I\\'ve got no right to take my place…';\n```\n2. 换用其他字符: 在字面量内用不同于包裹字符串的引号:\n```js\nconst goodQuotes1 = 'She said \"I think so!\"';\nconst goodQuotes2 = `She said \"I'm not going in there!\"`;\n```\n\n\n#### 常用方法\n对于字符串对象实例,其常用的方法:\n- `.length`: 获取字符串的长度;\n- `[]`: 返回字符串中对应索引的字符, 索引同样从`0`开始;\n- `.indexOf(\"\")`: 查找子字符串\n  - **input**: 希望查找的子字符串;\n  - **output**: 子字符串开始的下标(如果不存在则返回`-1`);\n- `.slice(indedxStart, indexEnd)`: 截取字符串\n  - **input**: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;\n  - **output**: 截取的子字符串;\n\n更多的`slice`知识:\n1. $\\underline{标准化负值}$ 如果索引是个负数, 取`index+str.length`进行标准化;\n2. 如果`indexStart`大于`str.length`, 返回空字符串;\n3. 如果标准化负值之后, `indexStart`大于`indexEnd`, 也返回空字符串;\n \n- `.toLowerCase()` & `.toUpperCase()`: 转换字符串中的所有字符为小写或大写;\n- `.replace(original, new)`: 替换字符串中`original`子字符串为`new`;\n> 此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.\n\n#### Cases\n利用 **indexOf** 和 **slice** 方法, 获取新字符串:\n- **input**: `\"str3\"`三位长字符串+`\"...\"`(无关字符串)+`\";\"`+`strLast`(剩余字符串);\n- **output**: `\"str3\"+\";\"+strLast`\n\n```js\nvar stations = ['MAN675847583748sjt567654;Manchester Piccadilly',\n                'GNF576746573fhdg4737dh4;Greenfield',\n                'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',\n                'SYB4f65hf75f736463;Stalybridge',\n                'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];\n\nfor(var i = 0; i < stations.length; i++){\n    var input = stations[i];\n    var str3 = input.slice(0,3);\n    var strLast = input.slice(input.indexOf(\";\")+1); //indexOf获取;位置\n    var output = str3 + \";\" + strLast;\n}\n```\n\n---\n\n通过 **indexOf** 根据子字符串筛选字符串数组:\n- **input**: 可能包含 *Christmas* 的字符串数组;\n- **output**: 包含 *Christmas* 的字符串数组;\n\n```js\nvar list = document.querySelector('.output ul');\nlist.innerHTML = '';\nvar greetings = ['Happy Birthday!',\n                 'Merry Christmas my love',\n                 'A happy Christmas to all the family',\n                 'You\\'re all I want for Christmas',\n                 'Get well soon'];\n\nfor(var i = 0; i < greetings.length; i++) {\n  var input = greetings[i];\n  if(greetings[i].indexOf('Christmas') !== -1) {\n    var result = input;\n    var listItem = document.createElement('li');\n    listItem.textContent = result;\n    list.appendChild(listItem);\n  }\n}\n```\n\n### 数字与字符串\n#### 相互转换\n非常神奇, 在JS当中, 数字和字符串可以直接通过函数`Number()`和`String()`进行转换, 与C语言不同.\n```js\nconst myString = \"123\";\nconst myNum = Number(myString);\nconsole.log(typeof myNum);\n// number\nconsole.log(myNum);\n// 123\n```\n\n```js\nconst myNum2 = 123;\nconst myString2 = String(myNum2);\nconsole.log(typeof myString2);\n// string\nconsole.log(myString2);\n// \"123\"\n```\n> 对于浮点数同样成立.\n\n#### 前后拼接\n使用`+`将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:\n```js\nconst name = \"Front \";\nconst number = 242;\nconst combine = name + number;\n\nconsole.log(combine); //Front 242\n\nconsole.log(typeof(combine));  //string\n```\n\n### 数组\n1. 存储任意类型元素--字符串，数字，对象，变量，**另一个数组**;\n2. 可以 **混合** 元素类型:\n```js\nlet random = [\"tree\", 795, [0, 1, 2]];\n```\n3. 像访问字符串一样, 利用索引访问数组元素;\n4. $\\underline{多维数组}$ 包含数组的数组结构称为~\n\n#### split()\n- 作用: 将一个字符串根据给定的字符分隔为字符串数组;\n```js\nlet myData = \"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle\";\nlet myArray = myData.split(\",\");\nconsole.log(myArray);\n // [\"Manchester\", \"London\", \"Liverpool\", \"Birmingham\", \"Leeds\", \"Carlisle\"]\n```\n\n#### join()\n`split`的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:\n```js\nlet myNewString = myArray.join(\",\");\nmyNewString;\n```\n\n#### toString()\n与`join`方法相似, 但是无法自定义分隔符, 默认为`,`:\n```js\nlet dogNames = [\"Rocket\", \"Flash\", \"Bella\", \"Slugger\"];\ndogNames.toString(); //Rocket,Flash,Bella,Slugger\n```\n\n#### push & pop\n`push()`方法可以将1或多个元素添加到数组的 **末尾**:\n1. 将会直接改写原来的数组,不需要重新赋值;\n2. 该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);\n```js\nlet myArray = [1, 2, 3];\nlet newLength = myArray.push(4, 5,\"string\");\nconsole.log(myArray); // [1, 2, 3, 4, 5, \"string\"]\nconsole.log(newLength); // 6\n```\n\n使用`.pop()`从数组中删除最后一个元素:\n```js\nmyArray.pop(); //\"string\"\nconsole.log(myArray); // [1, 2, 3, 4, 5]\n```\n1. 方法调用返回值就是删除的元素本身;\n2. 直接对原始数组操作并赋值, 不需要另外的赋值操作;\n\n> shift & unshift:\n> 在功能上分别与`push`和`pop`相同, 但是作用于数组的开始位置.\n\n## 条件语句\nJS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:\n### 天气预报\n```html\n<label for=\"weather\">选择今天的天气：</label\n><select id=\"weather\">\n  <option value=\"\">--作出选择--</option>\n  <option value=\"sunny\">晴天</option>\n  <option value=\"rainy\">雨天</option>\n  <option value=\"snowing\">雪天</option>\n  <option value=\"overcast\">阴天</option>\n</select>\n\n<p></p>\n```\n> `lable`当中的`for`标签与`select`标签的`id`属性对应, 用于关联两个标签.\n\n```js\nconst select = document.querySelector(\"select\");\nconst para = document.querySelector(\"p\");\n\nselect.addEventListener(\"change\", setWeather);\n\nfunction setWeather() {\n  const choice = select.value;\n\n  switch (choice) {\n    case \"sunny\":\n      para.textContent = \"阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。\";\n      break;\n    case \"rainy\":\n      para.textContent = \"外面下着雨；带上雨衣和雨伞，不要在外面呆太久。\";\n      break;\n    case \"snowing\":\n      para.textContent =\n        \"大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。\";\n      break;\n    case \"overcast\":\n      para.textContent =\n        \"虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。\";\n      break;\n    default:\n      para.textContent = \"\";\n  }\n}\n```\n> 1. 通过`querySelector`方法获取`select`和`p`标签;\n> 2. 然后为`select`标签添加事件监听器, 当内容改变时触发 **change** 事件, 同时调用`setWeather`函数;\n> 3. 进而通过 **switch** 语句处理不同天气的情况, 并设置相应的文字内容;\n> 在线网页示例:[simple-switch](https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html)\n\n\n## 事件介绍\n什么是$\\underline{事件}$? \n- 用户选择、点击或者光标悬停在某一元素;\n- 用户在键盘中按下某个按键;\n- 网页结束加载;\n- ...\n\n$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.\n\n### 处理点击事件\n以点击事件为例, 介绍html与js如何进行事件处理的交互:\n```html\n<button> 改变颜色 </button>\n```\n```js\nconst btn = document.querySelector(\"button\");\n\nfunction random(number){\n  return Math.floor(Math.random()*(number+1));\n  \n}\n\nbtn.addEventListener(\"click\", ()=>{\n  const rndCol = `rgb(${random(255)},${random(255)},${random(255)})`;\n  document.body.style.backgroundColor = rndCol;\n})\n```\n1. `Math.random()`方法生成一个介于[0,1)之间的随机数;\n2. `*(number+1)`之后利用向下取整的方法`Math.floor()`将其转换为整数, 范围为[0,number];\n> 假如输入的number为`4`, 则`random(4)`的结果可能为`0`, `1`, `2`, `3`, `4`中的一个;\n> 假设输入的number为`3.6`, 则输出的结果还是0~4中的整数.\n3. ``rndCol = `rgb(${random(255)},${random(255)},${random(255)})`` 采用的是在$\\underline{模板字符串}$内部使用`${}`调用函数变量的方法.\n\n### addEventListener()\n`adEventListener`方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.\n\n通过`EventTarget.adddEventListener()`的方法, 将指定的监听器注册到对象上, 具体的语法如下:\n```js\naddEventListener(type, listener);\naddEventListener(type, listener, options);\naddEventListener(type, listener, useCapture);\n```\n- `type`: 事件类型, 如`click`, `mouseover`, `mouseout`, `keydown`, `keyup`等;\n- `listener`: 事件处理函数, 该函数将在事件发生时被调用;\n  - 包括 **回调函数** 以及 实现了 **EventListener 接口的对象**;\n- `options`: 可选参数, 用于配置事件监听器的行为;\n> 可以为单个事件添加多个事件监听器.\n#### listener\n\n$\\underline{回调函数}$ 简单来说, ~指的是当某个事件发生时被调用的一段代码.\n- 是一个函数, 但是只有等到特定的事件发生时才会执行.\n\n$\\underline{实现了 EventListener 接口的对象}$ \n- **特点**: 以对象作为listener, 对象中具有名为`handleEvent()`的方法;\n- **作用**: \n  - 将事件处理封装到一个对象当中, 可以更好地组织代码;\n  - 便于在对象中保存更多的状态信息;\n```js\nconst listenerObject = {\n    count: 0,\n    handleEvent(event) {\n        this.count++;\n        console.log(`事件类型是：${event.type}，已触发 ${this.count} 次`);\n    }\n};\n\nconst button = document.querySelector('button');\nbutton.addEventListener('click', listenerObject);\n```\n\n#### options\n一个指定有关 listener 属性的可选参数对象.\n##### Capture\n- 含义:\n  - 一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;\n  - 默认为false, 表示只有在冒泡阶段才触发.\n\n- 区别:\n  - `capture`和`useCapture`实际上指的都是 **监听器是否在捕获阶段触发** 的布尔值.\n> 捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.\n  - 后来DOM的规范更新时引入了`options`参数, 此后`capture`取代了`useCapture`的作用.\n  - 如果`addEventListener`的第三个参数不指定对象, 只有布尔值, 那么默认是在设置`useCapture`\n\n> 可以先查看[事件传播的阶段](#事件传播的阶段)来辅助理解不同的阶段.\n\n##### Once\n- 含义:\n  - 一个布尔值，表示 listener 在添加之后最多只调用一次;\n  - 默认为false, 表示可以多次调用.\n- e.g.\n```js\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n},{once: true});\n```\n> `once`属性被设置为`true`, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.\n\n##### Passive\n- 含义:\n  - 一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();\n\n- 作用:\n  - 明确不会在`listener`中不会调用`preventDefault()`方法, 即不会阻止浏览器的[默认行为](#默认行为);\n  - 此时, 浏览器可以直接渲染默认行为的结果, 无需等待`listener`的执行与默认行为的检查, 从而提高了性能.\n- Notice:\n  - 如果设置`passive`为`true`, 则`listener`当中不可出现`preventDefault()`方法, 否则会报错.\n\ne.g.\n```js\ndocument.addEventListener('wheel',()=>{\n\tevent.preventDefault();\n  console.log(\"scrolling\");\n},{passive: false});\n```\n- `wheel`事件的默认行为是滚动页面;\n- `event.preventDefault();`表示会阻止鼠标滚动带来的页面滚动;\n\n\n```js\ndocument.addEventListener('wheel',()=>{\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> 明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.\n\n```js\ndocument.addEventListener('wheel',()=>{\n  event.preventDefault();\n  console.log(\"scrolling\");\n},{passive: true});\n```\n> `passive`的设置与`listener`内部矛盾, 将会报错.\n\n##### Signal\n用于有条件地移除事件监听器, 具体使用参见[可被移除的监听器](#可被移除的监听器).\n\n### 事件传播的阶段\n1. 捕获阶段 $\\underline{capture\\space phase}$: 事件从根节点开始向目标节点传播;\n> e.g. 点击事件从document开始传播, 经过html,body直到目标元素.\n2. 目标阶段阶段 $\\underline{target\\space phase}$: 事件到达目标元素;\n3. 冒泡阶段 $\\underline{bubble\\space phase}$: 事件从目标元素开始沿着DOM树向上传播.\n\n#### Case\n```html\n<div id=\"parent\">\n  parent\n  <div id=\"child\">child</div>\n</div>\n```\n```js\nconst parent = document.querySelector('#parent');\nconst child = document.querySelector('#child');\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 冒泡阶段');\n});\n\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n}, { capture: true });\n\nchild.addEventListener('click', () => {\n    console.log('子元素 - 目标阶段');\n});\n```\n上述的`child`被包裹在`parent`内部.\n- 当点击`parent`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> 由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;\n\n- 当点击`child`时将会显示:\n```bash\n\"父元素 - 捕获阶段\"\n\"子元素 - 目标阶段\"\n\"父元素 - 冒泡阶段\"\n```\n> `child`是整个事件流的目标元素, 所以触发时机介于二者之间.\n\n#### Notice\n1. 如果将`div`换成`button`, 则点击`child`时可能只会显示 **目标** 阶段的输出.\n> 这是因为, 不同浏览器对于`button`元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段\n\n2.  `event.stopPropagation();`加入该~~咒语~~代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:\n```js\nparent.addEventListener('click', () => {\n    console.log('父元素 - 捕获阶段');\n    event.stopPropagation();\n}, { capture: true });\n```\n> 此时, 点击`parent`时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.\n\n### 可被移除的监听器\n```html\n<table id=\"outside\">\n  <tr>\n    <td id=\"t1\">one</td>\n  </tr>\n  <tr>\n    <td id=\"t2\">two</td>\n  </tr>\n</table>\n```\n```js\n// 为 table 添加可被移除的事件监听器\nconst controller = new AbortController();\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\"click\", modifyText, { signal: controller.signal });\n\n// 改变 t2 内容的函数\nfunction modifyText() {\n  const t2 = document.getElementById(\"t2\");\n  if (t2.firstChild.nodeValue === \"three\") {\n    t2.firstChild.nodeValue = \"two\";\n  } else {\n    t2.firstChild.nodeValue = \"three\";\n    controller.abort(); // 当值变为 \"three\" 后，移除监听器\n  }\n}\n```\n> - `AbortController`是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;\n> - `signal`属性是一个`AbortSignal`对象, 用于控制监听器的移除;\n> - `controller.abort()`方法用于移除监听器;\n> - 当`t2`的内容变为\"three\"时, 移除监听器, 使得`modifyText`函数不再执行. 此后, 点击`t2`不会触发`modifyText`函数.\n\n具体的**构造步骤:**\n1. 创建一个`AbortController`实例: `const controller = new AbortController();`\n2. 在事件监听器内的参数中添加`signal: controller.signal`选项;\n3. 在需要移除监听器的地方调用`controller.abort()`方法;\n\n---\n\n我们也可以直接使用`removeEventListener()`方法来移除事件监听器:\n```js\nremoveEventListener(type, listener);\nremoveEventListener(type, listener, options);\nremoveEventListener(type, listener, useCapture);\n```\n\n\n- Notices:\n  - 如果同一个对象上存在2个事件监听器, 且仅在`useCapture`参数存在差异, 那么需要先后2次调用`removeEventListener()`方法才能完全移除其事件监听器;\n  - 如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;\n  - `type`,`listener`参数必须完全匹配才能移除事件监听器;\n  - 对于`options`参数:\n    - 字段相同: 一定可以移除;\n    - 字段不同: 需要与默认值false匹配才可以移除.\n```js\nelement.addEventListener(\"mousedown\", handleMouseDown, { passive: true });\n\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: true }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, { capture: true }); // 失败\nelement.removeEventListener(\"mousedown\", handleMouseDown, { passive: false }); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, false); // 成功\nelement.removeEventListener(\"mousedown\", handleMouseDown, true); // 失败\n```\n\n---\n**添加与移除**的结合使用:\n```js\nconst body = document.querySelector(\"body\");\nconst clickTarget = document.getElementById(\"click-target\");\nconst mouseOverTarget = document.getElementById(\"mouse-over-target\");\n\nlet toggle = false;\nfunction makeBackgroundYellow() {\n  body.style.backgroundColor = toggle ? \"white\" : \"yellow\";\n\n  toggle = !toggle;\n}\n\nclickTarget.addEventListener(\"click\", makeBackgroundYellow, false);\n\nmouseOverTarget.addEventListener(\"mouseover\", () => {\n  clickTarget.removeEventListener(\"click\", makeBackgroundYellow, false);\n});\n```\n\n\n### 使用匿名函数\n在上述`html`例子下:\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  const t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用匿名函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  function () {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过匿名函数封装代码, 将参数传入函数`modifyText`, 使得函数可以被调用.\n\n### 使用箭头函数\n```js\n// 改变 t2 内容的函数\nfunction modifyText(new_text) {\n  var t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// 用箭头函数为 table 添加事件监听器\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\n  \"click\",\n  () => {\n    modifyText(\"four\");\n  },\n  false,\n);\n```\n通过`=>{}`形式的箭头函数简化代码书写.\n\n---\n#### 比较匿名与箭头\n匿名函数与箭头函数在此处的应用基本相同, 但是在`this`的指向上有所不同:\n- 匿名函数与其他普通的JS函数:`this`指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为`undefined`);\n```js\nfunction sayHello() {\n  console.log(this); // 在非严格模式下，this 指向 window\n}\nsayHello();\n```\n\n- 箭头函数的`this`继承自外部作用域, 即调用该方法的对象.\n```js\nconst obj = {\n  name: \"ZJU\",\n  greet: function () {\n    console.log(this.name); // this 指向 obj\n  },\n};\nobj.greet(); // 输出：ZJU\n```\n\n- e.g.\n```js\nconst obj = {\n  name: \"ZJU\",\n  getNameWithAnonymous: function () {\n    return function () {\n      console.log(this.name);\n    };\n  },\n  getNameWithArrow: function () {\n    return () => {\n      console.log(this.name);\n    };\n  },\n};\n\nconst anonymousFn = obj.getNameWithAnonymous();\nanonymousFn(); // 输出：undefined\n\nconst arrowFn = obj.getNameWithArrow();\narrowFn(); // 输出：ZJU\n```\n> 进一步完善.\n\n### 事件对象\n$\\underline{事件对象}$ 在事件处理函数的内部, 以固定指定名称出现的参数, 例如`event`,`e`,`evt`. 它被自动传递给事件处理函数，以提供额外的功能和信息。\n\n`e.target`始终是对 **事件刚刚发生的元素** 的引用\n\n## 表达式和运算符\n### new()\n$\\underline{new}$ 用来创建对象实例的一个关键字. \n- 作用: **调用** 一个 构造函数, 并返回一个由该构造函数创建的对象实例.\n#### 语法\n```js\nnew constructor\nnew constructor()\nnew constructor(arg1)\nnew constructor(arg1, arg2)\nnew constructor(arg1, arg2, /* …, */ argN)\n```\n1. 如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即`new foo` 等价于 `new foo()`;\n2. 构造函数内部的`this`将被绑定到新建的对象实例上;\n\n- e.g. \n```js\nfunction Car(color, brand) {\n  this.color = color;   // 将 color 赋值给新对象\n  this.brand = brand;   // 将 brand 赋值给新对象\n}\n\nconst myCar = new Car(\"red\", \"Toyota\");\n\nconsole.log(myCar.color); // 输出 \"red\"\nconsole.log(myCar.brand); // 输出 \"Toyota\"\n```\n\n使用`new()`的**步骤**:\n 1. 定义构造函数;\n 2. 使用`new()`并传入构造函数的参数;\n 3. 将返回的对象实例赋值给一个变量;\n\n#### 新增属性\n- 为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:\n```js\ncar1.color = \"black\" //为car1新增color属性\n```\n<br>\n\n- 添加共享属性到构造函数中的`prototype`:\n```js\nfunction Car() {}\ncar1 = new Car();\ncar2 = new Car();\n\nconsole.log(car1.color); // undefined\n\nCar.prototype.color = \"原色\";\nconsole.log(car1.color); // '原色'\n\ncar1.color = \"黑色\";\nconsole.log(car1.color); // '黑色'\n\nconsole.log(Object.getPrototypeOf(car1).color); // '原色'\nconsole.log(Object.getPrototypeOf(car2).color); // '原色'\nconsole.log(car1.color); // '黑色'\nconsole.log(car2.color); // '原色'\n```\n> - 此处的构造函数名为`Car`, 因此通过`Car.prototype`可以访问到构造函数的原型对象;\n> - `getPrototypeOf` 表示获取对象的**原型对象**, 因此此处均为最初定义的 **原色**.\n\n#### new.target\n函数通过`new.target`属性可以判断是否通过`new`关键字调用, 即构造.\n- 如果函数是正常调用, 则返回`undefined`;\n- 如果函数是通过`new`调用, 返回被调用的构造函数.\n\n- e.g.\n```js\nfunction Car(color) {\n  if (!new.target) {\n    // 以函数的形式被调用。\n    return `${color}车`;\n  }\n  // 通过 new 被调用。\n  this.color = color;\n}\n\nconst a = Car(\"红\"); // a 是“红车”\nconst b = new Car(\"红\"); // b 是 `Car { color: \"红\" }`\n```\n\n#### 对象类型与实例\n$\\underline{对象类型}$ 通过构造函数可以创建一个对象类型:\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\n$\\underline{对象实例}$ 通过使用`new()`方法, 由对象类型构造一个对象实例:\n```js\nconst myCar = new Car(\"鹰牌\", \"Talon TSi\", 1993);\n```\n\n#### 类与new\n在JS当中, 类 **必须** 通过`new`调用.\n> 可以优先阅读[类相关的知识](#类)\n\n- e.g. \n```js\nclass Animal {\n  //构造函数\n  constructor(name) {\n    this.name = name;\n  }\n  //实例方法\n  greet() {\n    console.log(`你好，我的名字是${this.name}`);\n  }\n}\n```\n对于上述的类, 必须使用如下的调用方式:\n```js\nconst animal = new Animal(\"Dog\"); // 正常\n```\n而下面这样类似于普通函数的调用方式会抛出错误:\n```js\nAnimal(\"Cat\"); // TypeError:  Class constructor Animal cannot be invoked without 'new'\n```\n<br>\n\n在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:\n```js\nanimal.greet(); // 输出 \"你好，我的名字是Dog\"\n```\n\n---\n\n下面给出与普通函数的区别:\n```js\nfunction Car(model) {\n  this.model = model;\n}\n\nconst car = new Car(\"Toyota\"); // 正常\nCar(\"Honda\"); // 不抛出错误，但 this 会指向全局对象.\nconst anotherCar = Car(\"cat\"); //此时全局对象下的model值为 \"cat\", 覆盖了上一行的定义.\n```\n总结:\n- 以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;\n- 如果以new方法构造得到对象实例, 依旧正常.\n\n---\n\n# 补充\n## 默认行为\n$\\underline{默认行为}$ 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.\n\n- 比如存在以下的默认行为:\n  - 滚动事件：触摸屏上滑动手指，页面会滚动;\n  - 拖拽文件到浏览器：浏览器会尝试加载文件;\n  - 点击链接 `(<a href=\"...\">)`：跳转到指定的 URL;\n\n$\\underline{阻止默认行为}$ 使用 `event.preventDefault()` 方法可以阻止事件的默认行为.\n\n- e.g: 阻止链接跳转\n```js\ndocument.querySelector('a').addEventListener('click', function(event) {\n    event.preventDefault(); // 阻止点击链接时的默认行为\n    console.log('链接被点击，但没有跳转');\n});\n```\n\n- 作用:\n  - 通过阻止默认行为, 可以实现自定义逻辑.\n\n## this\n\n- `this`可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;\n- `this` 指向的是**当前函数的调用者**，而不是函数内部定义的变量.\n\n<br>\n\n- e.g.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处的`f`\n\n### 函数上下文中的this\n- `this`参数的值取决于函数**如何**被调用, 而不是函数如何被定义.\n```js\n// 对象可以作为第一个参数传递给 'call' 或 'apply'，\n// 并且 'this' 将被绑定到它。\nconst obj = { a: \"Custom\" };\n\n// 使用 var 声明的变量成为 'globalThis' 的属性。\nvar a = \"Global\";\n\nfunction whatsThis() {\n  return this.a; // 'this' 取决于函数如何被调用\n}\n\nwhatsThis(); // 'Global'; 在非严格模式下，'this' 参数默认为 'globalThis'\nobj.whatsThis = whatsThis;\nobj.whatsThis(); // 'Custom'; 'this' 参数被绑定到 obj\n```\n1. 同样是调用函数`whatsThis()`, 但是`this`参数被绑定到不同的对象上, 导致返回值不同;\n2. 在非严格模式下, `this`参数默认指向`globalThis`, 即全局对象;\n3. 对于典型函数, `this`指向函数访问的对象;\n\n- e.g. \n```js\nconst obj = {\n    b: \"b in the obj\",\n    f: function() {\n        const b = \"b in the function\"; // 函数作用域\n        console.log(this.b); // 访问 this.b\n    }\n};\n\nconst b = \"b outside of the func\";\n\nobj.f();\n```\n> 此处`f`作为`obj`对象的方法被调用, 因此普通函数的`this`指向`obj`.\n\n- e.g. 直接调用的普通函数`this`指向全局:\n```js\nconst obj = {\n    a: \"a in the obj\",\n    f: function() {\n        const funcA = function () { return this.a }; // 普通函数，this 由调用方式决定\n        console.log(funcA()); // 访问 this.a\n    }\n};\n\nvar a = \"a in the global\";\nobj.f(); // \"a in the global\"\n```\n> - 此处的`funcA`并没有类似于作为对象的属性调用(`obj.funcA()`), 因此其`this`指向全局作用域(`window`), 输出`undefined`, 而是直接调用的形式, 因此其`this`指向全局作用域.\n\n\n\n\n\n### 对this传值\n使用`call()`以及`apply()`方法可以将`this`绑定到其他对象上.\n#### call()\n- 形式: `func.call(thisArg, arg1, arg2, ...)`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 剩余的参数被绑定到命名参数。\nadd.call(o, 5, 7); // 16\n```\n\n#### apply()\n- 形式: `func.apply(thisArg, [argsArray])`\n- e.g:\n```js\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nconst o = { a: 1, b: 3 };\n\n// 第一个参数被绑定到隐式的 'this' 参数；\n// 第二个参数是一个数组，其成员被绑定到命名参数。\nadd.apply(o, [10, 20]); // 34\n```\n\n#### bind()\n- 形式: `f.bind(someObject)`;\n- **作用**: \n  - 创建一个新的函数(需要重新赋值), 具有与`f`相同的函数体和作用域;\n  - 新函数的`this`被 **永久地** 绑定到`someObject`, 不随调用方式的变化而变化.\n- **限制**: \n  - `bind`无法多次生效. 即对函数f`bind`得到的g, 无法继续用`bind`得到期望的h;\n- e.g. 多次`bind`:\n```js\nfunction f() {\n  return this.a;\n}\n\nconst g = f.bind({ b: \"azerty\" });\nconsole.log(g()); // undefined\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // undefined\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 undefined undefined\n```\n> - 由于`bind`只能对一个原始函数作用, 因此由f得到的g无法继续由`bind`绑定`this`得到期望的h, 此处h的`this`依旧是`{b: \"azerty\"}`, 因此在输出对象`a`时显示`undefined`;\n> - `o.f()`的调用是普通函数的调用, 因此其`this`继承自对象`o`, 输出`37`;\n\n- e.g. 对象\n```js\nfunction f() {\n  return this.a + \" \" + this.c;\n}\n\nconst g = f.bind({ b: \"azerty\" , c:\"ccc\"});\nconsole.log(g()); // \"undefined ccc\"\n\nconst h = g.bind({ a: \"yoo\" }); // bind 只能生效一次！\nconsole.log(h()); // \"undefined ccc\"\n\nconst o = { a: 37, f, g, h };\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37 37 azerty azerty\n```\n> - `bind`绑定的`this`是永久覆盖, 而非简单叠加;\n> - 由于`bind`绑定的`this`不随者调用方式的变化而变化, 因此即使处于对象`o`当中, `g`,`h`依旧不会输出`o`中的`a`.\n\n### 箭头函数中的this\n\n\n使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。\n\n\n普通函数:\n```js\nconst a = \"a in the global\";\nconst foo = function () {return this.a};\n\nconst obj = {\n a: \"a in the obj\",\n f: foo\n};\n\nconsole.log(obj.f()); // \"a in the obj\"\n```\n\n`call()`、 `apply()`、 `bind()` 无法改变箭头函数的`this`(但是call与apply的其他参数可以正常传递:\n```js\nconst foo = ()=> this.a;\n\nconst obj = {\n a: \"a in the obj\",\n f: foo.bind({a:\"a in the bind\"}) // 显式绑定 this 到 obj, 但是无法生效\n};\n\nconsole.log(obj.f()); // undefined\n\n```\n> 换成普通函数则输出`a in the obj`.\n\n\n- 全局作用域\n```js\nvar a = \"a in the global\";\nconst foo1 = () => this.a;\n\nconst obj = {\n\ta: \"a in the obj\",\n\tf: ()=> a\n};\n\nconsole.log(obj.f());\n```\n\n## 作用域\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n- 块级作用域: 由`let`或`const`声明的变量的作用域.(对于`var`无效);\n\n```js\n{\n  var x = 1;\n}\nconsole.log(x); // 1\n\n{\n  const x = 1;\n}\nconsole.log(x); // undefined\n```\n\nNotices:\n- 对象本身并不会创建作用域, 只是一个键值对的集合;\n- 箭头函数也不会创建自己的作用域, 而是 **继承** 外层作用域中的`this`;\n\n### 变量与作用域\n- `var`在全局作用域中声明时会成为 **全局对象** (`window`或`global`)的属性;\n- `let`和`const`即使在全局作用域中声明, 也不会成为全局对象的属性;\n```js\nvar a = \"1\";\nlet b = \"2\";\n\nwindow.a; // \"1\"\nwindow.b; // undefined\n```\n> 因此, 建议在全局作用域中不要使用`var`声明变量, 而使用`let`或`const`声明变量. 从而避免导致意外的覆盖和冲突.\n\n\n### 函数与作用域\n#### 普通函数\n普通函数和匿名函数的作用域继承自其定义时的作用域.\n```js\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: function() {\n            return this.a; // 普通函数，this 动态绑定到 insideObj\n        }\n    },\n    f: function() {\n        return this.a; // 普通函数，this 动态绑定到 obj\n    }\n};\n\nconsole.log(obj.f());        // \"a in the obj\"\nconsole.log(obj.insideObj.g()); // undefined，因为 insideObj 中没有 a\n```\n\n#### 箭头函数\ne.g. **箭头函数继承外层作用域**:\n```js\nvar a = \"a in the global\";\n\nconst obj = {\n    a: \"a in the obj\",\n    insideObj: {\n        g: () => this.a\n    },\n    f: () => this.a\n};\n\nconsole.log(obj.f());        // \"a in the global\"\nconsole.log(obj.insideObj.g()); //\"a in the global\"\n```\n由于对象不会创建作用域, 因此此处的箭头函数的`this`继承了外层作用域(window)的`this`, 且`var`创建的变量存在于全局作用域中.\n\n## 语法糖\n$\\underline{语法糖}$ 一种让代码更简洁、更易读的语法形式.\n- 本质上没有增加语言的功能, 而是对已有功能的 **包装** 或者优化;\n- **可读性提升**: ~~让代码更填~~ 使得代码更加容易理解和书写;\n- **底层实现**: 实质上依旧用基础的语法实现.\n\n### 类\n类 `class` 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承`prototype`的封装.\n\n使用`class`的写法:\n```js\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n等价的原型写法:\n```js\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst person = new Person(\"Alice\");\nperson.greet(); // 输出：Hello, my name is Alice\n```\n\n### 箭头函数\n箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.\n\n- e.g.\n```js\n// 使用箭头函数\nconst add = (a, b) => a + b;\n\n// 等价的普通函数\nconst add = function add(a, b) {\n  return a + b;\n}\n```\n\n### 结构赋值\n$\\underline{结构赋值}$ 手动提取**对象**属性的语法糖.\n\n- 使用结构赋值:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst {name, gender} = person;\n```\n\n- 等价的原型写法:\n```js\nconst person = {name:\"Zhuo\", gender:\"male\"};\n\nconst name = person.name;\nconst gender = person.gender;\n```\n\n#### 赋值规则\n结构赋值时, 基于 **属性名匹配** 而非顺序. \n因此, 对象结构的`{}`内部属性必须和 **对象的属性名** 相对应.\n\n**错误**的示例:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { a, b } = person;\n\nconsole.log(a); // 输出：undefined\nconsole.log(b); // 输出：undefined\n```\n\n**重命名属性**的写法:\n```js\nconst person = { name: \"Alice\", age: 25 };\nconst { name: a, age: b } = person;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n\n**手动赋值**: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:\n```js\nconst person = { name: \"Alice\" };\nconst { name, age = 30 } = person;\n\nconsole.log(name); // 输出：Alice\nconsole.log(age);  // 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）\n```\n#### 数组的结构赋值\n上述讨论的结构赋值都是对 **对象** 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— **基于顺序**赋值:\n```js\nconst arr = [\"Alice\", 25];\nconst [a, b] = arr;\n\nconsole.log(a); // 输出：Alice\nconsole.log(b); // 输出：25\n```\n","slug":"JavaScript","published":1,"updated":"2025-01-19T11:46:34.123Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enf000auyqg322dc9ae","content":"<blockquote>\n<p>JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「<strong>料理的加护</strong>」下, 尽可能将JS处理得更加<strong>可口</strong>一些)<br><img src=\"/img/料理的加护.jpg\" width = \"35%\"></p>\n</blockquote>\n<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logName</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myName);<br>&#125;<br><br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Chris&quot;</span><br><br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Aniya&quot;</span>;<br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>而<code>let</code>只能声明一次:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br>myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myAge = <span class=\"hljs-number\">20</span> ;<span class=\"hljs-comment\">// 数字</span><br><span class=\"hljs-keyword\">let</span> dolphinGoodbye = <span class=\"hljs-string\">&quot;So long and thanks for all the fish&quot;</span>; <span class=\"hljs-comment\">// 字符串</span><br><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">6</span> &lt; <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//boolean</span><br><br><span class=\"hljs-comment\">//数组类型</span><br><span class=\"hljs-keyword\">let</span> myNameArray = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Jim&quot;</span>];<br><span class=\"hljs-keyword\">let</span> myNumberArray = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>];<br><br><span class=\"hljs-comment\">//对象类型</span><br><span class=\"hljs-keyword\">let</span> dog = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spot&quot;</span>, <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNumber = <span class=\"hljs-string\">&quot;500&quot;</span>;<br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class=\"hljs-number\">500</span>; <br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>$\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">exampleFunction</span>();<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;函数内&quot;</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greeding</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;my friend&quot;</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">//Hello, my friend!</span><br><span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">&quot;world&quot;</span>); <span class=\"hljs-comment\">//Hello, world!</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>事件处理函数的默认接受值是<code>event</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span><br>onclick<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>nothing here<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>)</span><br><span class=\"language-javascript\">para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>)</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn.<span class=\"hljs-property\">onclick</span> = click;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>)&#123;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)</span><br><span class=\"language-javascript\">  para.<span class=\"hljs-property\">textContent</span> = string;</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li>\n<li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">btn.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)<br>  para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;You have clicked the button!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p>\n</blockquote>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 匿名函数</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logKey</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> originals = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-keyword\">const</span> doubled = originals.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item * <span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled); <span class=\"hljs-comment\">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleItem</span>(<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;textBox&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> textBox = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#textBox&quot;</span>);<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#output&quot;</span>);<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  output.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;first.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;second.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>  greeting();<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数字和操作符\"><a href=\"#数字和操作符\" class=\"headerlink\" title=\"数字和操作符\"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p>\n<ul>\n<li>JS当中只有一种数字类型 — <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li>\n<li>算术运算符: 求幂为<code>**</code>;</li>\n<li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li>\n<li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote>\n<p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>创建字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myString = <span class=\"hljs-string\">&quot;A string&quot;</span>;<br><span class=\"hljs-keyword\">const</span> constString = myString;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(constString);<br><span class=\"hljs-comment\">//A string</span><br></code></pre></td></tr></table></figure><br>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> single = <span class=\"hljs-string\">&#x27;单引号&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> double = <span class=\"hljs-string\">&quot;双引号&quot;</span>;<br><span class=\"hljs-keyword\">const</span> backtick = <span class=\"hljs-string\">`反引号`</span>;<br></code></pre></td></tr></table></figure></p>\n<p>反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p>\n<ul>\n<li>可以嵌入 <strong>JavaScript</strong>;</li>\n<li>可以声明<strong>多行</strong>的模板字面量.</li>\n</ul>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">`你好，<span class=\"hljs-subst\">$&#123;name&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在模板字面量中用<code>$&#123;&#125;</code>包装JS的变量或者表达式.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> one = <span class=\"hljs-string\">&quot;你好，&quot;</span>;<br><span class=\"hljs-keyword\">const</span> two = <span class=\"hljs-string\">&quot;请问最近如何？&quot;</span>;<br><span class=\"hljs-keyword\">const</span> joined = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;one&#125;</span><span class=\"hljs-subst\">$&#123;two&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(joined); <span class=\"hljs-comment\">// &quot;你好，请问最近如何？&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>连接2个变量.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> song = <span class=\"hljs-string\">&quot;青花瓷&quot;</span>;<br><span class=\"hljs-keyword\">const</span> score = <span class=\"hljs-number\">9</span>;<br><span class=\"hljs-keyword\">const</span> highestScore = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-string\">`我喜欢歌曲《<span class=\"hljs-subst\">$&#123;song&#125;</span>》。我给它打了 <span class=\"hljs-subst\">$&#123;</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">  (score / highestScore) * <span class=\"hljs-number\">100</span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">&#125;</span> 分。`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(output); <span class=\"hljs-comment\">// &quot;我喜欢歌曲《青花瓷》。我给它打了 90 分。&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在模板字面量的<code>$&#123;&#125;</code>内部包含表达式.</p>\n</blockquote>\n<p><br><br>除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用<code>+</code>直接连接:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&quot;你好&quot;</span>;<br><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting + <span class=\"hljs-string\">&quot;，&quot;</span> + name); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">`终于有一天，</span><br><span class=\"hljs-string\">你知道了必须做的事情，而且开始……`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\\n</code>,而非直接跨行:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">&quot;终于有一天，\\n你知道了必须做的事情，而且开始……&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"显示引号\"><a href=\"#显示引号\" class=\"headerlink\" title=\"显示引号\"></a>显示引号</h4><ol>\n<li>$\\underline{转义}$  通过在符号前加上反斜杠<code>\\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> bigmouth = <span class=\"hljs-string\">&#x27;I\\&#x27;ve got no right to take my place…&#x27;</span>;<br></code></pre></td></tr></table></figure></li>\n<li>换用其他字符: 在字面量内用不同于包裹字符串的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> goodQuotes1 = <span class=\"hljs-string\">&#x27;She said &quot;I think so!&quot;&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> goodQuotes2 = <span class=\"hljs-string\">`She said &quot;I&#x27;m not going in there!&quot;`</span>;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p>\n<ul>\n<li><code>.length</code>: 获取字符串的长度;</li>\n<li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li>\n<li><code>.indexOf(&quot;&quot;)</code>: 查找子字符串<ul>\n<li><strong>input</strong>: 希望查找的子字符串;</li>\n<li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li>\n</ul>\n</li>\n<li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul>\n<li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li>\n<li><strong>output</strong>: 截取的子字符串;</li>\n</ul>\n</li>\n</ul>\n<p>更多的<code>slice</code>知识:</p>\n<ol>\n<li>$\\underline{标准化负值}$ 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li>\n<li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li>\n<li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li>\n</ol>\n<ul>\n<li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li>\n<li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote>\n<p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Cases\"><a href=\"#Cases\" class=\"headerlink\" title=\"Cases\"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p>\n<ul>\n<li><strong>input</strong>: <code>&quot;str3&quot;</code>三位长字符串+<code>&quot;...&quot;</code>(无关字符串)+<code>&quot;;&quot;</code>+<code>strLast</code>(剩余字符串);</li>\n<li><strong>output</strong>: <code>&quot;str3&quot;+&quot;;&quot;+strLast</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> stations = [<span class=\"hljs-string\">&#x27;MAN675847583748sjt567654;Manchester Piccadilly&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;GNF576746573fhdg4737dh4;Greenfield&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;LIV5hg65hd737456236dch46dg4;Liverpool Lime Street&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;SYB4f65hf75f736463;Stalybridge&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; stations.<span class=\"hljs-property\">length</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">var</span> input = stations[i];<br>    <span class=\"hljs-keyword\">var</span> str3 = input.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">var</span> strLast = input.<span class=\"hljs-title function_\">slice</span>(input.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;;&quot;</span>)+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//indexOf获取;位置</span><br>    <span class=\"hljs-keyword\">var</span> output = str3 + <span class=\"hljs-string\">&quot;;&quot;</span> + strLast;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p>\n<ul>\n<li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li>\n<li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.output ul&#x27;</span>);<br>list.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> greetings = [<span class=\"hljs-string\">&#x27;Happy Birthday!&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Merry Christmas my love&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;A happy Christmas to all the family&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;You\\&#x27;re all I want for Christmas&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Get well soon&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; greetings.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  <span class=\"hljs-keyword\">var</span> input = greetings[i];<br>  <span class=\"hljs-keyword\">if</span>(greetings[i].<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;Christmas&#x27;</span>) !== -<span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> result = input;<br>    <span class=\"hljs-keyword\">var</span> listItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br>    listItem.<span class=\"hljs-property\">textContent</span> = result;<br>    list.<span class=\"hljs-title function_\">appendChild</span>(listItem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"数字与字符串\"><a href=\"#数字与字符串\" class=\"headerlink\" title=\"数字与字符串\"></a>数字与字符串</h3><h4 id=\"相互转换\"><a href=\"#相互转换\" class=\"headerlink\" title=\"相互转换\"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myString = <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-keyword\">const</span> myNum = <span class=\"hljs-title class_\">Number</span>(myString);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myNum);<br><span class=\"hljs-comment\">// number</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myNum);<br><span class=\"hljs-comment\">// 123</span><br></code></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myNum2 = <span class=\"hljs-number\">123</span>;<br><span class=\"hljs-keyword\">const</span> myString2 = <span class=\"hljs-title class_\">String</span>(myNum2);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myString2);<br><span class=\"hljs-comment\">// string</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myString2);<br><span class=\"hljs-comment\">// &quot;123&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对于浮点数同样成立.</p>\n</blockquote>\n<h4 id=\"前后拼接\"><a href=\"#前后拼接\" class=\"headerlink\" title=\"前后拼接\"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Front &quot;</span>;<br><span class=\"hljs-keyword\">const</span> number = <span class=\"hljs-number\">242</span>;<br><span class=\"hljs-keyword\">const</span> combine = name + number;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(combine); <span class=\"hljs-comment\">//Front 242</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">typeof</span>(combine));  <span class=\"hljs-comment\">//string</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ol>\n<li>存储任意类型元素—字符串，数字，对象，变量，<strong>另一个数组</strong>;</li>\n<li>可以 <strong>混合</strong> 元素类型:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> random = [<span class=\"hljs-string\">&quot;tree&quot;</span>, <span class=\"hljs-number\">795</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]];<br></code></pre></td></tr></table></figure></li>\n<li>像访问字符串一样, 利用索引访问数组元素;</li>\n<li>$\\underline{多维数组}$ 包含数组的数组结构称为~</li>\n</ol>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><ul>\n<li>作用: 将一个字符串根据给定的字符分隔为字符串数组;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myData = <span class=\"hljs-string\">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;<br><span class=\"hljs-keyword\">let</span> myArray = myData.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray);<br> <span class=\"hljs-comment\">// [&quot;Manchester&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;, &quot;Leeds&quot;, &quot;Carlisle&quot;]</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNewString = myArray.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>myNewString;<br></code></pre></td></tr></table></figure></p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> dogNames = [<span class=\"hljs-string\">&quot;Rocket&quot;</span>, <span class=\"hljs-string\">&quot;Flash&quot;</span>, <span class=\"hljs-string\">&quot;Bella&quot;</span>, <span class=\"hljs-string\">&quot;Slugger&quot;</span>];<br>dogNames.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">//Rocket,Flash,Bella,Slugger</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"push-amp-pop\"><a href=\"#push-amp-pop\" class=\"headerlink\" title=\"push &amp; pop\"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p>\n<ol>\n<li>将会直接改写原来的数组,不需要重新赋值;</li>\n<li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> newLength = myArray.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&quot;string&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, &quot;string&quot;]</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newLength); <span class=\"hljs-comment\">// 6</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用<code>.pop()</code>从数组中删除最后一个元素:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myArray.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">//&quot;string&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>方法调用返回值就是删除的元素本身;</li>\n<li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li>\n</ol>\n<blockquote>\n<p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p>\n</blockquote>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p>\n<h3 id=\"天气预报\"><a href=\"#天气预报\" class=\"headerlink\" title=\"天气预报\"></a>天气预报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span>选择今天的天气：&lt;/label<br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>--作出选择--<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;sunny&quot;</span>&gt;</span>晴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;rainy&quot;</span>&gt;</span>雨天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;snowing&quot;</span>&gt;</span>雪天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;overcast&quot;</span>&gt;</span>阴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> select = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;select&quot;</span>);<br><span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>);<br><br>select.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;change&quot;</span>, setWeather);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setWeather</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> choice = select.<span class=\"hljs-property\">value</span>;<br><br>  <span class=\"hljs-keyword\">switch</span> (choice) &#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;sunny&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;rainy&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;外面下着雨；带上雨衣和雨伞，不要在外面呆太久。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;snowing&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;overcast&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-attr\">default</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li>\n<li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li>\n<li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html\">simple-switch</a></li>\n</ol>\n</blockquote>\n<h2 id=\"事件介绍\"><a href=\"#事件介绍\" class=\"headerlink\" title=\"事件介绍\"></a>事件介绍</h2><p>什么是$\\underline{事件}$? </p>\n<ul>\n<li>用户选择、点击或者光标悬停在某一元素;</li>\n<li>用户在键盘中按下某个按键;</li>\n<li>网页结束加载;</li>\n<li>…</li>\n</ul>\n<p>$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p>\n<h3 id=\"处理点击事件\"><a href=\"#处理点击事件\" class=\"headerlink\" title=\"处理点击事件\"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span> 改变颜色 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">random</span>(<span class=\"hljs-params\">number</span>)&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*(number+<span class=\"hljs-number\">1</span>));<br>  <br>&#125;<br><br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">()=&gt;</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> rndCol = <span class=\"hljs-string\">`rgb(<span class=\"hljs-subst\">$&#123;random(<span class=\"hljs-number\">255</span>)&#125;</span>,<span class=\"hljs-subst\">$&#123;random(<span class=\"hljs-number\">255</span>)&#125;</span>,<span class=\"hljs-subst\">$&#123;random(<span class=\"hljs-number\">255</span>)&#125;</span>)`</span>;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = rndCol;<br>&#125;)<br></code></pre></td></tr></table></figure></p>\n<ol>\n<li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li>\n<li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote>\n<p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p>\n</blockquote>\n</li>\n<li><code>rndCol = `rgb($&#123;random(255)&#125;,$&#123;random(255)&#125;,$&#123;random(255)&#125;)</code> 采用的是在$\\underline{模板字符串}$内部使用<code>$&#123;&#125;</code>调用函数变量的方法.</li>\n</ol>\n<h3 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener()\"></a>addEventListener()</h3><p><code>adEventListener</code>方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.</p>\n<p>通过<code>EventTarget.adddEventListener()</code>的方法, 将指定的监听器注册到对象上, 具体的语法如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">addEventListener</span>(type, listener);<br><span class=\"hljs-title function_\">addEventListener</span>(type, listener, options);<br><span class=\"hljs-title function_\">addEventListener</span>(type, listener, useCapture);<br></code></pre></td></tr></table></figure></p>\n<ul>\n<li><code>type</code>: 事件类型, 如<code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>keydown</code>, <code>keyup</code>等;</li>\n<li><code>listener</code>: 事件处理函数, 该函数将在事件发生时被调用;<ul>\n<li>包括 <strong>回调函数</strong> 以及 实现了 <strong>EventListener 接口的对象</strong>;</li>\n</ul>\n</li>\n<li><code>options</code>: 可选参数, 用于配置事件监听器的行为;<blockquote>\n<p>可以为单个事件添加多个事件监听器.</p>\n<h4 id=\"listener\"><a href=\"#listener\" class=\"headerlink\" title=\"listener\"></a>listener</h4></blockquote>\n</li>\n</ul>\n<p>$\\underline{回调函数}$ 简单来说, ~指的是当某个事件发生时被调用的一段代码.</p>\n<ul>\n<li>是一个函数, 但是只有等到特定的事件发生时才会执行.</li>\n</ul>\n<p>$\\underline{实现了 EventListener 接口的对象}$ </p>\n<ul>\n<li><strong>特点</strong>: 以对象作为listener, 对象中具有名为<code>handleEvent()</code>的方法;</li>\n<li><strong>作用</strong>: <ul>\n<li>将事件处理封装到一个对象当中, 可以更好地组织代码;</li>\n<li>便于在对象中保存更多的状态信息;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> listenerObject = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-title function_\">handleEvent</span>(<span class=\"hljs-params\">event</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>++;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`事件类型是：<span class=\"hljs-subst\">$&#123;event.type&#125;</span>，已触发 <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.count&#125;</span> 次`</span>);<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;button&#x27;</span>);<br>button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, listenerObject);<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a>options</h4><p>一个指定有关 listener 属性的可选参数对象.</p>\n<h5 id=\"Capture\"><a href=\"#Capture\" class=\"headerlink\" title=\"Capture\"></a>Capture</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;</li>\n<li>默认为false, 表示只有在冒泡阶段才触发.</li>\n</ul>\n</li>\n<li><p>区别:</p>\n<ul>\n<li><code>capture</code>和<code>useCapture</code>实际上指的都是 <strong>监听器是否在捕获阶段触发</strong> 的布尔值.<blockquote>\n<p>捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.</p>\n</blockquote>\n</li>\n<li>后来DOM的规范更新时引入了<code>options</code>参数, 此后<code>capture</code>取代了<code>useCapture</code>的作用.</li>\n<li>如果<code>addEventListener</code>的第三个参数不指定对象, 只有布尔值, 那么默认是在设置<code>useCapture</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>可以先查看<a href=\"#事件传播的阶段\">事件传播的阶段</a>来辅助理解不同的阶段.</p>\n</blockquote>\n<h5 id=\"Once\"><a href=\"#Once\" class=\"headerlink\" title=\"Once\"></a>Once</h5><ul>\n<li>含义:<ul>\n<li>一个布尔值，表示 listener 在添加之后最多只调用一次;</li>\n<li>默认为false, 表示可以多次调用.</li>\n</ul>\n</li>\n<li>e.g.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">child.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;子元素 - 目标阶段&#x27;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">once</span>: <span class=\"hljs-literal\">true</span>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>once</code>属性被设置为<code>true</code>, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"Passive\"><a href=\"#Passive\" class=\"headerlink\" title=\"Passive\"></a>Passive</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();</li>\n</ul>\n</li>\n<li><p>作用:</p>\n<ul>\n<li>明确不会在<code>listener</code>中不会调用<code>preventDefault()</code>方法, 即不会阻止浏览器的<a href=\"#默认行为\">默认行为</a>;</li>\n<li>此时, 浏览器可以直接渲染默认行为的结果, 无需等待<code>listener</code>的执行与默认行为的检查, 从而提高了性能.</li>\n</ul>\n</li>\n<li>Notice:<ul>\n<li>如果设置<code>passive</code>为<code>true</code>, 则<code>listener</code>当中不可出现<code>preventDefault()</code>方法, 否则会报错.</li>\n</ul>\n</li>\n</ul>\n<p>e.g.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>\tevent.<span class=\"hljs-title function_\">preventDefault</span>();<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;scrolling&quot;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">false</span>&#125;);<br></code></pre></td></tr></table></figure></p>\n<ul>\n<li><code>wheel</code>事件的默认行为是滚动页面;</li>\n<li><code>event.preventDefault();</code>表示会阻止鼠标滚动带来的页面滚动;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;scrolling&quot;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>  event.<span class=\"hljs-title function_\">preventDefault</span>();<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;scrolling&quot;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>passive</code>的设置与<code>listener</code>内部矛盾, 将会报错.</p>\n</blockquote>\n<h5 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h5><p>用于有条件地移除事件监听器, 具体使用参见<a href=\"#可被移除的监听器\">可被移除的监听器</a>.</p>\n<h3 id=\"事件传播的阶段\"><a href=\"#事件传播的阶段\" class=\"headerlink\" title=\"事件传播的阶段\"></a>事件传播的阶段</h3><ol>\n<li>捕获阶段 $\\underline{capture\\space phase}$: 事件从根节点开始向目标节点传播;<blockquote>\n<p>e.g. 点击事件从document开始传播, 经过html,body直到目标元素.</p>\n</blockquote>\n</li>\n<li>目标阶段阶段 $\\underline{target\\space phase}$: 事件到达目标元素;</li>\n<li>冒泡阶段 $\\underline{bubble\\space phase}$: 事件从目标元素开始沿着DOM树向上传播.</li>\n</ol>\n<h4 id=\"Case\"><a href=\"#Case\" class=\"headerlink\" title=\"Case\"></a>Case</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent&quot;</span>&gt;</span><br>  parent<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;child&quot;</span>&gt;</span>child<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> parent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#parent&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> child = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#child&#x27;</span>);<br><br>parent.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;父元素 - 冒泡阶段&#x27;</span>);<br>&#125;);<br><br>parent.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;父元素 - 捕获阶段&#x27;</span>);<br>&#125;, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> &#125;);<br><br>child.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;子元素 - 目标阶段&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>上述的<code>child</code>被包裹在<code>parent</code>内部.</p>\n<ul>\n<li><p>当点击<code>parent</code>时将会显示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;父元素 - 捕获阶段&quot;</span><br><span class=\"hljs-string\">&quot;父元素 - 冒泡阶段&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;</p>\n</blockquote>\n</li>\n<li><p>当点击<code>child</code>时将会显示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;父元素 - 捕获阶段&quot;</span><br><span class=\"hljs-string\">&quot;子元素 - 目标阶段&quot;</span><br><span class=\"hljs-string\">&quot;父元素 - 冒泡阶段&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>child</code>是整个事件流的目标元素, 所以触发时机介于二者之间.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h4><ol>\n<li><p>如果将<code>div</code>换成<code>button</code>, 则点击<code>child</code>时可能只会显示 <strong>目标</strong> 阶段的输出.</p>\n<blockquote>\n<p>这是因为, 不同浏览器对于<code>button</code>元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段</p>\n</blockquote>\n</li>\n<li><p><code>event.stopPropagation();</code>加入该<del>咒语</del>代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">parent.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;父元素 - 捕获阶段&#x27;</span>);<br>    event.<span class=\"hljs-title function_\">stopPropagation</span>();<br>&#125;, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> &#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此时, 点击<code>parent</code>时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"可被移除的监听器\"><a href=\"#可被移除的监听器\" class=\"headerlink\" title=\"可被移除的监听器\"></a>可被移除的监听器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outside&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;t1&quot;</span>&gt;</span>one<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;t2&quot;</span>&gt;</span>two<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 为 table 添加可被移除的事件监听器</span><br><span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();<br><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;outside&quot;</span>);<br>el.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, modifyText, &#123; <span class=\"hljs-attr\">signal</span>: controller.<span class=\"hljs-property\">signal</span> &#125;);<br><br><span class=\"hljs-comment\">// 改变 t2 内容的函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> t2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;t2&quot;</span>);<br>  <span class=\"hljs-keyword\">if</span> (t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> === <span class=\"hljs-string\">&quot;three&quot;</span>) &#123;<br>    t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = <span class=\"hljs-string\">&quot;two&quot;</span>;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = <span class=\"hljs-string\">&quot;three&quot;</span>;<br>    controller.<span class=\"hljs-title function_\">abort</span>(); <span class=\"hljs-comment\">// 当值变为 &quot;three&quot; 后，移除监听器</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>AbortController</code>是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;</li>\n<li><code>signal</code>属性是一个<code>AbortSignal</code>对象, 用于控制监听器的移除;</li>\n<li><code>controller.abort()</code>方法用于移除监听器;</li>\n<li>当<code>t2</code>的内容变为”three”时, 移除监听器, 使得<code>modifyText</code>函数不再执行. 此后, 点击<code>t2</code>不会触发<code>modifyText</code>函数.</li>\n</ul>\n</blockquote>\n<p>具体的<strong>构造步骤:</strong></p>\n<ol>\n<li>创建一个<code>AbortController</code>实例: <code>const controller = new AbortController();</code></li>\n<li>在事件监听器内的参数中添加<code>signal: controller.signal</code>选项;</li>\n<li>在需要移除监听器的地方调用<code>controller.abort()</code>方法;</li>\n</ol>\n<hr>\n<p>我们也可以直接使用<code>removeEventListener()</code>方法来移除事件监听器:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">removeEventListener</span>(type, listener);<br><span class=\"hljs-title function_\">removeEventListener</span>(type, listener, options);<br><span class=\"hljs-title function_\">removeEventListener</span>(type, listener, useCapture);<br></code></pre></td></tr></table></figure></p>\n<ul>\n<li>Notices:<ul>\n<li>如果同一个对象上存在2个事件监听器, 且仅在<code>useCapture</code>参数存在差异, 那么需要先后2次调用<code>removeEventListener()</code>方法才能完全移除其事件监听器;</li>\n<li>如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;</li>\n<li><code>type</code>,<code>listener</code>参数必须完全匹配才能移除事件监听器;</li>\n<li>对于<code>options</code>参数:<ul>\n<li>字段相同: 一定可以移除;</li>\n<li>字段不同: 需要与默认值false匹配才可以移除.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">element.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span> &#125;);<br><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span> &#125;); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">false</span> &#125;); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> &#125;); <span class=\"hljs-comment\">// 失败</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">false</span> &#125;); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 失败</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>添加与移除</strong>的结合使用:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;body&quot;</span>);<br><span class=\"hljs-keyword\">const</span> clickTarget = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;click-target&quot;</span>);<br><span class=\"hljs-keyword\">const</span> mouseOverTarget = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;mouse-over-target&quot;</span>);<br><br><span class=\"hljs-keyword\">let</span> toggle = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">makeBackgroundYellow</span>(<span class=\"hljs-params\"></span>) &#123;<br>  body.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = toggle ? <span class=\"hljs-string\">&quot;white&quot;</span> : <span class=\"hljs-string\">&quot;yellow&quot;</span>;<br><br>  toggle = !toggle;<br>&#125;<br><br>clickTarget.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, makeBackgroundYellow, <span class=\"hljs-literal\">false</span>);<br><br>mouseOverTarget.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;mouseover&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  clickTarget.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, makeBackgroundYellow, <span class=\"hljs-literal\">false</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"使用匿名函数\"><a href=\"#使用匿名函数\" class=\"headerlink\" title=\"使用匿名函数\"></a>使用匿名函数</h3><p>在上述<code>html</code>例子下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 改变 t2 内容的函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-params\">new_text</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> t2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;t2&quot;</span>);<br>  t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = new_text;<br>&#125;<br><br><span class=\"hljs-comment\">// 用匿名函数为 table 添加事件监听器</span><br><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;outside&quot;</span>);<br>el.<span class=\"hljs-title function_\">addEventListener</span>(<br>  <span class=\"hljs-string\">&quot;click&quot;</span>,<br>  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-string\">&quot;four&quot;</span>);<br>  &#125;,<br>  <span class=\"hljs-literal\">false</span>,<br>);<br></code></pre></td></tr></table></figure><br>通过匿名函数封装代码, 将参数传入函数<code>modifyText</code>, 使得函数可以被调用.</p>\n<h3 id=\"使用箭头函数\"><a href=\"#使用箭头函数\" class=\"headerlink\" title=\"使用箭头函数\"></a>使用箭头函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 改变 t2 内容的函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-params\">new_text</span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> t2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;t2&quot;</span>);<br>  t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = new_text;<br>&#125;<br><br><span class=\"hljs-comment\">// 用箭头函数为 table 添加事件监听器</span><br><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;outside&quot;</span>);<br>el.<span class=\"hljs-title function_\">addEventListener</span>(<br>  <span class=\"hljs-string\">&quot;click&quot;</span>,<br>  <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-string\">&quot;four&quot;</span>);<br>  &#125;,<br>  <span class=\"hljs-literal\">false</span>,<br>);<br></code></pre></td></tr></table></figure>\n<p>通过<code>=&gt;&#123;&#125;</code>形式的箭头函数简化代码书写.</p>\n<hr>\n<h4 id=\"比较匿名与箭头\"><a href=\"#比较匿名与箭头\" class=\"headerlink\" title=\"比较匿名与箭头\"></a>比较匿名与箭头</h4><p>匿名函数与箭头函数在此处的应用基本相同, 但是在<code>this</code>的指向上有所不同:</p>\n<ul>\n<li><p>匿名函数与其他普通的JS函数:<code>this</code>指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为<code>undefined</code>);</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>); <span class=\"hljs-comment\">// 在非严格模式下，this 指向 window</span><br>&#125;<br><span class=\"hljs-title function_\">sayHello</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>箭头函数的<code>this</code>继承自外部作用域, 即调用该方法的对象.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;ZJU&quot;</span>,<br>  <span class=\"hljs-attr\">greet</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// this 指向 obj</span><br>  &#125;,<br>&#125;;<br>obj.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出：ZJU</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;ZJU&quot;</span>,<br>  <span class=\"hljs-attr\">getNameWithAnonymous</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>  &#125;,<br>  <span class=\"hljs-attr\">getNameWithArrow</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>  &#125;,<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> anonymousFn = obj.<span class=\"hljs-title function_\">getNameWithAnonymous</span>();<br><span class=\"hljs-title function_\">anonymousFn</span>(); <span class=\"hljs-comment\">// 输出：undefined</span><br><br><span class=\"hljs-keyword\">const</span> arrowFn = obj.<span class=\"hljs-title function_\">getNameWithArrow</span>();<br><span class=\"hljs-title function_\">arrowFn</span>(); <span class=\"hljs-comment\">// 输出：ZJU</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>进一步完善.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>$\\underline{事件对象}$ 在事件处理函数的内部, 以固定指定名称出现的参数, 例如<code>event</code>,<code>e</code>,<code>evt</code>. 它被自动传递给事件处理函数，以提供额外的功能和信息。</p>\n<p><code>e.target</code>始终是对 <strong>事件刚刚发生的元素</strong> 的引用</p>\n<h2 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new()\"></a>new()</h3><p>$\\underline{new}$ 用来创建对象实例的一个关键字. </p>\n<ul>\n<li>作用: <strong>调用</strong> 一个 构造函数, 并返回一个由该构造函数创建的对象实例.<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> constructor<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>)<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">arg1</span>)<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">arg1, arg2</span>)<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">arg1, arg2, <span class=\"hljs-comment\">/* …, */</span> argN</span>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即<code>new foo</code> 等价于 <code>new foo()</code>;</li>\n<li>构造函数内部的<code>this</code>将被绑定到新建的对象实例上;</li>\n</ol>\n<ul>\n<li>e.g. <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">color, brand</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = color;   <span class=\"hljs-comment\">// 将 color 赋值给新对象</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">brand</span> = brand;   <span class=\"hljs-comment\">// 将 brand 赋值给新对象</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> myCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;Toyota&quot;</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myCar.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// 输出 &quot;red&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myCar.<span class=\"hljs-property\">brand</span>); <span class=\"hljs-comment\">// 输出 &quot;Toyota&quot;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用<code>new()</code>的<strong>步骤</strong>:</p>\n<ol>\n<li>定义构造函数;</li>\n<li>使用<code>new()</code>并传入构造函数的参数;</li>\n<li>将返回的对象实例赋值给一个变量;</li>\n</ol>\n<h4 id=\"新增属性\"><a href=\"#新增属性\" class=\"headerlink\" title=\"新增属性\"></a>新增属性</h4><ul>\n<li><p>为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">car1.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;black&quot;</span> <span class=\"hljs-comment\">//为car1新增color属性</span><br></code></pre></td></tr></table></figure>\n<p><br></p>\n</li>\n<li><p>添加共享属性到构造函数中的<code>prototype</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br>car1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>();<br>car2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>();<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-title class_\">Car</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;原色&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br><br>car1.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;黑色&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;黑色&#x27;</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(car1).<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(car2).<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;黑色&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car2.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>此处的构造函数名为<code>Car</code>, 因此通过<code>Car.prototype</code>可以访问到构造函数的原型对象;</li>\n<li><code>getPrototypeOf</code> 表示获取对象的<strong>原型对象</strong>, 因此此处均为最初定义的 <strong>原色</strong>.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>函数通过<code>new.target</code>属性可以判断是否通过<code>new</code>关键字调用, 即构造.</p>\n<ul>\n<li>如果函数是正常调用, 则返回<code>undefined</code>;</li>\n<li><p>如果函数是通过<code>new</code>调用, 返回被调用的构造函数.</p>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">color</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">new</span>.<span class=\"hljs-property\">target</span>) &#123;<br>    <span class=\"hljs-comment\">// 以函数的形式被调用。</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;color&#125;</span>车`</span>;<br>  &#125;<br>  <span class=\"hljs-comment\">// 通过 new 被调用。</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = color;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;红&quot;</span>); <span class=\"hljs-comment\">// a 是“红车”</span><br><span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;红&quot;</span>); <span class=\"hljs-comment\">// b 是 `Car &#123; color: &quot;红&quot; &#125;`</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"对象类型与实例\"><a href=\"#对象类型与实例\" class=\"headerlink\" title=\"对象类型与实例\"></a>对象类型与实例</h4><p>$\\underline{对象类型}$ 通过构造函数可以创建一个对象类型:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">make, model, year</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">make</span> = make;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">model</span> = model;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">year</span> = year;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<p>$\\underline{对象实例}$ 通过使用<code>new()</code>方法, 由对象类型构造一个对象实例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;鹰牌&quot;</span>, <span class=\"hljs-string\">&quot;Talon TSi&quot;</span>, <span class=\"hljs-number\">1993</span>);<br></code></pre></td></tr></table></figure></p>\n<h4 id=\"类与new\"><a href=\"#类与new\" class=\"headerlink\" title=\"类与new\"></a>类与new</h4><p>在JS当中, 类 <strong>必须</strong> 通过<code>new</code>调用.</p>\n<blockquote>\n<p>可以优先阅读<a href=\"#类\">类相关的知识</a></p>\n</blockquote>\n<ul>\n<li>e.g. <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>  <span class=\"hljs-comment\">//构造函数</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>  &#125;<br>  <span class=\"hljs-comment\">//实例方法</span><br>  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`你好，我的名字是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n对于上述的类, 必须使用如下的调用方式:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> animal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-string\">&quot;Dog&quot;</span>); <span class=\"hljs-comment\">// 正常</span><br></code></pre></td></tr></table></figure>\n而下面这样类似于普通函数的调用方式会抛出错误:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-string\">&quot;Cat&quot;</span>); <span class=\"hljs-comment\">// TypeError:  Class constructor Animal cannot be invoked without &#x27;new&#x27;</span><br></code></pre></td></tr></table></figure>\n<br></li>\n</ul>\n<p>在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">animal.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出 &quot;你好，我的名字是Dog&quot;</span><br></code></pre></td></tr></table></figure></p>\n<hr>\n<p>下面给出与普通函数的区别:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">model</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">model</span> = model;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> car = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;Toyota&quot;</span>); <span class=\"hljs-comment\">// 正常</span><br><span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;Honda&quot;</span>); <span class=\"hljs-comment\">// 不抛出错误，但 this 会指向全局对象.</span><br><span class=\"hljs-keyword\">const</span> anotherCar = <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;cat&quot;</span>); <span class=\"hljs-comment\">//此时全局对象下的model值为 &quot;cat&quot;, 覆盖了上一行的定义.</span><br></code></pre></td></tr></table></figure><br>总结:</p>\n<ul>\n<li>以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;</li>\n<li>如果以new方法构造得到对象实例, 依旧正常.</li>\n</ul>\n<hr>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"默认行为\"><a href=\"#默认行为\" class=\"headerlink\" title=\"默认行为\"></a>默认行为</h2><p>$\\underline{默认行为}$ 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.</p>\n<ul>\n<li>比如存在以下的默认行为:<ul>\n<li>滚动事件：触摸屏上滑动手指，页面会滚动;</li>\n<li>拖拽文件到浏览器：浏览器会尝试加载文件;</li>\n<li>点击链接 <code>(&lt;a href=&quot;...&quot;&gt;)</code>：跳转到指定的 URL;</li>\n</ul>\n</li>\n</ul>\n<p>$\\underline{阻止默认行为}$ 使用 <code>event.preventDefault()</code> 方法可以阻止事件的默认行为.</p>\n<ul>\n<li><p>e.g: 阻止链接跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) &#123;<br>    event.<span class=\"hljs-title function_\">preventDefault</span>(); <span class=\"hljs-comment\">// 阻止点击链接时的默认行为</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;链接被点击，但没有跳转&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>作用:</p>\n<ul>\n<li>通过阻止默认行为, 可以实现自定义逻辑.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ul>\n<li><code>this</code>可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;</li>\n<li><code>this</code> 指向的是<strong>当前函数的调用者</strong>，而不是函数内部定义的变量.</li>\n</ul>\n<p><br></p>\n<ul>\n<li>e.g.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;b in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b in the function&quot;</span>; <span class=\"hljs-comment\">// 函数作用域</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span>); <span class=\"hljs-comment\">// 访问 this.b</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b outside of the func&quot;</span>;<br><br>obj.<span class=\"hljs-title function_\">f</span>();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此处的<code>f</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"函数上下文中的this\"><a href=\"#函数上下文中的this\" class=\"headerlink\" title=\"函数上下文中的this\"></a>函数上下文中的this</h3><ul>\n<li><code>this</code>参数的值取决于函数<strong>如何</strong>被调用, 而不是函数如何被定义.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 对象可以作为第一个参数传递给 &#x27;call&#x27; 或 &#x27;apply&#x27;，</span><br><span class=\"hljs-comment\">// 并且 &#x27;this&#x27; 将被绑定到它。</span><br><span class=\"hljs-keyword\">const</span> obj = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;Custom&quot;</span> &#125;;<br><br><span class=\"hljs-comment\">// 使用 var 声明的变量成为 &#x27;globalThis&#x27; 的属性。</span><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;Global&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">whatsThis</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// &#x27;this&#x27; 取决于函数如何被调用</span><br>&#125;<br><br><span class=\"hljs-title function_\">whatsThis</span>(); <span class=\"hljs-comment\">// &#x27;Global&#x27;; 在非严格模式下，&#x27;this&#x27; 参数默认为 &#x27;globalThis&#x27;</span><br>obj.<span class=\"hljs-property\">whatsThis</span> = whatsThis;<br>obj.<span class=\"hljs-title function_\">whatsThis</span>(); <span class=\"hljs-comment\">// &#x27;Custom&#x27;; &#x27;this&#x27; 参数被绑定到 obj</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>同样是调用函数<code>whatsThis()</code>, 但是<code>this</code>参数被绑定到不同的对象上, 导致返回值不同;</li>\n<li>在非严格模式下, <code>this</code>参数默认指向<code>globalThis</code>, 即全局对象;</li>\n<li>对于典型函数, <code>this</code>指向函数访问的对象;</li>\n</ol>\n<ul>\n<li><p>e.g. </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;b in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b in the function&quot;</span>; <span class=\"hljs-comment\">// 函数作用域</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span>); <span class=\"hljs-comment\">// 访问 this.b</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b outside of the func&quot;</span>;<br><br>obj.<span class=\"hljs-title function_\">f</span>();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此处<code>f</code>作为<code>obj</code>对象的方法被调用, 因此普通函数的<code>this</code>指向<code>obj</code>.</p>\n</blockquote>\n</li>\n<li><p>e.g. 直接调用的普通函数<code>this</code>指向全局:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> funcA = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> &#125;; <span class=\"hljs-comment\">// 普通函数，this 由调用方式决定</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">funcA</span>()); <span class=\"hljs-comment\">// 访问 this.a</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br>obj.<span class=\"hljs-title function_\">f</span>(); <span class=\"hljs-comment\">// &quot;a in the global&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>此处的<code>funcA</code>并没有类似于作为对象的属性调用(<code>obj.funcA()</code>), 因此其<code>this</code>指向全局作用域(<code>window</code>), 输出<code>undefined</code>, 而是直接调用的形式, 因此其<code>this</code>指向全局作用域.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"对this传值\"><a href=\"#对this传值\" class=\"headerlink\" title=\"对this传值\"></a>对this传值</h3><p>使用<code>call()</code>以及<code>apply()</code>方法可以将<code>this</code>绑定到其他对象上.</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><ul>\n<li>形式: <code>func.call(thisArg, arg1, arg2, ...)</code></li>\n<li>e.g:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">c, d</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span> + c + d;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> &#125;;<br><br><span class=\"hljs-comment\">// 第一个参数被绑定到隐式的 &#x27;this&#x27; 参数；</span><br><span class=\"hljs-comment\">// 剩余的参数被绑定到命名参数。</span><br>add.<span class=\"hljs-title function_\">call</span>(o, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 16</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><ul>\n<li>形式: <code>func.apply(thisArg, [argsArray])</code></li>\n<li>e.g:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">c, d</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span> + c + d;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> &#125;;<br><br><span class=\"hljs-comment\">// 第一个参数被绑定到隐式的 &#x27;this&#x27; 参数；</span><br><span class=\"hljs-comment\">// 第二个参数是一个数组，其成员被绑定到命名参数。</span><br>add.<span class=\"hljs-title function_\">apply</span>(o, [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]); <span class=\"hljs-comment\">// 34</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><ul>\n<li>形式: <code>f.bind(someObject)</code>;</li>\n<li><strong>作用</strong>: <ul>\n<li>创建一个新的函数(需要重新赋值), 具有与<code>f</code>相同的函数体和作用域;</li>\n<li>新函数的<code>this</code>被 <strong>永久地</strong> 绑定到<code>someObject</code>, 不随调用方式的变化而变化.</li>\n</ul>\n</li>\n<li><strong>限制</strong>: <ul>\n<li><code>bind</code>无法多次生效. 即对函数f<code>bind</code>得到的g, 无法继续用<code>bind</code>得到期望的h;</li>\n</ul>\n</li>\n<li><p>e.g. 多次<code>bind</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> g = f.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;azerty&quot;</span> &#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-keyword\">const</span> h = g.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;yoo&quot;</span> &#125;); <span class=\"hljs-comment\">// bind 只能生效一次！</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">37</span>, f, g, h &#125;;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(o.<span class=\"hljs-property\">a</span>, o.<span class=\"hljs-title function_\">f</span>(), o.<span class=\"hljs-title function_\">g</span>(), o.<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// 37 37 undefined undefined</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>由于<code>bind</code>只能对一个原始函数作用, 因此由f得到的g无法继续由<code>bind</code>绑定<code>this</code>得到期望的h, 此处h的<code>this</code>依旧是<code>&#123;b: &quot;azerty&quot;&#125;</code>, 因此在输出对象<code>a</code>时显示<code>undefined</code>;</li>\n<li><code>o.f()</code>的调用是普通函数的调用, 因此其<code>this</code>继承自对象<code>o</code>, 输出<code>37</code>;</li>\n</ul>\n</blockquote>\n</li>\n<li><p>e.g. 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> + <span class=\"hljs-string\">&quot; &quot;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">c</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> g = f.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;azerty&quot;</span> , <span class=\"hljs-attr\">c</span>:<span class=\"hljs-string\">&quot;ccc&quot;</span>&#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">// &quot;undefined ccc&quot;</span><br><br><span class=\"hljs-keyword\">const</span> h = g.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;yoo&quot;</span> &#125;); <span class=\"hljs-comment\">// bind 只能生效一次！</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// &quot;undefined ccc&quot;</span><br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">37</span>, f, g, h &#125;;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(o.<span class=\"hljs-property\">a</span>, o.<span class=\"hljs-title function_\">f</span>(), o.<span class=\"hljs-title function_\">g</span>(), o.<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// 37 37 azerty azerty</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>bind</code>绑定的<code>this</code>是永久覆盖, 而非简单叠加;</li>\n<li>由于<code>bind</code>绑定的<code>this</code>不随者调用方式的变化而变化, 因此即使处于对象<code>o</code>当中, <code>g</code>,<code>h</code>依旧不会输出<code>o</code>中的<code>a</code>.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"箭头函数中的this\"><a href=\"#箭头函数中的this\" class=\"headerlink\" title=\"箭头函数中的this\"></a>箭头函数中的this</h3><p>使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。</p>\n<p>普通函数:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>&#125;;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br> <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br> <span class=\"hljs-attr\">f</span>: foo<br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>()); <span class=\"hljs-comment\">// &quot;a in the obj&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p><code>call()</code>、 <code>apply()</code>、 <code>bind()</code> 无法改变箭头函数的<code>this</code>(但是call与apply的其他参数可以正常传递:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">foo</span> = (<span class=\"hljs-params\"></span>)=&gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br> <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br> <span class=\"hljs-attr\">f</span>: foo.<span class=\"hljs-title function_\">bind</span>(&#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">&quot;a in the bind&quot;</span>&#125;) <span class=\"hljs-comment\">// 显式绑定 this 到 obj, 但是无法生效</span><br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>()); <span class=\"hljs-comment\">// undefined</span><br><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>换成普通函数则输出<code>a in the obj</code>.</p>\n</blockquote>\n<ul>\n<li>全局作用域<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">foo1</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br>\t<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>\t<span class=\"hljs-attr\">f</span>: <span class=\"hljs-function\">()=&gt;</span> a<br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>());<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n<li>块级作用域: 由<code>let</code>或<code>const</code>声明的变量的作用域.(对于<code>var</code>无效);</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 1</span><br><br>&#123;<br>  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<p>Notices:</p>\n<ul>\n<li>对象本身并不会创建作用域, 只是一个键值对的集合;</li>\n<li>箭头函数也不会创建自己的作用域, 而是 <strong>继承</strong> 外层作用域中的<code>this</code>;</li>\n</ul>\n<h3 id=\"变量与作用域\"><a href=\"#变量与作用域\" class=\"headerlink\" title=\"变量与作用域\"></a>变量与作用域</h3><ul>\n<li><code>var</code>在全局作用域中声明时会成为 <strong>全局对象</strong> (<code>window</code>或<code>global</code>)的属性;</li>\n<li><code>let</code>和<code>const</code>即使在全局作用域中声明, 也不会成为全局对象的属性;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;1&quot;</span>;<br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-string\">&quot;2&quot;</span>;<br><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// &quot;1&quot;</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">b</span>; <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>因此, 建议在全局作用域中不要使用<code>var</code>声明变量, 而使用<code>let</code>或<code>const</code>声明变量. 从而避免导致意外的覆盖和冲突.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"函数与作用域\"><a href=\"#函数与作用域\" class=\"headerlink\" title=\"函数与作用域\"></a>函数与作用域</h3><h4 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h4><p>普通函数和匿名函数的作用域继承自其定义时的作用域.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">insideObj</span>: &#123;<br>        <span class=\"hljs-attr\">g</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// 普通函数，this 动态绑定到 insideObj</span><br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// 普通函数，this 动态绑定到 obj</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>());        <span class=\"hljs-comment\">// &quot;a in the obj&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">insideObj</span>.<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">// undefined，因为 insideObj 中没有 a</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"箭头函数-1\"><a href=\"#箭头函数-1\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>e.g. <strong>箭头函数继承外层作用域</strong>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">insideObj</span>: &#123;<br>        <span class=\"hljs-attr\">g</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span><br>    &#125;,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span><br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>());        <span class=\"hljs-comment\">// &quot;a in the global&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">insideObj</span>.<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">//&quot;a in the global&quot;</span><br></code></pre></td></tr></table></figure><br>由于对象不会创建作用域, 因此此处的箭头函数的<code>this</code>继承了外层作用域(window)的<code>this</code>, 且<code>var</code>创建的变量存在于全局作用域中.</p>\n<h2 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h2><p>$\\underline{语法糖}$ 一种让代码更简洁、更易读的语法形式.</p>\n<ul>\n<li>本质上没有增加语言的功能, 而是对已有功能的 <strong>包装</strong> 或者优化;</li>\n<li><strong>可读性提升</strong>: <del>让代码更填</del> 使得代码更加容易理解和书写;</li>\n<li><strong>底层实现</strong>: 实质上依旧用基础的语法实现.</li>\n</ul>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>类 <code>class</code> 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承<code>prototype</code>的封装.</p>\n<p>使用<code>class</code>的写法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>);<br>person.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出：Hello, my name is Alice</span><br></code></pre></td></tr></table></figure></p>\n<p>等价的原型写法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">greet</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>);<br>person.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出：Hello, my name is Alice</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数-2\"><a href=\"#箭头函数-2\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.</p>\n<ul>\n<li>e.g.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 使用箭头函数</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; a + b;<br><br><span class=\"hljs-comment\">// 等价的普通函数</span><br><span class=\"hljs-keyword\">const</span> add = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h3><p>$\\underline{结构赋值}$ 手动提取<strong>对象</strong>属性的语法糖.</p>\n<ul>\n<li><p>使用结构赋值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Zhuo&quot;</span>, <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br><br><span class=\"hljs-keyword\">const</span> &#123;name, gender&#125; = person;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>等价的原型写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Zhuo&quot;</span>, <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br><br><span class=\"hljs-keyword\">const</span> name = person.<span class=\"hljs-property\">name</span>;<br><span class=\"hljs-keyword\">const</span> gender = person.<span class=\"hljs-property\">gender</span>;<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"赋值规则\"><a href=\"#赋值规则\" class=\"headerlink\" title=\"赋值规则\"></a>赋值规则</h4><p>结构赋值时, 基于 <strong>属性名匹配</strong> 而非顺序.<br>因此, 对象结构的<code>&#123;&#125;</code>内部属性必须和 <strong>对象的属性名</strong> 相对应.</p>\n<p><strong>错误</strong>的示例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> &#125;;<br><span class=\"hljs-keyword\">const</span> &#123; a, b &#125; = person;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// 输出：undefined</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// 输出：undefined</span><br></code></pre></td></tr></table></figure></p>\n<p><strong>重命名属性</strong>的写法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> &#125;;<br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">name</span>: a, <span class=\"hljs-attr\">age</span>: b &#125; = person;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// 输出：Alice</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// 输出：25</span><br></code></pre></td></tr></table></figure></p>\n<p><strong>手动赋值</strong>: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span> &#125;;<br><span class=\"hljs-keyword\">const</span> &#123; name, age = <span class=\"hljs-number\">30</span> &#125; = person;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name); <span class=\"hljs-comment\">// 输出：Alice</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(age);  <span class=\"hljs-comment\">// 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"数组的结构赋值\"><a href=\"#数组的结构赋值\" class=\"headerlink\" title=\"数组的结构赋值\"></a>数组的结构赋值</h4><p>上述讨论的结构赋值都是对 <strong>对象</strong> 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— <strong>基于顺序</strong>赋值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-number\">25</span>];<br><span class=\"hljs-keyword\">const</span> [a, b] = arr;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// 输出：Alice</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// 输出：25</span><br></code></pre></td></tr></table></figure></p>\n","more":"<blockquote>\n<p>JavaScript是一种轻量级、解释型、面向对象的编程语言. 作为前端三件套之一以及TS的基础, JS语言细节十分难嚼. 本文在「<strong>料理的加护</strong>」下, 尽可能将JS处理得更加<strong>可口</strong>一些)<br><img src=\"/img/料理的加护.jpg\" width = \"35%\"></p>\n</blockquote>\n<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logName</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myName);<br>&#125;<br><br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Chris&quot;</span><br><br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Aniya&quot;</span>;<br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>而<code>let</code>只能声明一次:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br>myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myAge = <span class=\"hljs-number\">20</span> ;<span class=\"hljs-comment\">// 数字</span><br><span class=\"hljs-keyword\">let</span> dolphinGoodbye = <span class=\"hljs-string\">&quot;So long and thanks for all the fish&quot;</span>; <span class=\"hljs-comment\">// 字符串</span><br><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">6</span> &lt; <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//boolean</span><br><br><span class=\"hljs-comment\">//数组类型</span><br><span class=\"hljs-keyword\">let</span> myNameArray = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Jim&quot;</span>];<br><span class=\"hljs-keyword\">let</span> myNumberArray = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>];<br><br><span class=\"hljs-comment\">//对象类型</span><br><span class=\"hljs-keyword\">let</span> dog = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spot&quot;</span>, <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNumber = <span class=\"hljs-string\">&quot;500&quot;</span>;<br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class=\"hljs-number\">500</span>; <br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>$\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">exampleFunction</span>();<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;函数内&quot;</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greeding</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;my friend&quot;</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">//Hello, my friend!</span><br><span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">&quot;world&quot;</span>); <span class=\"hljs-comment\">//Hello, world!</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>事件处理函数的默认接受值是<code>event</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span><br>onclick<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>nothing here<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>)</span><br><span class=\"language-javascript\">para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>)</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">btn.<span class=\"hljs-property\">onclick</span> = click;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>)&#123;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)</span><br><span class=\"language-javascript\">  para.<span class=\"hljs-property\">textContent</span> = string;</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>上述的<code>btn</code>在点击之后调用函数<code>click</code>, 该函数需要一个参数<code>string</code>, 由于<code>btn.onclick = click;</code>的绑定方式, 我们无法指定传参的值, 因此点击之后的<code>para</code>的内容显示为: <code>[object PointerEvent]</code>;</li>\n<li><code>textContent</code>是属性而非方法, 因此采用赋值实现;</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">btn.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">string</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clicked!&quot;</span>)<br>  para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;You have clicked the button!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>将上述的绑定方式如此改写, 可以在<code>btn</code>外对<code>string</code>进行赋值, 然后点击按钮可以传入指定参数供后续处理.</p>\n</blockquote>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 匿名函数</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logKey</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> originals = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-keyword\">const</span> doubled = originals.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item * <span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled); <span class=\"hljs-comment\">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleItem</span>(<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;textBox&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> textBox = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#textBox&quot;</span>);<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#output&quot;</span>);<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  output.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;first.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;second.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>  greeting();<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数字和操作符\"><a href=\"#数字和操作符\" class=\"headerlink\" title=\"数字和操作符\"></a>数字和操作符</h3><p>大部分与C语言相同, 概括需要注意的差异:</p>\n<ul>\n<li>JS当中只有一种数字类型 — <code>number</code>, 对于整型或者浮点数的初始化得到的量, 由<code>typeof</code>均得到<code>number</code>;</li>\n<li>算术运算符: 求幂为<code>**</code>;</li>\n<li>常量无法使用自增或自减,<del>好像也是C语言的 忘了</del></li>\n<li><code>===</code>表示严格等于, <code>!==</code>表示不等于;<blockquote>\n<p>同时存在<code>==</code>和<code>!=</code>来判断是否相等, 但是它们只是测试 <strong>值</strong> 是否相等, 会忽略数据类型的差异; 而上述的比较会同时比较数据类型. 因此推荐使用<code>===</code>和<code>!==</code>来避免类型不一致的错误.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>创建字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myString = <span class=\"hljs-string\">&quot;A string&quot;</span>;<br><span class=\"hljs-keyword\">const</span> constString = myString;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(constString);<br><span class=\"hljs-comment\">//A string</span><br></code></pre></td></tr></table></figure><br>可以使用单引号,双引号和<strong>反引号</strong>来包裹字符串, 但是必须确保字符串的开头和结尾使用相同的字符:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> single = <span class=\"hljs-string\">&#x27;单引号&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> double = <span class=\"hljs-string\">&quot;双引号&quot;</span>;<br><span class=\"hljs-keyword\">const</span> backtick = <span class=\"hljs-string\">`反引号`</span>;<br></code></pre></td></tr></table></figure></p>\n<p>反引号包裹的字符串称为$\\underline{模板字符串}$, 大多数情况下,它与其他两种字符串类似, 但是具有特殊的属性:</p>\n<ul>\n<li>可以嵌入 <strong>JavaScript</strong>;</li>\n<li>可以声明<strong>多行</strong>的模板字面量.</li>\n</ul>\n<h4 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h4><p>字符串的拼接有两种方法, 我们先介绍上述提到的模板字符串中的 $\\underline{串联法}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">`你好，<span class=\"hljs-subst\">$&#123;name&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在模板字面量中用<code>$&#123;&#125;</code>包装JS的变量或者表达式.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> one = <span class=\"hljs-string\">&quot;你好，&quot;</span>;<br><span class=\"hljs-keyword\">const</span> two = <span class=\"hljs-string\">&quot;请问最近如何？&quot;</span>;<br><span class=\"hljs-keyword\">const</span> joined = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;one&#125;</span><span class=\"hljs-subst\">$&#123;two&#125;</span>`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(joined); <span class=\"hljs-comment\">// &quot;你好，请问最近如何？&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>连接2个变量.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> song = <span class=\"hljs-string\">&quot;青花瓷&quot;</span>;<br><span class=\"hljs-keyword\">const</span> score = <span class=\"hljs-number\">9</span>;<br><span class=\"hljs-keyword\">const</span> highestScore = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-string\">`我喜欢歌曲《<span class=\"hljs-subst\">$&#123;song&#125;</span>》。我给它打了 <span class=\"hljs-subst\">$&#123;</span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">  (score / highestScore) * <span class=\"hljs-number\">100</span></span></span><br><span class=\"hljs-subst\"><span class=\"hljs-string\">&#125;</span> 分。`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(output); <span class=\"hljs-comment\">// &quot;我喜欢歌曲《青花瓷》。我给它打了 90 分。&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在模板字面量的<code>$&#123;&#125;</code>内部包含表达式.</p>\n</blockquote>\n<p><br><br>除此之外,对于普通的字符串(使用单引号或者双引号得到的字符串), 我们可以使用<code>+</code>直接连接:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&quot;你好&quot;</span>;<br><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;克里斯&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(greeting + <span class=\"hljs-string\">&quot;，&quot;</span> + name); <span class=\"hljs-comment\">// &quot;你好，克里斯&quot;</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>模板字符串会<strong>保留</strong>源代码中的换行符，因此可以编写跨越多行的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">`终于有一天，</span><br><span class=\"hljs-string\">你知道了必须做的事情，而且开始……`</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<p>如果希望用普通的字符串得到等效的输出, 必须在字符串中包含<code>\\n</code>,而非直接跨行:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> newline = <span class=\"hljs-string\">&quot;终于有一天，\\n你知道了必须做的事情，而且开始……&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newline);<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">终于有一天，</span><br><span class=\"hljs-comment\">你知道了必须做的事情，而且开始……</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"显示引号\"><a href=\"#显示引号\" class=\"headerlink\" title=\"显示引号\"></a>显示引号</h4><ol>\n<li>$\\underline{转义}$  通过在符号前加上反斜杠<code>\\</code>, 可以转义字符串中的特殊字符,包括字符串中的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> bigmouth = <span class=\"hljs-string\">&#x27;I\\&#x27;ve got no right to take my place…&#x27;</span>;<br></code></pre></td></tr></table></figure></li>\n<li>换用其他字符: 在字面量内用不同于包裹字符串的引号:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> goodQuotes1 = <span class=\"hljs-string\">&#x27;She said &quot;I think so!&quot;&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> goodQuotes2 = <span class=\"hljs-string\">`She said &quot;I&#x27;m not going in there!&quot;`</span>;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p>对于字符串对象实例,其常用的方法:</p>\n<ul>\n<li><code>.length</code>: 获取字符串的长度;</li>\n<li><code>[]</code>: 返回字符串中对应索引的字符, 索引同样从<code>0</code>开始;</li>\n<li><code>.indexOf(&quot;&quot;)</code>: 查找子字符串<ul>\n<li><strong>input</strong>: 希望查找的子字符串;</li>\n<li><strong>output</strong>: 子字符串开始的下标(如果不存在则返回<code>-1</code>);</li>\n</ul>\n</li>\n<li><code>.slice(indedxStart, indexEnd)</code>: 截取字符串<ul>\n<li><strong>input</strong>: 起始下标, 结束下标(不包含该下标). 如果不存在结束下标则提取之后剩余的全部字符;</li>\n<li><strong>output</strong>: 截取的子字符串;</li>\n</ul>\n</li>\n</ul>\n<p>更多的<code>slice</code>知识:</p>\n<ol>\n<li>$\\underline{标准化负值}$ 如果索引是个负数, 取<code>index+str.length</code>进行标准化;</li>\n<li>如果<code>indexStart</code>大于<code>str.length</code>, 返回空字符串;</li>\n<li>如果标准化负值之后, <code>indexStart</code>大于<code>indexEnd</code>, 也返回空字符串;</li>\n</ol>\n<ul>\n<li><code>.toLowerCase()</code> &amp; <code>.toUpperCase()</code>: 转换字符串中的所有字符为小写或大写;</li>\n<li><code>.replace(original, new)</code>: 替换字符串中<code>original</code>子字符串为<code>new</code>;<blockquote>\n<p>此时不会直接改变原字符串的值, 而是返回一个修改之后的字符串. 因此, 如果想要将原来的值替换, 需要用上述方法得到的值去赋值原来的字符串.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Cases\"><a href=\"#Cases\" class=\"headerlink\" title=\"Cases\"></a>Cases</h4><p>利用 <strong>indexOf</strong> 和 <strong>slice</strong> 方法, 获取新字符串:</p>\n<ul>\n<li><strong>input</strong>: <code>&quot;str3&quot;</code>三位长字符串+<code>&quot;...&quot;</code>(无关字符串)+<code>&quot;;&quot;</code>+<code>strLast</code>(剩余字符串);</li>\n<li><strong>output</strong>: <code>&quot;str3&quot;+&quot;;&quot;+strLast</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> stations = [<span class=\"hljs-string\">&#x27;MAN675847583748sjt567654;Manchester Piccadilly&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;GNF576746573fhdg4737dh4;Greenfield&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;LIV5hg65hd737456236dch46dg4;Liverpool Lime Street&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;SYB4f65hf75f736463;Stalybridge&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; stations.<span class=\"hljs-property\">length</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">var</span> input = stations[i];<br>    <span class=\"hljs-keyword\">var</span> str3 = input.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);<br>    <span class=\"hljs-keyword\">var</span> strLast = input.<span class=\"hljs-title function_\">slice</span>(input.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;;&quot;</span>)+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//indexOf获取;位置</span><br>    <span class=\"hljs-keyword\">var</span> output = str3 + <span class=\"hljs-string\">&quot;;&quot;</span> + strLast;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<p>通过 <strong>indexOf</strong> 根据子字符串筛选字符串数组:</p>\n<ul>\n<li><strong>input</strong>: 可能包含 <em>Christmas</em> 的字符串数组;</li>\n<li><strong>output</strong>: 包含 <em>Christmas</em> 的字符串数组;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.output ul&#x27;</span>);<br>list.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> greetings = [<span class=\"hljs-string\">&#x27;Happy Birthday!&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Merry Christmas my love&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;A happy Christmas to all the family&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;You\\&#x27;re all I want for Christmas&#x27;</span>,<br>                 <span class=\"hljs-string\">&#x27;Get well soon&#x27;</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; greetings.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  <span class=\"hljs-keyword\">var</span> input = greetings[i];<br>  <span class=\"hljs-keyword\">if</span>(greetings[i].<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;Christmas&#x27;</span>) !== -<span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> result = input;<br>    <span class=\"hljs-keyword\">var</span> listItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br>    listItem.<span class=\"hljs-property\">textContent</span> = result;<br>    list.<span class=\"hljs-title function_\">appendChild</span>(listItem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"数字与字符串\"><a href=\"#数字与字符串\" class=\"headerlink\" title=\"数字与字符串\"></a>数字与字符串</h3><h4 id=\"相互转换\"><a href=\"#相互转换\" class=\"headerlink\" title=\"相互转换\"></a>相互转换</h4><p>非常神奇, 在JS当中, 数字和字符串可以直接通过函数<code>Number()</code>和<code>String()</code>进行转换, 与C语言不同.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myString = <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-keyword\">const</span> myNum = <span class=\"hljs-title class_\">Number</span>(myString);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myNum);<br><span class=\"hljs-comment\">// number</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myNum);<br><span class=\"hljs-comment\">// 123</span><br></code></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myNum2 = <span class=\"hljs-number\">123</span>;<br><span class=\"hljs-keyword\">const</span> myString2 = <span class=\"hljs-title class_\">String</span>(myNum2);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> myString2);<br><span class=\"hljs-comment\">// string</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myString2);<br><span class=\"hljs-comment\">// &quot;123&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对于浮点数同样成立.</p>\n</blockquote>\n<h4 id=\"前后拼接\"><a href=\"#前后拼接\" class=\"headerlink\" title=\"前后拼接\"></a>前后拼接</h4><p>使用<code>+</code>将字符串类型和数字类型的变量or常量直接拼接, 得到的是以空格相隔的字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Front &quot;</span>;<br><span class=\"hljs-keyword\">const</span> number = <span class=\"hljs-number\">242</span>;<br><span class=\"hljs-keyword\">const</span> combine = name + number;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(combine); <span class=\"hljs-comment\">//Front 242</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">typeof</span>(combine));  <span class=\"hljs-comment\">//string</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ol>\n<li>存储任意类型元素—字符串，数字，对象，变量，<strong>另一个数组</strong>;</li>\n<li>可以 <strong>混合</strong> 元素类型:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> random = [<span class=\"hljs-string\">&quot;tree&quot;</span>, <span class=\"hljs-number\">795</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]];<br></code></pre></td></tr></table></figure></li>\n<li>像访问字符串一样, 利用索引访问数组元素;</li>\n<li>$\\underline{多维数组}$ 包含数组的数组结构称为~</li>\n</ol>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h4><ul>\n<li>作用: 将一个字符串根据给定的字符分隔为字符串数组;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myData = <span class=\"hljs-string\">&quot;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&quot;</span>;<br><span class=\"hljs-keyword\">let</span> myArray = myData.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray);<br> <span class=\"hljs-comment\">// [&quot;Manchester&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;, &quot;Leeds&quot;, &quot;Carlisle&quot;]</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>split</code>的反向操作, 给出分隔符号, 将数组的字符串拼接成一个字符串:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNewString = myArray.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>myNewString;<br></code></pre></td></tr></table></figure></p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>与<code>join</code>方法相似, 但是无法自定义分隔符, 默认为<code>,</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> dogNames = [<span class=\"hljs-string\">&quot;Rocket&quot;</span>, <span class=\"hljs-string\">&quot;Flash&quot;</span>, <span class=\"hljs-string\">&quot;Bella&quot;</span>, <span class=\"hljs-string\">&quot;Slugger&quot;</span>];<br>dogNames.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">//Rocket,Flash,Bella,Slugger</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"push-amp-pop\"><a href=\"#push-amp-pop\" class=\"headerlink\" title=\"push &amp; pop\"></a>push &amp; pop</h4><p><code>push()</code>方法可以将1或多个元素添加到数组的 <strong>末尾</strong>:</p>\n<ol>\n<li>将会直接改写原来的数组,不需要重新赋值;</li>\n<li>该方法具有返回值, 且返回的是更新之后的数组长度(包含元素的个数);<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">let</span> newLength = myArray.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&quot;string&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, &quot;string&quot;]</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newLength); <span class=\"hljs-comment\">// 6</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用<code>.pop()</code>从数组中删除最后一个元素:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myArray.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">//&quot;string&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></p>\n<ol>\n<li>方法调用返回值就是删除的元素本身;</li>\n<li>直接对原始数组操作并赋值, 不需要另外的赋值操作;</li>\n</ol>\n<blockquote>\n<p>shift &amp; unshift:<br>在功能上分别与<code>push</code>和<code>pop</code>相同, 但是作用于数组的开始位置.</p>\n</blockquote>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><p>JS的条件语句与C语言十分相似, 在此仅给出官方文档的一些例子:</p>\n<h3 id=\"天气预报\"><a href=\"#天气预报\" class=\"headerlink\" title=\"天气预报\"></a>天气预报</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span>选择今天的天气：&lt;/label<br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;weather&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>--作出选择--<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;sunny&quot;</span>&gt;</span>晴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;rainy&quot;</span>&gt;</span>雨天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;snowing&quot;</span>&gt;</span>雪天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;overcast&quot;</span>&gt;</span>阴天<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lable</code>当中的<code>for</code>标签与<code>select</code>标签的<code>id</code>属性对应, 用于关联两个标签.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> select = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;select&quot;</span>);<br><span class=\"hljs-keyword\">const</span> para = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>);<br><br>select.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;change&quot;</span>, setWeather);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setWeather</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> choice = select.<span class=\"hljs-property\">value</span>;<br><br>  <span class=\"hljs-keyword\">switch</span> (choice) &#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;sunny&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;阳光明媚。穿上短裤吧！去海滩，或公园，吃个冰淇淋。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;rainy&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;外面下着雨；带上雨衣和雨伞，不要在外面呆太久。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;snowing&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;大雪纷飞，天寒地冻！最好呆在家里喝杯热巧克力，或者去堆个雪人。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;overcast&quot;</span>:<br>      para.<span class=\"hljs-property\">textContent</span> =<br>        <span class=\"hljs-string\">&quot;虽然没有下雨，但天空灰蒙蒙的，随时都可能变天，所以要带一件雨衣以防万一。&quot;</span>;<br>      <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-attr\">default</span>:<br>      para.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>通过<code>querySelector</code>方法获取<code>select</code>和<code>p</code>标签;</li>\n<li>然后为<code>select</code>标签添加事件监听器, 当内容改变时触发 <strong>change</strong> 事件, 同时调用<code>setWeather</code>函数;</li>\n<li>进而通过 <strong>switch</strong> 语句处理不同天气的情况, 并设置相应的文字内容;<br>在线网页示例:<a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html\">simple-switch</a></li>\n</ol>\n</blockquote>\n<h2 id=\"事件介绍\"><a href=\"#事件介绍\" class=\"headerlink\" title=\"事件介绍\"></a>事件介绍</h2><p>什么是$\\underline{事件}$? </p>\n<ul>\n<li>用户选择、点击或者光标悬停在某一元素;</li>\n<li>用户在键盘中按下某个按键;</li>\n<li>网页结束加载;</li>\n<li>…</li>\n</ul>\n<p>$\\underline{事件处理器}$ 为了响应事件, 我们需要编写一份JS代码块用于在事件发生之后运行. 这样的代码块称之为~.</p>\n<h3 id=\"处理点击事件\"><a href=\"#处理点击事件\" class=\"headerlink\" title=\"处理点击事件\"></a>处理点击事件</h3><p>以点击事件为例, 介绍html与js如何进行事件处理的交互:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span> 改变颜色 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">random</span>(<span class=\"hljs-params\">number</span>)&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*(number+<span class=\"hljs-number\">1</span>));<br>  <br>&#125;<br><br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">()=&gt;</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> rndCol = <span class=\"hljs-string\">`rgb(<span class=\"hljs-subst\">$&#123;random(<span class=\"hljs-number\">255</span>)&#125;</span>,<span class=\"hljs-subst\">$&#123;random(<span class=\"hljs-number\">255</span>)&#125;</span>,<span class=\"hljs-subst\">$&#123;random(<span class=\"hljs-number\">255</span>)&#125;</span>)`</span>;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = rndCol;<br>&#125;)<br></code></pre></td></tr></table></figure></p>\n<ol>\n<li><code>Math.random()</code>方法生成一个介于[0,1)之间的随机数;</li>\n<li><code>*(number+1)</code>之后利用向下取整的方法<code>Math.floor()</code>将其转换为整数, 范围为[0,number];<blockquote>\n<p>假如输入的number为<code>4</code>, 则<code>random(4)</code>的结果可能为<code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>中的一个;<br>假设输入的number为<code>3.6</code>, 则输出的结果还是0~4中的整数.</p>\n</blockquote>\n</li>\n<li><code>rndCol = `rgb($&#123;random(255)&#125;,$&#123;random(255)&#125;,$&#123;random(255)&#125;)</code> 采用的是在$\\underline{模板字符串}$内部使用<code>$&#123;&#125;</code>调用函数变量的方法.</li>\n</ol>\n<h3 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener()\"></a>addEventListener()</h3><p><code>adEventListener</code>方法已经在之前的例子中出现过, 现在具体介绍其作用和语法.</p>\n<p>通过<code>EventTarget.adddEventListener()</code>的方法, 将指定的监听器注册到对象上, 具体的语法如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">addEventListener</span>(type, listener);<br><span class=\"hljs-title function_\">addEventListener</span>(type, listener, options);<br><span class=\"hljs-title function_\">addEventListener</span>(type, listener, useCapture);<br></code></pre></td></tr></table></figure></p>\n<ul>\n<li><code>type</code>: 事件类型, 如<code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>keydown</code>, <code>keyup</code>等;</li>\n<li><code>listener</code>: 事件处理函数, 该函数将在事件发生时被调用;<ul>\n<li>包括 <strong>回调函数</strong> 以及 实现了 <strong>EventListener 接口的对象</strong>;</li>\n</ul>\n</li>\n<li><code>options</code>: 可选参数, 用于配置事件监听器的行为;<blockquote>\n<p>可以为单个事件添加多个事件监听器.</p>\n<h4 id=\"listener\"><a href=\"#listener\" class=\"headerlink\" title=\"listener\"></a>listener</h4></blockquote>\n</li>\n</ul>\n<p>$\\underline{回调函数}$ 简单来说, ~指的是当某个事件发生时被调用的一段代码.</p>\n<ul>\n<li>是一个函数, 但是只有等到特定的事件发生时才会执行.</li>\n</ul>\n<p>$\\underline{实现了 EventListener 接口的对象}$ </p>\n<ul>\n<li><strong>特点</strong>: 以对象作为listener, 对象中具有名为<code>handleEvent()</code>的方法;</li>\n<li><strong>作用</strong>: <ul>\n<li>将事件处理封装到一个对象当中, 可以更好地组织代码;</li>\n<li>便于在对象中保存更多的状态信息;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> listenerObject = &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-title function_\">handleEvent</span>(<span class=\"hljs-params\">event</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>++;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`事件类型是：<span class=\"hljs-subst\">$&#123;event.type&#125;</span>，已触发 <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.count&#125;</span> 次`</span>);<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;button&#x27;</span>);<br>button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, listenerObject);<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a>options</h4><p>一个指定有关 listener 属性的可选参数对象.</p>\n<h5 id=\"Capture\"><a href=\"#Capture\" class=\"headerlink\" title=\"Capture\"></a>Capture</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发;</li>\n<li>默认为false, 表示只有在冒泡阶段才触发.</li>\n</ul>\n</li>\n<li><p>区别:</p>\n<ul>\n<li><code>capture</code>和<code>useCapture</code>实际上指的都是 <strong>监听器是否在捕获阶段触发</strong> 的布尔值.<blockquote>\n<p>捕获阶段: 从最外层的元素开始, 逐层向内捕获事件, 直到事件到达目标元素.</p>\n</blockquote>\n</li>\n<li>后来DOM的规范更新时引入了<code>options</code>参数, 此后<code>capture</code>取代了<code>useCapture</code>的作用.</li>\n<li>如果<code>addEventListener</code>的第三个参数不指定对象, 只有布尔值, 那么默认是在设置<code>useCapture</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>可以先查看<a href=\"#事件传播的阶段\">事件传播的阶段</a>来辅助理解不同的阶段.</p>\n</blockquote>\n<h5 id=\"Once\"><a href=\"#Once\" class=\"headerlink\" title=\"Once\"></a>Once</h5><ul>\n<li>含义:<ul>\n<li>一个布尔值，表示 listener 在添加之后最多只调用一次;</li>\n<li>默认为false, 表示可以多次调用.</li>\n</ul>\n</li>\n<li>e.g.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">child.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;子元素 - 目标阶段&#x27;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">once</span>: <span class=\"hljs-literal\">true</span>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>once</code>属性被设置为<code>true</code>, 当调用一次之后事件监听器会被自动清除. 因此只有第一次的点击才会console.</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"Passive\"><a href=\"#Passive\" class=\"headerlink\" title=\"Passive\"></a>Passive</h5><ul>\n<li><p>含义:</p>\n<ul>\n<li>一个布尔值，设置为 true 时，表示 listener 永远不会调用 preventDefault();</li>\n</ul>\n</li>\n<li><p>作用:</p>\n<ul>\n<li>明确不会在<code>listener</code>中不会调用<code>preventDefault()</code>方法, 即不会阻止浏览器的<a href=\"#默认行为\">默认行为</a>;</li>\n<li>此时, 浏览器可以直接渲染默认行为的结果, 无需等待<code>listener</code>的执行与默认行为的检查, 从而提高了性能.</li>\n</ul>\n</li>\n<li>Notice:<ul>\n<li>如果设置<code>passive</code>为<code>true</code>, 则<code>listener</code>当中不可出现<code>preventDefault()</code>方法, 否则会报错.</li>\n</ul>\n</li>\n</ul>\n<p>e.g.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>\tevent.<span class=\"hljs-title function_\">preventDefault</span>();<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;scrolling&quot;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">false</span>&#125;);<br></code></pre></td></tr></table></figure></p>\n<ul>\n<li><code>wheel</code>事件的默认行为是滚动页面;</li>\n<li><code>event.preventDefault();</code>表示会阻止鼠标滚动带来的页面滚动;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;scrolling&quot;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>明确不会阻止默认行为, 浏览器可以直接渲染页面的滚动效果, 因此提高了显示的效果.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>  event.<span class=\"hljs-title function_\">preventDefault</span>();<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;scrolling&quot;</span>);<br>&#125;,&#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>passive</code>的设置与<code>listener</code>内部矛盾, 将会报错.</p>\n</blockquote>\n<h5 id=\"Signal\"><a href=\"#Signal\" class=\"headerlink\" title=\"Signal\"></a>Signal</h5><p>用于有条件地移除事件监听器, 具体使用参见<a href=\"#可被移除的监听器\">可被移除的监听器</a>.</p>\n<h3 id=\"事件传播的阶段\"><a href=\"#事件传播的阶段\" class=\"headerlink\" title=\"事件传播的阶段\"></a>事件传播的阶段</h3><ol>\n<li>捕获阶段 $\\underline{capture\\space phase}$: 事件从根节点开始向目标节点传播;<blockquote>\n<p>e.g. 点击事件从document开始传播, 经过html,body直到目标元素.</p>\n</blockquote>\n</li>\n<li>目标阶段阶段 $\\underline{target\\space phase}$: 事件到达目标元素;</li>\n<li>冒泡阶段 $\\underline{bubble\\space phase}$: 事件从目标元素开始沿着DOM树向上传播.</li>\n</ol>\n<h4 id=\"Case\"><a href=\"#Case\" class=\"headerlink\" title=\"Case\"></a>Case</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent&quot;</span>&gt;</span><br>  parent<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;child&quot;</span>&gt;</span>child<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> parent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#parent&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> child = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#child&#x27;</span>);<br><br>parent.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;父元素 - 冒泡阶段&#x27;</span>);<br>&#125;);<br><br>parent.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;父元素 - 捕获阶段&#x27;</span>);<br>&#125;, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> &#125;);<br><br>child.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;子元素 - 目标阶段&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>上述的<code>child</code>被包裹在<code>parent</code>内部.</p>\n<ul>\n<li><p>当点击<code>parent</code>时将会显示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;父元素 - 捕获阶段&quot;</span><br><span class=\"hljs-string\">&quot;父元素 - 冒泡阶段&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于设置了在捕获阶段就触发, 所以先触发了捕获阶段的监听器, 然后再触发冒泡阶段的监听器;</p>\n</blockquote>\n</li>\n<li><p>当点击<code>child</code>时将会显示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;父元素 - 捕获阶段&quot;</span><br><span class=\"hljs-string\">&quot;子元素 - 目标阶段&quot;</span><br><span class=\"hljs-string\">&quot;父元素 - 冒泡阶段&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>child</code>是整个事件流的目标元素, 所以触发时机介于二者之间.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h4><ol>\n<li><p>如果将<code>div</code>换成<code>button</code>, 则点击<code>child</code>时可能只会显示 <strong>目标</strong> 阶段的输出.</p>\n<blockquote>\n<p>这是因为, 不同浏览器对于<code>button</code>元素的默认行为不同, 可能默认阻止了捕获阶段和冒泡阶段</p>\n</blockquote>\n</li>\n<li><p><code>event.stopPropagation();</code>加入该<del>咒语</del>代码可以在此停止事件的传播, 比如可以在上述的捕获阶段监听器加入该代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">parent.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;父元素 - 捕获阶段&#x27;</span>);<br>    event.<span class=\"hljs-title function_\">stopPropagation</span>();<br>&#125;, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> &#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此时, 点击<code>parent</code>时, 只会触发捕获阶段的监听器, 不会触发冒泡阶段的监听器.</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"可被移除的监听器\"><a href=\"#可被移除的监听器\" class=\"headerlink\" title=\"可被移除的监听器\"></a>可被移除的监听器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outside&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;t1&quot;</span>&gt;</span>one<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;t2&quot;</span>&gt;</span>two<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 为 table 添加可被移除的事件监听器</span><br><span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();<br><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;outside&quot;</span>);<br>el.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, modifyText, &#123; <span class=\"hljs-attr\">signal</span>: controller.<span class=\"hljs-property\">signal</span> &#125;);<br><br><span class=\"hljs-comment\">// 改变 t2 内容的函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> t2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;t2&quot;</span>);<br>  <span class=\"hljs-keyword\">if</span> (t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> === <span class=\"hljs-string\">&quot;three&quot;</span>) &#123;<br>    t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = <span class=\"hljs-string\">&quot;two&quot;</span>;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = <span class=\"hljs-string\">&quot;three&quot;</span>;<br>    controller.<span class=\"hljs-title function_\">abort</span>(); <span class=\"hljs-comment\">// 当值变为 &quot;three&quot; 后，移除监听器</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>AbortController</code>是一个构造函数, 用于创建一个可被移除的事件监听器的控制器;</li>\n<li><code>signal</code>属性是一个<code>AbortSignal</code>对象, 用于控制监听器的移除;</li>\n<li><code>controller.abort()</code>方法用于移除监听器;</li>\n<li>当<code>t2</code>的内容变为”three”时, 移除监听器, 使得<code>modifyText</code>函数不再执行. 此后, 点击<code>t2</code>不会触发<code>modifyText</code>函数.</li>\n</ul>\n</blockquote>\n<p>具体的<strong>构造步骤:</strong></p>\n<ol>\n<li>创建一个<code>AbortController</code>实例: <code>const controller = new AbortController();</code></li>\n<li>在事件监听器内的参数中添加<code>signal: controller.signal</code>选项;</li>\n<li>在需要移除监听器的地方调用<code>controller.abort()</code>方法;</li>\n</ol>\n<hr>\n<p>我们也可以直接使用<code>removeEventListener()</code>方法来移除事件监听器:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">removeEventListener</span>(type, listener);<br><span class=\"hljs-title function_\">removeEventListener</span>(type, listener, options);<br><span class=\"hljs-title function_\">removeEventListener</span>(type, listener, useCapture);<br></code></pre></td></tr></table></figure></p>\n<ul>\n<li>Notices:<ul>\n<li>如果同一个对象上存在2个事件监听器, 且仅在<code>useCapture</code>参数存在差异, 那么需要先后2次调用<code>removeEventListener()</code>方法才能完全移除其事件监听器;</li>\n<li>如果无法匹配当前注册的事件监听器, 那么该函数将不会起任何作用;</li>\n<li><code>type</code>,<code>listener</code>参数必须完全匹配才能移除事件监听器;</li>\n<li>对于<code>options</code>参数:<ul>\n<li>字段相同: 一定可以移除;</li>\n<li>字段不同: 需要与默认值false匹配才可以移除.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">element.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span> &#125;);<br><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span> &#125;); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">false</span> &#125;); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> &#125;); <span class=\"hljs-comment\">// 失败</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, &#123; <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">false</span> &#125;); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 成功</span><br>element.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;mousedown&quot;</span>, handleMouseDown, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 失败</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>添加与移除</strong>的结合使用:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;body&quot;</span>);<br><span class=\"hljs-keyword\">const</span> clickTarget = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;click-target&quot;</span>);<br><span class=\"hljs-keyword\">const</span> mouseOverTarget = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;mouse-over-target&quot;</span>);<br><br><span class=\"hljs-keyword\">let</span> toggle = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">makeBackgroundYellow</span>(<span class=\"hljs-params\"></span>) &#123;<br>  body.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = toggle ? <span class=\"hljs-string\">&quot;white&quot;</span> : <span class=\"hljs-string\">&quot;yellow&quot;</span>;<br><br>  toggle = !toggle;<br>&#125;<br><br>clickTarget.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, makeBackgroundYellow, <span class=\"hljs-literal\">false</span>);<br><br>mouseOverTarget.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;mouseover&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  clickTarget.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, makeBackgroundYellow, <span class=\"hljs-literal\">false</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"使用匿名函数\"><a href=\"#使用匿名函数\" class=\"headerlink\" title=\"使用匿名函数\"></a>使用匿名函数</h3><p>在上述<code>html</code>例子下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 改变 t2 内容的函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-params\">new_text</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> t2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;t2&quot;</span>);<br>  t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = new_text;<br>&#125;<br><br><span class=\"hljs-comment\">// 用匿名函数为 table 添加事件监听器</span><br><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;outside&quot;</span>);<br>el.<span class=\"hljs-title function_\">addEventListener</span>(<br>  <span class=\"hljs-string\">&quot;click&quot;</span>,<br>  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-string\">&quot;four&quot;</span>);<br>  &#125;,<br>  <span class=\"hljs-literal\">false</span>,<br>);<br></code></pre></td></tr></table></figure><br>通过匿名函数封装代码, 将参数传入函数<code>modifyText</code>, 使得函数可以被调用.</p>\n<h3 id=\"使用箭头函数\"><a href=\"#使用箭头函数\" class=\"headerlink\" title=\"使用箭头函数\"></a>使用箭头函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 改变 t2 内容的函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-params\">new_text</span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> t2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;t2&quot;</span>);<br>  t2.<span class=\"hljs-property\">firstChild</span>.<span class=\"hljs-property\">nodeValue</span> = new_text;<br>&#125;<br><br><span class=\"hljs-comment\">// 用箭头函数为 table 添加事件监听器</span><br><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;outside&quot;</span>);<br>el.<span class=\"hljs-title function_\">addEventListener</span>(<br>  <span class=\"hljs-string\">&quot;click&quot;</span>,<br>  <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">modifyText</span>(<span class=\"hljs-string\">&quot;four&quot;</span>);<br>  &#125;,<br>  <span class=\"hljs-literal\">false</span>,<br>);<br></code></pre></td></tr></table></figure>\n<p>通过<code>=&gt;&#123;&#125;</code>形式的箭头函数简化代码书写.</p>\n<hr>\n<h4 id=\"比较匿名与箭头\"><a href=\"#比较匿名与箭头\" class=\"headerlink\" title=\"比较匿名与箭头\"></a>比较匿名与箭头</h4><p>匿名函数与箭头函数在此处的应用基本相同, 但是在<code>this</code>的指向上有所不同:</p>\n<ul>\n<li><p>匿名函数与其他普通的JS函数:<code>this</code>指向调用它的对象之作用域(如果没有直接调用关系, 默认为全局对象, 且严格模式下为<code>undefined</code>);</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>); <span class=\"hljs-comment\">// 在非严格模式下，this 指向 window</span><br>&#125;<br><span class=\"hljs-title function_\">sayHello</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>箭头函数的<code>this</code>继承自外部作用域, 即调用该方法的对象.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;ZJU&quot;</span>,<br>  <span class=\"hljs-attr\">greet</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// this 指向 obj</span><br>  &#125;,<br>&#125;;<br>obj.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出：ZJU</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;ZJU&quot;</span>,<br>  <span class=\"hljs-attr\">getNameWithAnonymous</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>  &#125;,<br>  <span class=\"hljs-attr\">getNameWithArrow</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>  &#125;,<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> anonymousFn = obj.<span class=\"hljs-title function_\">getNameWithAnonymous</span>();<br><span class=\"hljs-title function_\">anonymousFn</span>(); <span class=\"hljs-comment\">// 输出：undefined</span><br><br><span class=\"hljs-keyword\">const</span> arrowFn = obj.<span class=\"hljs-title function_\">getNameWithArrow</span>();<br><span class=\"hljs-title function_\">arrowFn</span>(); <span class=\"hljs-comment\">// 输出：ZJU</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>进一步完善.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>$\\underline{事件对象}$ 在事件处理函数的内部, 以固定指定名称出现的参数, 例如<code>event</code>,<code>e</code>,<code>evt</code>. 它被自动传递给事件处理函数，以提供额外的功能和信息。</p>\n<p><code>e.target</code>始终是对 <strong>事件刚刚发生的元素</strong> 的引用</p>\n<h2 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new()\"></a>new()</h3><p>$\\underline{new}$ 用来创建对象实例的一个关键字. </p>\n<ul>\n<li>作用: <strong>调用</strong> 一个 构造函数, 并返回一个由该构造函数创建的对象实例.<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> constructor<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>)<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">arg1</span>)<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">arg1, arg2</span>)<br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">arg1, arg2, <span class=\"hljs-comment\">/* …, */</span> argN</span>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>如果没有指定参数, 默认为在不带参数的情况下调用构造函数. 即<code>new foo</code> 等价于 <code>new foo()</code>;</li>\n<li>构造函数内部的<code>this</code>将被绑定到新建的对象实例上;</li>\n</ol>\n<ul>\n<li>e.g. <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">color, brand</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = color;   <span class=\"hljs-comment\">// 将 color 赋值给新对象</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">brand</span> = brand;   <span class=\"hljs-comment\">// 将 brand 赋值给新对象</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> myCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-string\">&quot;Toyota&quot;</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myCar.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// 输出 &quot;red&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myCar.<span class=\"hljs-property\">brand</span>); <span class=\"hljs-comment\">// 输出 &quot;Toyota&quot;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用<code>new()</code>的<strong>步骤</strong>:</p>\n<ol>\n<li>定义构造函数;</li>\n<li>使用<code>new()</code>并传入构造函数的参数;</li>\n<li>将返回的对象实例赋值给一个变量;</li>\n</ol>\n<h4 id=\"新增属性\"><a href=\"#新增属性\" class=\"headerlink\" title=\"新增属性\"></a>新增属性</h4><ul>\n<li><p>为已经定义的对象实例直接新增属性, 但是不会影响其他相同类型的对象和构造函数本身:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">car1.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;black&quot;</span> <span class=\"hljs-comment\">//为car1新增color属性</span><br></code></pre></td></tr></table></figure>\n<p><br></p>\n</li>\n<li><p>添加共享属性到构造函数中的<code>prototype</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br>car1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>();<br>car2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>();<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-title class_\">Car</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;原色&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br><br>car1.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;黑色&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;黑色&#x27;</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(car1).<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(car2).<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car1.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;黑色&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car2.<span class=\"hljs-property\">color</span>); <span class=\"hljs-comment\">// &#x27;原色&#x27;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>此处的构造函数名为<code>Car</code>, 因此通过<code>Car.prototype</code>可以访问到构造函数的原型对象;</li>\n<li><code>getPrototypeOf</code> 表示获取对象的<strong>原型对象</strong>, 因此此处均为最初定义的 <strong>原色</strong>.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>函数通过<code>new.target</code>属性可以判断是否通过<code>new</code>关键字调用, 即构造.</p>\n<ul>\n<li>如果函数是正常调用, 则返回<code>undefined</code>;</li>\n<li><p>如果函数是通过<code>new</code>调用, 返回被调用的构造函数.</p>\n</li>\n<li><p>e.g.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">color</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">new</span>.<span class=\"hljs-property\">target</span>) &#123;<br>    <span class=\"hljs-comment\">// 以函数的形式被调用。</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;color&#125;</span>车`</span>;<br>  &#125;<br>  <span class=\"hljs-comment\">// 通过 new 被调用。</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = color;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;红&quot;</span>); <span class=\"hljs-comment\">// a 是“红车”</span><br><span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;红&quot;</span>); <span class=\"hljs-comment\">// b 是 `Car &#123; color: &quot;红&quot; &#125;`</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"对象类型与实例\"><a href=\"#对象类型与实例\" class=\"headerlink\" title=\"对象类型与实例\"></a>对象类型与实例</h4><p>$\\underline{对象类型}$ 通过构造函数可以创建一个对象类型:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">make, model, year</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">make</span> = make;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">model</span> = model;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">year</span> = year;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<p>$\\underline{对象实例}$ 通过使用<code>new()</code>方法, 由对象类型构造一个对象实例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;鹰牌&quot;</span>, <span class=\"hljs-string\">&quot;Talon TSi&quot;</span>, <span class=\"hljs-number\">1993</span>);<br></code></pre></td></tr></table></figure></p>\n<h4 id=\"类与new\"><a href=\"#类与new\" class=\"headerlink\" title=\"类与new\"></a>类与new</h4><p>在JS当中, 类 <strong>必须</strong> 通过<code>new</code>调用.</p>\n<blockquote>\n<p>可以优先阅读<a href=\"#类\">类相关的知识</a></p>\n</blockquote>\n<ul>\n<li>e.g. <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>  <span class=\"hljs-comment\">//构造函数</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>  &#125;<br>  <span class=\"hljs-comment\">//实例方法</span><br>  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`你好，我的名字是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n对于上述的类, 必须使用如下的调用方式:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> animal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-string\">&quot;Dog&quot;</span>); <span class=\"hljs-comment\">// 正常</span><br></code></pre></td></tr></table></figure>\n而下面这样类似于普通函数的调用方式会抛出错误:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Animal</span>(<span class=\"hljs-string\">&quot;Cat&quot;</span>); <span class=\"hljs-comment\">// TypeError:  Class constructor Animal cannot be invoked without &#x27;new&#x27;</span><br></code></pre></td></tr></table></figure>\n<br></li>\n</ul>\n<p>在使用正确方法得到类的实例对象之后, 可以用访问属性的方式来调用实例方法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">animal.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出 &quot;你好，我的名字是Dog&quot;</span><br></code></pre></td></tr></table></figure></p>\n<hr>\n<p>下面给出与普通函数的区别:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Car</span>(<span class=\"hljs-params\">model</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">model</span> = model;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> car = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;Toyota&quot;</span>); <span class=\"hljs-comment\">// 正常</span><br><span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;Honda&quot;</span>); <span class=\"hljs-comment\">// 不抛出错误，但 this 会指向全局对象.</span><br><span class=\"hljs-keyword\">const</span> anotherCar = <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-string\">&quot;cat&quot;</span>); <span class=\"hljs-comment\">//此时全局对象下的model值为 &quot;cat&quot;, 覆盖了上一行的定义.</span><br></code></pre></td></tr></table></figure><br>总结:</p>\n<ul>\n<li>以构造函数形式呈现的普通函数, 可以被直接调用, 但是此时内部的参数赋值给了全局对象;</li>\n<li>如果以new方法构造得到对象实例, 依旧正常.</li>\n</ul>\n<hr>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"默认行为\"><a href=\"#默认行为\" class=\"headerlink\" title=\"默认行为\"></a>默认行为</h2><p>$\\underline{默认行为}$ 是指浏览器在某些事件发生时，自动执行的内置操作, 是浏览器的“默认反应”.</p>\n<ul>\n<li>比如存在以下的默认行为:<ul>\n<li>滚动事件：触摸屏上滑动手指，页面会滚动;</li>\n<li>拖拽文件到浏览器：浏览器会尝试加载文件;</li>\n<li>点击链接 <code>(&lt;a href=&quot;...&quot;&gt;)</code>：跳转到指定的 URL;</li>\n</ul>\n</li>\n</ul>\n<p>$\\underline{阻止默认行为}$ 使用 <code>event.preventDefault()</code> 方法可以阻止事件的默认行为.</p>\n<ul>\n<li><p>e.g: 阻止链接跳转</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) &#123;<br>    event.<span class=\"hljs-title function_\">preventDefault</span>(); <span class=\"hljs-comment\">// 阻止点击链接时的默认行为</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;链接被点击，但没有跳转&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>作用:</p>\n<ul>\n<li>通过阻止默认行为, 可以实现自定义逻辑.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ul>\n<li><code>this</code>可以视作函数的一个隐参数, 是在函数被执行时创建的绑定;</li>\n<li><code>this</code> 指向的是<strong>当前函数的调用者</strong>，而不是函数内部定义的变量.</li>\n</ul>\n<p><br></p>\n<ul>\n<li>e.g.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;b in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b in the function&quot;</span>; <span class=\"hljs-comment\">// 函数作用域</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span>); <span class=\"hljs-comment\">// 访问 this.b</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b outside of the func&quot;</span>;<br><br>obj.<span class=\"hljs-title function_\">f</span>();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此处的<code>f</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"函数上下文中的this\"><a href=\"#函数上下文中的this\" class=\"headerlink\" title=\"函数上下文中的this\"></a>函数上下文中的this</h3><ul>\n<li><code>this</code>参数的值取决于函数<strong>如何</strong>被调用, 而不是函数如何被定义.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 对象可以作为第一个参数传递给 &#x27;call&#x27; 或 &#x27;apply&#x27;，</span><br><span class=\"hljs-comment\">// 并且 &#x27;this&#x27; 将被绑定到它。</span><br><span class=\"hljs-keyword\">const</span> obj = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;Custom&quot;</span> &#125;;<br><br><span class=\"hljs-comment\">// 使用 var 声明的变量成为 &#x27;globalThis&#x27; 的属性。</span><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;Global&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">whatsThis</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// &#x27;this&#x27; 取决于函数如何被调用</span><br>&#125;<br><br><span class=\"hljs-title function_\">whatsThis</span>(); <span class=\"hljs-comment\">// &#x27;Global&#x27;; 在非严格模式下，&#x27;this&#x27; 参数默认为 &#x27;globalThis&#x27;</span><br>obj.<span class=\"hljs-property\">whatsThis</span> = whatsThis;<br>obj.<span class=\"hljs-title function_\">whatsThis</span>(); <span class=\"hljs-comment\">// &#x27;Custom&#x27;; &#x27;this&#x27; 参数被绑定到 obj</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>同样是调用函数<code>whatsThis()</code>, 但是<code>this</code>参数被绑定到不同的对象上, 导致返回值不同;</li>\n<li>在非严格模式下, <code>this</code>参数默认指向<code>globalThis</code>, 即全局对象;</li>\n<li>对于典型函数, <code>this</code>指向函数访问的对象;</li>\n</ol>\n<ul>\n<li><p>e.g. </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;b in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b in the function&quot;</span>; <span class=\"hljs-comment\">// 函数作用域</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span>); <span class=\"hljs-comment\">// 访问 this.b</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;b outside of the func&quot;</span>;<br><br>obj.<span class=\"hljs-title function_\">f</span>();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此处<code>f</code>作为<code>obj</code>对象的方法被调用, 因此普通函数的<code>this</code>指向<code>obj</code>.</p>\n</blockquote>\n</li>\n<li><p>e.g. 直接调用的普通函数<code>this</code>指向全局:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">const</span> funcA = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> &#125;; <span class=\"hljs-comment\">// 普通函数，this 由调用方式决定</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">funcA</span>()); <span class=\"hljs-comment\">// 访问 this.a</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br>obj.<span class=\"hljs-title function_\">f</span>(); <span class=\"hljs-comment\">// &quot;a in the global&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>此处的<code>funcA</code>并没有类似于作为对象的属性调用(<code>obj.funcA()</code>), 因此其<code>this</code>指向全局作用域(<code>window</code>), 输出<code>undefined</code>, 而是直接调用的形式, 因此其<code>this</code>指向全局作用域.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"对this传值\"><a href=\"#对this传值\" class=\"headerlink\" title=\"对this传值\"></a>对this传值</h3><p>使用<code>call()</code>以及<code>apply()</code>方法可以将<code>this</code>绑定到其他对象上.</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><ul>\n<li>形式: <code>func.call(thisArg, arg1, arg2, ...)</code></li>\n<li>e.g:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">c, d</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span> + c + d;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> &#125;;<br><br><span class=\"hljs-comment\">// 第一个参数被绑定到隐式的 &#x27;this&#x27; 参数；</span><br><span class=\"hljs-comment\">// 剩余的参数被绑定到命名参数。</span><br>add.<span class=\"hljs-title function_\">call</span>(o, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 16</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><ul>\n<li>形式: <code>func.apply(thisArg, [argsArray])</code></li>\n<li>e.g:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">c, d</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">b</span> + c + d;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> &#125;;<br><br><span class=\"hljs-comment\">// 第一个参数被绑定到隐式的 &#x27;this&#x27; 参数；</span><br><span class=\"hljs-comment\">// 第二个参数是一个数组，其成员被绑定到命名参数。</span><br>add.<span class=\"hljs-title function_\">apply</span>(o, [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]); <span class=\"hljs-comment\">// 34</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><ul>\n<li>形式: <code>f.bind(someObject)</code>;</li>\n<li><strong>作用</strong>: <ul>\n<li>创建一个新的函数(需要重新赋值), 具有与<code>f</code>相同的函数体和作用域;</li>\n<li>新函数的<code>this</code>被 <strong>永久地</strong> 绑定到<code>someObject</code>, 不随调用方式的变化而变化.</li>\n</ul>\n</li>\n<li><strong>限制</strong>: <ul>\n<li><code>bind</code>无法多次生效. 即对函数f<code>bind</code>得到的g, 无法继续用<code>bind</code>得到期望的h;</li>\n</ul>\n</li>\n<li><p>e.g. 多次<code>bind</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> g = f.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;azerty&quot;</span> &#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-keyword\">const</span> h = g.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;yoo&quot;</span> &#125;); <span class=\"hljs-comment\">// bind 只能生效一次！</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">37</span>, f, g, h &#125;;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(o.<span class=\"hljs-property\">a</span>, o.<span class=\"hljs-title function_\">f</span>(), o.<span class=\"hljs-title function_\">g</span>(), o.<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// 37 37 undefined undefined</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>由于<code>bind</code>只能对一个原始函数作用, 因此由f得到的g无法继续由<code>bind</code>绑定<code>this</code>得到期望的h, 此处h的<code>this</code>依旧是<code>&#123;b: &quot;azerty&quot;&#125;</code>, 因此在输出对象<code>a</code>时显示<code>undefined</code>;</li>\n<li><code>o.f()</code>的调用是普通函数的调用, 因此其<code>this</code>继承自对象<code>o</code>, 输出<code>37</code>;</li>\n</ul>\n</blockquote>\n</li>\n<li><p>e.g. 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span> + <span class=\"hljs-string\">&quot; &quot;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">c</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> g = f.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;azerty&quot;</span> , <span class=\"hljs-attr\">c</span>:<span class=\"hljs-string\">&quot;ccc&quot;</span>&#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">// &quot;undefined ccc&quot;</span><br><br><span class=\"hljs-keyword\">const</span> h = g.<span class=\"hljs-title function_\">bind</span>(&#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;yoo&quot;</span> &#125;); <span class=\"hljs-comment\">// bind 只能生效一次！</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// &quot;undefined ccc&quot;</span><br><br><span class=\"hljs-keyword\">const</span> o = &#123; <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">37</span>, f, g, h &#125;;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(o.<span class=\"hljs-property\">a</span>, o.<span class=\"hljs-title function_\">f</span>(), o.<span class=\"hljs-title function_\">g</span>(), o.<span class=\"hljs-title function_\">h</span>()); <span class=\"hljs-comment\">// 37 37 azerty azerty</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>bind</code>绑定的<code>this</code>是永久覆盖, 而非简单叠加;</li>\n<li>由于<code>bind</code>绑定的<code>this</code>不随者调用方式的变化而变化, 因此即使处于对象<code>o</code>当中, <code>g</code>,<code>h</code>依旧不会输出<code>o</code>中的<code>a</code>.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"箭头函数中的this\"><a href=\"#箭头函数中的this\" class=\"headerlink\" title=\"箭头函数中的this\"></a>箭头函数中的this</h3><p>使用 call()、apply() 或 bind() 调用箭头函数时，传入的 this 值会被忽略，但其他参数仍然会正常传递。</p>\n<p>普通函数:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>&#125;;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br> <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br> <span class=\"hljs-attr\">f</span>: foo<br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>()); <span class=\"hljs-comment\">// &quot;a in the obj&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p><code>call()</code>、 <code>apply()</code>、 <code>bind()</code> 无法改变箭头函数的<code>this</code>(但是call与apply的其他参数可以正常传递:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">foo</span> = (<span class=\"hljs-params\"></span>)=&gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br> <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br> <span class=\"hljs-attr\">f</span>: foo.<span class=\"hljs-title function_\">bind</span>(&#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">&quot;a in the bind&quot;</span>&#125;) <span class=\"hljs-comment\">// 显式绑定 this 到 obj, 但是无法生效</span><br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>()); <span class=\"hljs-comment\">// undefined</span><br><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>换成普通函数则输出<code>a in the obj</code>.</p>\n</blockquote>\n<ul>\n<li>全局作用域<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">foo1</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br>\t<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>\t<span class=\"hljs-attr\">f</span>: <span class=\"hljs-function\">()=&gt;</span> a<br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>());<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n<li>块级作用域: 由<code>let</code>或<code>const</code>声明的变量的作用域.(对于<code>var</code>无效);</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// 1</span><br><br>&#123;<br>  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<p>Notices:</p>\n<ul>\n<li>对象本身并不会创建作用域, 只是一个键值对的集合;</li>\n<li>箭头函数也不会创建自己的作用域, 而是 <strong>继承</strong> 外层作用域中的<code>this</code>;</li>\n</ul>\n<h3 id=\"变量与作用域\"><a href=\"#变量与作用域\" class=\"headerlink\" title=\"变量与作用域\"></a>变量与作用域</h3><ul>\n<li><code>var</code>在全局作用域中声明时会成为 <strong>全局对象</strong> (<code>window</code>或<code>global</code>)的属性;</li>\n<li><code>let</code>和<code>const</code>即使在全局作用域中声明, 也不会成为全局对象的属性;<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;1&quot;</span>;<br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-string\">&quot;2&quot;</span>;<br><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// &quot;1&quot;</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">b</span>; <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>因此, 建议在全局作用域中不要使用<code>var</code>声明变量, 而使用<code>let</code>或<code>const</code>声明变量. 从而避免导致意外的覆盖和冲突.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"函数与作用域\"><a href=\"#函数与作用域\" class=\"headerlink\" title=\"函数与作用域\"></a>函数与作用域</h3><h4 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h4><p>普通函数和匿名函数的作用域继承自其定义时的作用域.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">insideObj</span>: &#123;<br>        <span class=\"hljs-attr\">g</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// 普通函数，this 动态绑定到 insideObj</span><br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// 普通函数，this 动态绑定到 obj</span><br>    &#125;<br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>());        <span class=\"hljs-comment\">// &quot;a in the obj&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">insideObj</span>.<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">// undefined，因为 insideObj 中没有 a</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"箭头函数-1\"><a href=\"#箭头函数-1\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>e.g. <strong>箭头函数继承外层作用域</strong>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&quot;a in the global&quot;</span>;<br><br><span class=\"hljs-keyword\">const</span> obj = &#123;<br>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;a in the obj&quot;</span>,<br>    <span class=\"hljs-attr\">insideObj</span>: &#123;<br>        <span class=\"hljs-attr\">g</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span><br>    &#125;,<br>    <span class=\"hljs-attr\">f</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span><br>&#125;;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-title function_\">f</span>());        <span class=\"hljs-comment\">// &quot;a in the global&quot;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">insideObj</span>.<span class=\"hljs-title function_\">g</span>()); <span class=\"hljs-comment\">//&quot;a in the global&quot;</span><br></code></pre></td></tr></table></figure><br>由于对象不会创建作用域, 因此此处的箭头函数的<code>this</code>继承了外层作用域(window)的<code>this</code>, 且<code>var</code>创建的变量存在于全局作用域中.</p>\n<h2 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h2><p>$\\underline{语法糖}$ 一种让代码更简洁、更易读的语法形式.</p>\n<ul>\n<li>本质上没有增加语言的功能, 而是对已有功能的 <strong>包装</strong> 或者优化;</li>\n<li><strong>可读性提升</strong>: <del>让代码更填</del> 使得代码更加容易理解和书写;</li>\n<li><strong>底层实现</strong>: 实质上依旧用基础的语法实现.</li>\n</ul>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>类 <code>class</code> 是 ES6 引入的语法糖, 它提供了面向对象编程的简洁语法. 本质上是对原型继承<code>prototype</code>的封装.</p>\n<p>使用<code>class</code>的写法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>);<br>person.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出：Hello, my name is Alice</span><br></code></pre></td></tr></table></figure></p>\n<p>等价的原型写法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">greet</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>);<br>person.<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 输出：Hello, my name is Alice</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数-2\"><a href=\"#箭头函数-2\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数简化了函数定义的书写, 其本质上依旧是一个普通函数, 因此也是语法糖的一种.</p>\n<ul>\n<li>e.g.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 使用箭头函数</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; a + b;<br><br><span class=\"hljs-comment\">// 等价的普通函数</span><br><span class=\"hljs-keyword\">const</span> add = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h3><p>$\\underline{结构赋值}$ 手动提取<strong>对象</strong>属性的语法糖.</p>\n<ul>\n<li><p>使用结构赋值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Zhuo&quot;</span>, <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br><br><span class=\"hljs-keyword\">const</span> &#123;name, gender&#125; = person;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>等价的原型写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Zhuo&quot;</span>, <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br><br><span class=\"hljs-keyword\">const</span> name = person.<span class=\"hljs-property\">name</span>;<br><span class=\"hljs-keyword\">const</span> gender = person.<span class=\"hljs-property\">gender</span>;<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"赋值规则\"><a href=\"#赋值规则\" class=\"headerlink\" title=\"赋值规则\"></a>赋值规则</h4><p>结构赋值时, 基于 <strong>属性名匹配</strong> 而非顺序.<br>因此, 对象结构的<code>&#123;&#125;</code>内部属性必须和 <strong>对象的属性名</strong> 相对应.</p>\n<p><strong>错误</strong>的示例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> &#125;;<br><span class=\"hljs-keyword\">const</span> &#123; a, b &#125; = person;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// 输出：undefined</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// 输出：undefined</span><br></code></pre></td></tr></table></figure></p>\n<p><strong>重命名属性</strong>的写法:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> &#125;;<br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">name</span>: a, <span class=\"hljs-attr\">age</span>: b &#125; = person;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// 输出：Alice</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// 输出：25</span><br></code></pre></td></tr></table></figure></p>\n<p><strong>手动赋值</strong>: 对于结构对象中不存在的属性, 可以采取普通赋值的方式与结构赋值相结合:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span> &#125;;<br><span class=\"hljs-keyword\">const</span> &#123; name, age = <span class=\"hljs-number\">30</span> &#125; = person;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name); <span class=\"hljs-comment\">// 输出：Alice</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(age);  <span class=\"hljs-comment\">// 输出：30 （因为 person 中没有 age 属性，所以使用了默认值）</span><br></code></pre></td></tr></table></figure></p>\n<h4 id=\"数组的结构赋值\"><a href=\"#数组的结构赋值\" class=\"headerlink\" title=\"数组的结构赋值\"></a>数组的结构赋值</h4><p>上述讨论的结构赋值都是对 <strong>对象</strong> 的结构赋值, 对于数组同样可以结构赋值, 且赋值规则与对象相反—— <strong>基于顺序</strong>赋值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-number\">25</span>];<br><span class=\"hljs-keyword\">const</span> [a, b] = arr;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a); <span class=\"hljs-comment\">// 输出：Alice</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b); <span class=\"hljs-comment\">// 输出：25</span><br></code></pre></td></tr></table></figure></p>\n"},{"title":"css笔记","date":"2025-01-08T10:33:32.000Z","index_img":"/img/Aniya.png","excerpt":"css属性好多好复杂😶‍🌫️","_content":"> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n\n<style>\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n</style>\n```\n\n\n`:nth-child`可用于对序列中不同的元素进行有序的样式设计:\n```html\n<div class=\"index-card\">内容1</div>\n<div class=\"index-card\">内容2</div>\n<div class=\"index-card\">内容3</div>\n<div class=\"index-card\">内容4</div>\n\n<style>\n.index-card:nth-child(odd) {\n  flex-direction: row-reverse;\n}\n</style>\n```\n- 选择所有类名为 \"index-card\" 的元素;\n- `row-reverse` 会让 flex 容器中的项目从右到左排列;\n> 同理, `even`选择偶数位置的元素; `3n+1`等函数表达式也可以起作用.\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","source":"_posts/css笔记.md","raw":"---\ntitle: css笔记\ndate: 2025-01-08 18:33:32\ntags:\n- 前端\n- CSS\nindex_img: /img/Aniya.png\ncategories: 学习笔记\nexcerpt: css属性好多好复杂😶‍🌫️\n---\n> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n\n<style>\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n</style>\n```\n\n\n`:nth-child`可用于对序列中不同的元素进行有序的样式设计:\n```html\n<div class=\"index-card\">内容1</div>\n<div class=\"index-card\">内容2</div>\n<div class=\"index-card\">内容3</div>\n<div class=\"index-card\">内容4</div>\n\n<style>\n.index-card:nth-child(odd) {\n  flex-direction: row-reverse;\n}\n</style>\n```\n- 选择所有类名为 \"index-card\" 的元素;\n- `row-reverse` 会让 flex 容器中的项目从右到左排列;\n> 同理, `even`选择偶数位置的元素; `3n+1`等函数表达式也可以起作用.\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","slug":"css笔记","published":1,"updated":"2025-01-19T11:46:34.124Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enf000duyqg3k5fhc89","content":"<blockquote>\n<p><a href=\"https://jsfiddle.net/?locale=zh_CN\">在线编辑平台</a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot;Author: &quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* 加粗字体 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* 文本颜色为蓝色 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:after</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot; ✍️&quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>; <span class=\"hljs-comment\">/* 调整图标大小 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* 添加左边距 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.index-card</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(odd) &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">flex-direction</span>: row-reverse;</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ul>\n<li>选择所有类名为 “index-card” 的元素;</li>\n<li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote>\n<p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.my-element</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: green;<br>  <span class=\"hljs-attribute\">color</span>: red;<br>  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);<br>  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:active</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span> &#123;<br>      <span class=\"hljs-attribute\">border-color</span>: blue;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: purple;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-weight</span>: bold;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:last-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-style</span>: italic;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:only-child</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:empty</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex容器 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* 将容器设置为Flexbox容器 */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-direction: 定义主轴方向 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row: 水平从左到右（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row-reverse: 水平从右到左 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column: 垂直从上到下 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column-reverse: 垂直从下到上 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-direction</span>: row; <span class=\"hljs-comment\">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-wrap: 定义是否换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* nowrap: 不换行（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap: 换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap-reverse: 反向换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-wrap</span>: wrap; <span class=\"hljs-comment\">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-flow</span>: row wrap; <span class=\"hljs-comment\">/* 可以改为column nowrap等组合 */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 起始对齐（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">justify-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* baseline: 项目基线对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-items</span>: center; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>; <span class=\"hljs-comment\">/* 设置容器高度 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-comment\">/* 设置容器背景颜色 */</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    </span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex项目 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.item</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 设置项目内边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: lightblue; <span class=\"hljs-comment\">/* 设置项目背景颜色 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* 设置项目外边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-comment\">/* 设置项目文本居中 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">/*尝试向flex容器扩展空间*/</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p><a href=\"https://jsfiddle.net/?locale=zh_CN\">在线编辑平台</a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot;Author: &quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* 加粗字体 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* 文本颜色为蓝色 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:after</span> &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot; ✍️&quot;</span>;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>; <span class=\"hljs-comment\">/* 调整图标大小 */</span></span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* 添加左边距 */</span></span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><code>:nth-child</code>可用于对序列中不同的元素进行有序的样式设计:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;index-card&quot;</span>&gt;</span>内容4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-selector-class\">.index-card</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(odd) &#123;</span><br><span class=\"language-css\">  <span class=\"hljs-attribute\">flex-direction</span>: row-reverse;</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<ul>\n<li>选择所有类名为 “index-card” 的元素;</li>\n<li><code>row-reverse</code> 会让 flex 容器中的项目从右到左排列;<blockquote>\n<p>同理, <code>even</code>选择偶数位置的元素; <code>3n+1</code>等函数表达式也可以起作用.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.my-element</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: green;<br>  <span class=\"hljs-attribute\">color</span>: red;<br>  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);<br>  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:active</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span> &#123;<br>      <span class=\"hljs-attribute\">border-color</span>: blue;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: purple;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-weight</span>: bold;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:last-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-style</span>: italic;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:only-child</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:empty</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex容器 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* 将容器设置为Flexbox容器 */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-direction: 定义主轴方向 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row: 水平从左到右（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row-reverse: 水平从右到左 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column: 垂直从上到下 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column-reverse: 垂直从下到上 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-direction</span>: row; <span class=\"hljs-comment\">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-wrap: 定义是否换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* nowrap: 不换行（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap: 换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap-reverse: 反向换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-wrap</span>: wrap; <span class=\"hljs-comment\">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-flow</span>: row wrap; <span class=\"hljs-comment\">/* 可以改为column nowrap等组合 */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 起始对齐（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">justify-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* baseline: 项目基线对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-items</span>: center; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>; <span class=\"hljs-comment\">/* 设置容器高度 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-comment\">/* 设置容器背景颜色 */</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    </span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex项目 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.item</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 设置项目内边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: lightblue; <span class=\"hljs-comment\">/* 设置项目背景颜色 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* 设置项目外边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-comment\">/* 设置项目文本居中 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">/*尝试向flex容器扩展空间*/</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n"},{"title":"makefile","date":"2025-01-22T05:45:47.000Z","excerpt":"111","mermaid":true,"_content":"makefile 定义了一系列规则来指定优先编译、 重新编译的文件, 并服务于其他更复杂的操作.\n\n\n```mermaid\ngraph TD\n  A[源代码 (.c)] --> B[预处理]\n  B --> C[预处理后的代码 (.i)]\n  C --> D[编译]\n  D --> E[汇编代码 (.s)]\n  E --> F[汇编]\n  F --> G[目标文件 (.o)]\n  G --> H[链接]\n  H --> I[可执行文件]\n  \n  subgraph 编译过程\n    B --> C\n    C --> D\n    D --> E\n    E --> F\n  end\n  subgraph 链接过程\n    G --> H\n    H --> I\n  end\n```\n\n","source":"_posts/makefile.md","raw":"---\ntitle: makefile\ndate: 2025-01-22 13:45:47\ntags:\ncategories:\nexcerpt: 111\nmermaid: true\n---\nmakefile 定义了一系列规则来指定优先编译、 重新编译的文件, 并服务于其他更复杂的操作.\n\n\n```mermaid\ngraph TD\n  A[源代码 (.c)] --> B[预处理]\n  B --> C[预处理后的代码 (.i)]\n  C --> D[编译]\n  D --> E[汇编代码 (.s)]\n  E --> F[汇编]\n  F --> G[目标文件 (.o)]\n  G --> H[链接]\n  H --> I[可执行文件]\n  \n  subgraph 编译过程\n    B --> C\n    C --> D\n    D --> E\n    E --> F\n  end\n  subgraph 链接过程\n    G --> H\n    H --> I\n  end\n```\n\n","slug":"makefile","published":1,"updated":"2025-01-22T06:44:11.866Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enf000euyqg9yc5dkjl","content":"<div class=\"mermaid\">\n<svg id=\"mermaid-svg-523b4eb0439bf257\" xmlns=\"http://www.w3.org/2000/svg\" height=\"100%\" viewBox=\"0 0 -Infinity -Infinity\" style=\"max-width:-Infinitypx;\"><style>\n  .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100}\nsvg {\n  color: rgb(0, 0, 0);\n  font: normal normal 400 normal 16px / normal \"Times New Roman\";\n}\n  </style><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"></g></g></g></svg>\n</div>\n\n","more":"<div class=\"mermaid\">\n<svg id=\"mermaid-svg-523b4eb0439bf257\" xmlns=\"http://www.w3.org/2000/svg\" height=\"100%\" viewBox=\"0 0 -Infinity -Infinity\" style=\"max-width:-Infinitypx;\"><style>\n  .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100}\nsvg {\n  color: rgb(0, 0, 0);\n  font: normal normal 400 normal 16px / normal \"Times New Roman\";\n}\n  </style><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"></g><g class=\"edgeLabels\"></g><g class=\"nodes\"></g></g></g></svg>\n</div>\n\n"},{"title":"mermaid","date":"2025-01-22T06:01:46.000Z","excerpt":"111","mermaid":true,"_content":"# Mermaid语法与示例详解\n\n在现代的技术文档和博客中，使用图表来表达复杂的逻辑和流程变得越来越普遍。Mermaid 是一种功能强大的工具，能够通过简单的标记语言快速生成流程图、时序图、甘特图等多种图表类型。本文将带您了解 Mermaid 的基本语法，并通过示例帮助您快速上手。\n\n## 什么是 Mermaid？\n\nMermaid 是一种基于 JavaScript 的图表生成工具，支持在 Markdown 文件中直接嵌入代码块生成图表。它的核心优势在于：\n- 语法简单，易于学习。\n- 支持多种图表类型，包括流程图、时序图、甘特图、类图等。\n- 可与许多文档工具（如 GitHub、Hexo 等）无缝集成。\n\n## Mermaid 的基本语法\n\nMermaid 的语法通常以 `graph`、`sequenceDiagram` 等关键词开头，后续内容则定义图表的具体结构。以下是常用图表类型的语法示例：\n\n### 1. 流程图（Flowchart）\n\n流程图是 Mermaid 最常用的图表类型之一，用于描述流程或算法的执行顺序。\n\n```mermaid\ngraph TD\n  A[开始] --> B{条件判断}\n  B -->|是| C[执行操作1]\n  B -->|否| D[执行操作2]\n  C --> E[结束]\n  D --> E[结束]\n```\n\n**语法说明：**\n- `graph TD` 表示图表方向为从上到下（Top to Down）。\n- 方括号 `[]` 表示矩形节点，花括号 `{}` 表示菱形节点（通常用于条件判断）。\n- `-->` 表示节点之间的连接关系，`|是|` 和 `|否|` 是连接线上的标签。\n\n### 2. 时序图（Sequence Diagram）\n\n时序图用于描述多个参与者之间的交互顺序。\n\n```mermaid\nsequenceDiagram\n  participant 用户\n  participant 系统\n  用户->>系统: 提交请求\n  系统-->>用户: 返回结果\n```\n\n**语法说明：**\n- `participant` 定义参与者。\n- `->>` 表示消息的发送方向，`-->>` 表示返回消息。\n\n### 3. 甘特图（Gantt Chart）\n\n甘特图用于展示项目的时间规划。\n\n```mermaid\ngantt\n  title 项目计划\n  dateFormat  YYYY-MM-DD\n  section 任务\n  任务1 :a1, 2025-01-01, 10d\n  任务2 :after a1, 7d\n```\n\n**语法说明：**\n- `title` 定义图表标题。\n- `dateFormat` 定义日期格式。\n- 每个任务可以指定开始时间、持续时间或依赖关系。\n\n## 如何使用 Mermaid？\n\n1. **在 Markdown 文件中嵌入 Mermaid：**  \n   如果您的博客平台支持 Mermaid（如 Hexo、GitHub Pages 等），只需在代码块中以 `mermaid` 开头即可。\n\n2. **使用在线工具：**  \n   您可以使用 [Mermaid Live Editor](https://mermaid-js.github.io/mermaid-live-editor/) 在线编辑和预览 Mermaid 图表。\n\n## 示例代码\n\n以下是一个综合示例，展示如何结合多个 Mermaid 图表类型：\n\n```mermaid\ngraph LR\n  A[用户请求] --> B[服务器处理]\n  B --> C{是否成功}\n  C -->|是| D[返回结果]\n  C -->|否| E[记录错误]\n```\n\n**效果预览：**\n- 用户请求经过服务器处理后，根据处理结果返回不同的响应。\n\n## 参考资料\n\n如果您想进一步了解 Mermaid 的语法和功能，可以参考以下资源：\n- [Mermaid 官方文档](https://mermaid-js.github.io/mermaid/#/)\n- [Mermaid Live Editor](https://mermaid-js.github.io/mermaid-live-editor/)\n\nMermaid 的强大之处在于其简单直观的语法和灵活的图表生成能力，希望本文能够帮助您快速上手，并在您的文档或博客中创造更丰富的内容！","source":"_posts/mermaid.md","raw":"---\ntitle: mermaid\ndate: 2025-01-22 14:01:46\ntags:\ncategories:\nexcerpt: 111\nmermaid: true\n---\n# Mermaid语法与示例详解\n\n在现代的技术文档和博客中，使用图表来表达复杂的逻辑和流程变得越来越普遍。Mermaid 是一种功能强大的工具，能够通过简单的标记语言快速生成流程图、时序图、甘特图等多种图表类型。本文将带您了解 Mermaid 的基本语法，并通过示例帮助您快速上手。\n\n## 什么是 Mermaid？\n\nMermaid 是一种基于 JavaScript 的图表生成工具，支持在 Markdown 文件中直接嵌入代码块生成图表。它的核心优势在于：\n- 语法简单，易于学习。\n- 支持多种图表类型，包括流程图、时序图、甘特图、类图等。\n- 可与许多文档工具（如 GitHub、Hexo 等）无缝集成。\n\n## Mermaid 的基本语法\n\nMermaid 的语法通常以 `graph`、`sequenceDiagram` 等关键词开头，后续内容则定义图表的具体结构。以下是常用图表类型的语法示例：\n\n### 1. 流程图（Flowchart）\n\n流程图是 Mermaid 最常用的图表类型之一，用于描述流程或算法的执行顺序。\n\n```mermaid\ngraph TD\n  A[开始] --> B{条件判断}\n  B -->|是| C[执行操作1]\n  B -->|否| D[执行操作2]\n  C --> E[结束]\n  D --> E[结束]\n```\n\n**语法说明：**\n- `graph TD` 表示图表方向为从上到下（Top to Down）。\n- 方括号 `[]` 表示矩形节点，花括号 `{}` 表示菱形节点（通常用于条件判断）。\n- `-->` 表示节点之间的连接关系，`|是|` 和 `|否|` 是连接线上的标签。\n\n### 2. 时序图（Sequence Diagram）\n\n时序图用于描述多个参与者之间的交互顺序。\n\n```mermaid\nsequenceDiagram\n  participant 用户\n  participant 系统\n  用户->>系统: 提交请求\n  系统-->>用户: 返回结果\n```\n\n**语法说明：**\n- `participant` 定义参与者。\n- `->>` 表示消息的发送方向，`-->>` 表示返回消息。\n\n### 3. 甘特图（Gantt Chart）\n\n甘特图用于展示项目的时间规划。\n\n```mermaid\ngantt\n  title 项目计划\n  dateFormat  YYYY-MM-DD\n  section 任务\n  任务1 :a1, 2025-01-01, 10d\n  任务2 :after a1, 7d\n```\n\n**语法说明：**\n- `title` 定义图表标题。\n- `dateFormat` 定义日期格式。\n- 每个任务可以指定开始时间、持续时间或依赖关系。\n\n## 如何使用 Mermaid？\n\n1. **在 Markdown 文件中嵌入 Mermaid：**  \n   如果您的博客平台支持 Mermaid（如 Hexo、GitHub Pages 等），只需在代码块中以 `mermaid` 开头即可。\n\n2. **使用在线工具：**  \n   您可以使用 [Mermaid Live Editor](https://mermaid-js.github.io/mermaid-live-editor/) 在线编辑和预览 Mermaid 图表。\n\n## 示例代码\n\n以下是一个综合示例，展示如何结合多个 Mermaid 图表类型：\n\n```mermaid\ngraph LR\n  A[用户请求] --> B[服务器处理]\n  B --> C{是否成功}\n  C -->|是| D[返回结果]\n  C -->|否| E[记录错误]\n```\n\n**效果预览：**\n- 用户请求经过服务器处理后，根据处理结果返回不同的响应。\n\n## 参考资料\n\n如果您想进一步了解 Mermaid 的语法和功能，可以参考以下资源：\n- [Mermaid 官方文档](https://mermaid-js.github.io/mermaid/#/)\n- [Mermaid Live Editor](https://mermaid-js.github.io/mermaid-live-editor/)\n\nMermaid 的强大之处在于其简单直观的语法和灵活的图表生成能力，希望本文能够帮助您快速上手，并在您的文档或博客中创造更丰富的内容！","slug":"mermaid","published":1,"updated":"2025-01-22T06:37:08.992Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enf000iuyqg9s7538dd","content":"<div class=\"mermaid\">\n<svg id=\"mermaid-svg-3d1a686a476528a4\" xmlns=\"http://www.w3.org/2000/svg\" height=\"100%\" viewBox=\"0 0 294 458.8000030517578\" style=\"max-width:294px;\"><style>\n  .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100}\nsvg {\n  color: rgb(0, 0, 0);\n  font: normal normal 400 normal 16px / normal \"Times New Roman\";\n}\n  </style><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M137,62L137,87L137.5,112.50000152587889\" marker-end=\"url(#arrowhead21)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead21\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M114.76556565876743,190.56556718464637L66,248.8000030517578L66,284.8000030517578\" marker-end=\"url(#arrowhead22)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead22\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M160.23443296464552,190.5655655094756L208,248.8000030517578L208,284.8000030517578\" marker-end=\"url(#arrowhead23)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead23\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M66,326.8000030517578L66,351.8000030517578L111,380.9549326292226\" marker-end=\"url(#arrowhead24)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead24\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M208,326.8000030517578L208,351.8000030517578L163,380.9549326292226\" marker-end=\"url(#arrowhead25)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead25\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(66,248.8000030517578)\" style=\"opacity: 1;\"><g transform=\"translate(-8,-11)\" class=\"label\"><foreignObject width=\"16\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">是</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(208,248.8000030517578)\" style=\"opacity: 1;\"><g transform=\"translate(-8,-11)\" class=\"label\"><foreignObject width=\"16\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">否</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g class=\"node\" id=\"A\" transform=\"translate(137,41)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-21\" width=\"52\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-11)\"><foreignObject width=\"32\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">开始</div></foreignObject></g></g></g><g class=\"node\" id=\"B\" transform=\"translate(137,162.4000015258789)\" style=\"opacity: 1;\"><polygon points=\"50.400000000000006,0 100.80000000000001,-50.400000000000006 50.400000000000006,-100.80000000000001 0,-50.400000000000006\" rx=\"5\" ry=\"5\" transform=\"translate(-50.400000000000006,50.400000000000006)\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-11)\"><foreignObject width=\"64\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">条件判断</div></foreignObject></g></g></g><g class=\"node\" id=\"C\" transform=\"translate(66,305.8000030517578)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-46\" y=\"-21\" width=\"92\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36,-11)\"><foreignObject width=\"72\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">执行操作1</div></foreignObject></g></g></g><g class=\"node\" id=\"D\" transform=\"translate(208,305.8000030517578)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-46\" y=\"-21\" width=\"92\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36,-11)\"><foreignObject width=\"72\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">执行操作2</div></foreignObject></g></g></g><g class=\"node\" id=\"E\" transform=\"translate(137,397.8000030517578)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-21\" width=\"52\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-11)\"><foreignObject width=\"32\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">结束</div></foreignObject></g></g></g></g></g></g></svg>\n</div>\n\n","more":"<div class=\"mermaid\">\n<svg id=\"mermaid-svg-3d1a686a476528a4\" xmlns=\"http://www.w3.org/2000/svg\" height=\"100%\" viewBox=\"0 0 294 458.8000030517578\" style=\"max-width:294px;\"><style>\n  .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100}\nsvg {\n  color: rgb(0, 0, 0);\n  font: normal normal 400 normal 16px / normal \"Times New Roman\";\n}\n  </style><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M137,62L137,87L137.5,112.50000152587889\" marker-end=\"url(#arrowhead21)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead21\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M114.76556565876743,190.56556718464637L66,248.8000030517578L66,284.8000030517578\" marker-end=\"url(#arrowhead22)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead22\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M160.23443296464552,190.5655655094756L208,248.8000030517578L208,284.8000030517578\" marker-end=\"url(#arrowhead23)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead23\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M66,326.8000030517578L66,351.8000030517578L111,380.9549326292226\" marker-end=\"url(#arrowhead24)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead24\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath\" style=\"opacity: 1;\"><path class=\"path\" d=\"M208,326.8000030517578L208,351.8000030517578L163,380.9549326292226\" marker-end=\"url(#arrowhead25)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead25\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(66,248.8000030517578)\" style=\"opacity: 1;\"><g transform=\"translate(-8,-11)\" class=\"label\"><foreignObject width=\"16\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">是</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(208,248.8000030517578)\" style=\"opacity: 1;\"><g transform=\"translate(-8,-11)\" class=\"label\"><foreignObject width=\"16\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">否</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g class=\"node\" id=\"A\" transform=\"translate(137,41)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-21\" width=\"52\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-11)\"><foreignObject width=\"32\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">开始</div></foreignObject></g></g></g><g class=\"node\" id=\"B\" transform=\"translate(137,162.4000015258789)\" style=\"opacity: 1;\"><polygon points=\"50.400000000000006,0 100.80000000000001,-50.400000000000006 50.400000000000006,-100.80000000000001 0,-50.400000000000006\" rx=\"5\" ry=\"5\" transform=\"translate(-50.400000000000006,50.400000000000006)\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-11)\"><foreignObject width=\"64\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">条件判断</div></foreignObject></g></g></g><g class=\"node\" id=\"C\" transform=\"translate(66,305.8000030517578)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-46\" y=\"-21\" width=\"92\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36,-11)\"><foreignObject width=\"72\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">执行操作1</div></foreignObject></g></g></g><g class=\"node\" id=\"D\" transform=\"translate(208,305.8000030517578)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-46\" y=\"-21\" width=\"92\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-36,-11)\"><foreignObject width=\"72\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">执行操作2</div></foreignObject></g></g></g><g class=\"node\" id=\"E\" transform=\"translate(137,397.8000030517578)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-21\" width=\"52\" height=\"42\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-11)\"><foreignObject width=\"32\" height=\"22\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\">结束</div></foreignObject></g></g></g></g></g></g></svg>\n</div>\n\n"},{"title":"pip-tools","date":"2025-01-15T14:29:31.000Z","excerpt":"常常在python的虚拟环境中碰到依赖包版本冲突的问题吗? 试试pip-tools这个工具吧!","index_img":"/img/great.jpg","_content":"# Python依赖管理利器：pip-tools完全指南\n>  本文由 *Claude 3.5 Sonnet* 协助生成.\n\n![Python Version](https://img.shields.io/badge/Python-3.6+-blue.svg)\n![pip-tools](https://img.shields.io/badge/pip--tools-6.13.0-green.svg)\n\n在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致\"在我这里能运行\"的经典问题。\n<img src=\"/img/2025-01-16-23-58-21.png\" width=\"70%\" />\n针对上述问题, 本文将详细介绍如何使用 `pip-tools`，实现精确的依赖版本控制。\n\n## 目录\n1. [为什么需要 pip-tools？](#为什么需要-pip-tools)\n2. [环境准备](#环境准备)\n3. [pip-tools 的安装与使用](#pip-tools-的安装与使用)\n4. [最佳实践](#最佳实践)\n5. [常见问题解决](#常见问题解决)\n6. [高级用法](#高级用法)\n\n## 为什么需要 pip-tools？\n\n传统的依赖管理方式存在以下问题：\n- `requirements.txt` 手动维护容易出错\n- 间接依赖版本难以控制\n- 团队成员环境不一致\n- 依赖更新流程繁琐\n\n`pip-tools` 通过以下特性解决这些问题：\n- 自动生成完整的依赖关系\n- 锁定所有依赖的具体版本\n- 支持开发环境和生产环境分离\n- 提供简单的依赖更新机制\n\n## 环境准备\n\n### 1. 创建虚拟环境\n\n首先，我们需要创建一个独立的 Python 虚拟环境：\n\n```bash\n# 安装 virtualenv（如果还没有安装）\npip install virtualenv\n\n# 创建虚拟环境\nvirtualenv venv\n\n# 激活虚拟环境\n# Linux/macOS:\nsource venv/bin/activate\n# Windows:\n.\\venv\\Scripts\\activate\n```\n\n### 2. 项目结构\n\n推荐的项目结构如下：\n\n```\nmy_project/\n├── venv/\n├── requirements.in\n├── requirements.txt\n├── requirements-dev.in   # 可选：开发环境依赖\n├── requirements-dev.txt  # 可选：开发环境依赖锁定文件\n└── src/\n```\n\n## pip-tools 的安装与使用\n\n### 1. 安装 pip-tools\n\n```bash\npip install pip-tools\n```\n\n### 2. 创建依赖文件\n\n创建 `requirements.in` 文件，列出直接依赖：\n\n```bash\n# requirements.in\nflask\npython-dotenv\nopenai\nmarkdown-it-py\nfairy-doc[cpu]\n```\n> 注意, 此处不同的依赖包必须分行呈现.\n\n\n### 3. 生成锁定文件\n\n```bash\n# 生成 requirements.txt\npip-compile requirements.in\n\n# 如果有开发依赖\npip-compile requirements-dev.in\n```\n\n生成的 `requirements.txt` 示例：\n\n```bash\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile requirements.in\n#\nflask==2.3.3\n  --hash=sha256:...\npython-dotenv==1.0.0\n  --hash=sha256:...\nopenai==0.27.8\n  --hash=sha256:...\nmarkdown-it-py==3.0.0\n  --hash=sha256:...\nfairy-doc[cpu]==1.2.0\n  --hash=sha256:...\n```\n\n### 4. 安装依赖\n\n```bash\n# 安装所有依赖\npip-sync requirements.txt\n\n# 如果同时需要开发依赖\npip-sync requirements.txt requirements-dev.txt\n```\n\n## 最佳实践\n\n### 1. 版本控制\n\n```bash\n# requirements.in\nflask>=2.0.0,<3.0.0  # 指定版本范围\npython-dotenv~=1.0.0  # 允许补丁版本更新\nopenai==0.27.8       # 锁定具体版本\n```\n\n### 2. 依赖分组\n\n```bash\n# requirements-dev.in\n-r requirements.in    # 包含基础依赖\npytest               # 测试框架\nblack                # 代码格式化\nflake8               # 代码检查\n```\n\n### 3. 更新依赖\n\n```bash\n# 更新单个包\npip-compile --upgrade-package flask requirements.in\n\n# 更新所有包\npip-compile --upgrade requirements.in\n```\n\n## 常见问题解决\n\n### 1. 依赖冲突\n\n如果遇到依赖冲突，可以：\n- 检查 `requirements.in` 中的版本约束\n- 使用 `pip-compile --verbose` 查看详细信息\n- 考虑降级某些包的版本\n\n### 2. Hash 不匹配\n\n如果出现 hash 不匹配：\n```bash\npip-compile --generate-hashes requirements.in\n```\n\n### 3. 环境不一致\n\n确保团队成员：\n- 使用相同的 Python 版本\n- 严格执行 `pip-sync`\n- 不要手动 `pip install`\n\n## 高级用法\n\n### 1. 自定义输出格式\n\n```bash\n# 生成带注释的依赖文件\npip-compile --annotate requirements.in\n\n# 生成带 hashes 的依赖文件\npip-compile --generate-hashes requirements.in\n```\n\n### 2. 多环境配置\n\n```bash\n# 开发环境\npip-compile requirements-dev.in\n\n# 生产环境\npip-compile requirements.in --output-file requirements-prod.txt\n```\n\n### 3. 依赖更新策略\n\n```bash\n# 只更新安全相关的包\npip-compile --upgrade-package flask --upgrade-package \"requests>=2.31.0\"\n\n# 保持现有版本\npip-compile --no-upgrade requirements.in\n```\n\n## 结语\n\n通过使用 `pip-tools`，我们可以：\n- 实现精确的依赖版本控制\n- 简化依赖管理流程\n- 确保团队环境一致性\n- 提高项目的可维护性\n\n希望这篇指南能帮助你更好地管理 Python 项目的依赖！\n<img src = \"/img/great.jpg\" width = \"70%\">\n## 参考资料\n\n- [pip-tools 官方文档](https://github.com/jazzband/pip-tools)\n- [Python Packaging User Guide](https://packaging.python.org/)\n- [PEP 508 – Dependency specification for Python Software Packages](https://www.python.org/dev/peps/pep-0508/)\n","source":"_posts/pip-tools.md","raw":"---\ntitle: pip-tools\ndate: 2025-01-15 22:29:31\ntags: \n- python\n- 环境配置\ncategories: 通用技能\nexcerpt: 常常在python的虚拟环境中碰到依赖包版本冲突的问题吗? 试试pip-tools这个工具吧!\nindex_img: /img/great.jpg\n---\n# Python依赖管理利器：pip-tools完全指南\n>  本文由 *Claude 3.5 Sonnet* 协助生成.\n\n![Python Version](https://img.shields.io/badge/Python-3.6+-blue.svg)\n![pip-tools](https://img.shields.io/badge/pip--tools-6.13.0-green.svg)\n\n在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致\"在我这里能运行\"的经典问题。\n<img src=\"/img/2025-01-16-23-58-21.png\" width=\"70%\" />\n针对上述问题, 本文将详细介绍如何使用 `pip-tools`，实现精确的依赖版本控制。\n\n## 目录\n1. [为什么需要 pip-tools？](#为什么需要-pip-tools)\n2. [环境准备](#环境准备)\n3. [pip-tools 的安装与使用](#pip-tools-的安装与使用)\n4. [最佳实践](#最佳实践)\n5. [常见问题解决](#常见问题解决)\n6. [高级用法](#高级用法)\n\n## 为什么需要 pip-tools？\n\n传统的依赖管理方式存在以下问题：\n- `requirements.txt` 手动维护容易出错\n- 间接依赖版本难以控制\n- 团队成员环境不一致\n- 依赖更新流程繁琐\n\n`pip-tools` 通过以下特性解决这些问题：\n- 自动生成完整的依赖关系\n- 锁定所有依赖的具体版本\n- 支持开发环境和生产环境分离\n- 提供简单的依赖更新机制\n\n## 环境准备\n\n### 1. 创建虚拟环境\n\n首先，我们需要创建一个独立的 Python 虚拟环境：\n\n```bash\n# 安装 virtualenv（如果还没有安装）\npip install virtualenv\n\n# 创建虚拟环境\nvirtualenv venv\n\n# 激活虚拟环境\n# Linux/macOS:\nsource venv/bin/activate\n# Windows:\n.\\venv\\Scripts\\activate\n```\n\n### 2. 项目结构\n\n推荐的项目结构如下：\n\n```\nmy_project/\n├── venv/\n├── requirements.in\n├── requirements.txt\n├── requirements-dev.in   # 可选：开发环境依赖\n├── requirements-dev.txt  # 可选：开发环境依赖锁定文件\n└── src/\n```\n\n## pip-tools 的安装与使用\n\n### 1. 安装 pip-tools\n\n```bash\npip install pip-tools\n```\n\n### 2. 创建依赖文件\n\n创建 `requirements.in` 文件，列出直接依赖：\n\n```bash\n# requirements.in\nflask\npython-dotenv\nopenai\nmarkdown-it-py\nfairy-doc[cpu]\n```\n> 注意, 此处不同的依赖包必须分行呈现.\n\n\n### 3. 生成锁定文件\n\n```bash\n# 生成 requirements.txt\npip-compile requirements.in\n\n# 如果有开发依赖\npip-compile requirements-dev.in\n```\n\n生成的 `requirements.txt` 示例：\n\n```bash\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile requirements.in\n#\nflask==2.3.3\n  --hash=sha256:...\npython-dotenv==1.0.0\n  --hash=sha256:...\nopenai==0.27.8\n  --hash=sha256:...\nmarkdown-it-py==3.0.0\n  --hash=sha256:...\nfairy-doc[cpu]==1.2.0\n  --hash=sha256:...\n```\n\n### 4. 安装依赖\n\n```bash\n# 安装所有依赖\npip-sync requirements.txt\n\n# 如果同时需要开发依赖\npip-sync requirements.txt requirements-dev.txt\n```\n\n## 最佳实践\n\n### 1. 版本控制\n\n```bash\n# requirements.in\nflask>=2.0.0,<3.0.0  # 指定版本范围\npython-dotenv~=1.0.0  # 允许补丁版本更新\nopenai==0.27.8       # 锁定具体版本\n```\n\n### 2. 依赖分组\n\n```bash\n# requirements-dev.in\n-r requirements.in    # 包含基础依赖\npytest               # 测试框架\nblack                # 代码格式化\nflake8               # 代码检查\n```\n\n### 3. 更新依赖\n\n```bash\n# 更新单个包\npip-compile --upgrade-package flask requirements.in\n\n# 更新所有包\npip-compile --upgrade requirements.in\n```\n\n## 常见问题解决\n\n### 1. 依赖冲突\n\n如果遇到依赖冲突，可以：\n- 检查 `requirements.in` 中的版本约束\n- 使用 `pip-compile --verbose` 查看详细信息\n- 考虑降级某些包的版本\n\n### 2. Hash 不匹配\n\n如果出现 hash 不匹配：\n```bash\npip-compile --generate-hashes requirements.in\n```\n\n### 3. 环境不一致\n\n确保团队成员：\n- 使用相同的 Python 版本\n- 严格执行 `pip-sync`\n- 不要手动 `pip install`\n\n## 高级用法\n\n### 1. 自定义输出格式\n\n```bash\n# 生成带注释的依赖文件\npip-compile --annotate requirements.in\n\n# 生成带 hashes 的依赖文件\npip-compile --generate-hashes requirements.in\n```\n\n### 2. 多环境配置\n\n```bash\n# 开发环境\npip-compile requirements-dev.in\n\n# 生产环境\npip-compile requirements.in --output-file requirements-prod.txt\n```\n\n### 3. 依赖更新策略\n\n```bash\n# 只更新安全相关的包\npip-compile --upgrade-package flask --upgrade-package \"requests>=2.31.0\"\n\n# 保持现有版本\npip-compile --no-upgrade requirements.in\n```\n\n## 结语\n\n通过使用 `pip-tools`，我们可以：\n- 实现精确的依赖版本控制\n- 简化依赖管理流程\n- 确保团队环境一致性\n- 提高项目的可维护性\n\n希望这篇指南能帮助你更好地管理 Python 项目的依赖！\n<img src = \"/img/great.jpg\" width = \"70%\">\n## 参考资料\n\n- [pip-tools 官方文档](https://github.com/jazzband/pip-tools)\n- [Python Packaging User Guide](https://packaging.python.org/)\n- [PEP 508 – Dependency specification for Python Software Packages](https://www.python.org/dev/peps/pep-0508/)\n","slug":"pip-tools","published":1,"updated":"2025-01-19T11:46:34.124Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3eng000luyqg98nm95v6","content":"<h1 id=\"Python依赖管理利器：pip-tools完全指南\"><a href=\"#Python依赖管理利器：pip-tools完全指南\" class=\"headerlink\" title=\"Python依赖管理利器：pip-tools完全指南\"></a>Python依赖管理利器：pip-tools完全指南</h1><blockquote>\n<p> 本文由 <em>Claude 3.5 Sonnet</em> 协助生成.</p>\n</blockquote>\n<p><img src=\"https://img.shields.io/badge/Python-3.6+-blue.svg\" alt=\"Python Version\"><br><img src=\"https://img.shields.io/badge/pip--tools-6.13.0-green.svg\" alt=\"pip-tools\"></p>\n<p>在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致”在我这里能运行”的经典问题。<br><img src=\"/img/2025-01-16-23-58-21.png\" width=\"70%\" /><br>针对上述问题, 本文将详细介绍如何使用 <code>pip-tools</code>，实现精确的依赖版本控制。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#为什么需要-pip-tools\">为什么需要 pip-tools？</a></li>\n<li><a href=\"#环境准备\">环境准备</a></li>\n<li><a href=\"#pip-tools-的安装与使用\">pip-tools 的安装与使用</a></li>\n<li><a href=\"#最佳实践\">最佳实践</a></li>\n<li><a href=\"#常见问题解决\">常见问题解决</a></li>\n<li><a href=\"#高级用法\">高级用法</a></li>\n</ol>\n<h2 id=\"为什么需要-pip-tools？\"><a href=\"#为什么需要-pip-tools？\" class=\"headerlink\" title=\"为什么需要 pip-tools？\"></a>为什么需要 pip-tools？</h2><p>传统的依赖管理方式存在以下问题：</p>\n<ul>\n<li><code>requirements.txt</code> 手动维护容易出错</li>\n<li>间接依赖版本难以控制</li>\n<li>团队成员环境不一致</li>\n<li>依赖更新流程繁琐</li>\n</ul>\n<p><code>pip-tools</code> 通过以下特性解决这些问题：</p>\n<ul>\n<li>自动生成完整的依赖关系</li>\n<li>锁定所有依赖的具体版本</li>\n<li>支持开发环境和生产环境分离</li>\n<li>提供简单的依赖更新机制</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"1-创建虚拟环境\"><a href=\"#1-创建虚拟环境\" class=\"headerlink\" title=\"1. 创建虚拟环境\"></a>1. 创建虚拟环境</h3><p>首先，我们需要创建一个独立的 Python 虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装 virtualenv（如果还没有安装）</span><br>pip install virtualenv<br><br><span class=\"hljs-comment\"># 创建虚拟环境</span><br>virtualenv venv<br><br><span class=\"hljs-comment\"># 激活虚拟环境</span><br><span class=\"hljs-comment\"># Linux/macOS:</span><br><span class=\"hljs-built_in\">source</span> venv/bin/activate<br><span class=\"hljs-comment\"># Windows:</span><br>.\\venv\\Scripts\\activate<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-项目结构\"><a href=\"#2-项目结构\" class=\"headerlink\" title=\"2. 项目结构\"></a>2. 项目结构</h3><p>推荐的项目结构如下：</p>\n<figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mizar\">my_project/<br>├── venv/<br>├── <span class=\"hljs-keyword\">requirements</span>.<span class=\"hljs-keyword\">in</span><br>├── <span class=\"hljs-keyword\">requirements</span>.txt<br>├── <span class=\"hljs-keyword\">requirements</span>-dev.<span class=\"hljs-keyword\">in</span>   # 可选：开发环境依赖<br>├── <span class=\"hljs-keyword\">requirements</span>-dev.txt  # 可选：开发环境依赖锁定文件<br>└── src/<br></code></pre></td></tr></table></figure>\n<h2 id=\"pip-tools-的安装与使用\"><a href=\"#pip-tools-的安装与使用\" class=\"headerlink\" title=\"pip-tools 的安装与使用\"></a>pip-tools 的安装与使用</h2><h3 id=\"1-安装-pip-tools\"><a href=\"#1-安装-pip-tools\" class=\"headerlink\" title=\"1. 安装 pip-tools\"></a>1. 安装 pip-tools</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install pip-tools<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-创建依赖文件\"><a href=\"#2-创建依赖文件\" class=\"headerlink\" title=\"2. 创建依赖文件\"></a>2. 创建依赖文件</h3><p>创建 <code>requirements.in</code> 文件，列出直接依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># requirements.in</span><br>flask<br>python-dotenv<br>openai<br>markdown-it-py<br>fairy-doc[cpu]<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 此处不同的依赖包必须分行呈现.</p>\n</blockquote>\n<h3 id=\"3-生成锁定文件\"><a href=\"#3-生成锁定文件\" class=\"headerlink\" title=\"3. 生成锁定文件\"></a>3. 生成锁定文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成 requirements.txt</span><br>pip-compile requirements.in<br><br><span class=\"hljs-comment\"># 如果有开发依赖</span><br>pip-compile requirements-dev.in<br></code></pre></td></tr></table></figure>\n<p>生成的 <code>requirements.txt</code> 示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># This file is autogenerated by pip-compile</span><br><span class=\"hljs-comment\"># To update, run:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#    pip-compile requirements.in</span><br><span class=\"hljs-comment\">#</span><br>flask==2.3.3<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>python-dotenv==1.0.0<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>openai==0.27.8<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>markdown-it-py==3.0.0<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>fairy-doc[cpu]==1.2.0<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-安装依赖\"><a href=\"#4-安装依赖\" class=\"headerlink\" title=\"4. 安装依赖\"></a>4. 安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装所有依赖</span><br>pip-sync requirements.txt<br><br><span class=\"hljs-comment\"># 如果同时需要开发依赖</span><br>pip-sync requirements.txt requirements-dev.txt<br></code></pre></td></tr></table></figure>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-版本控制\"><a href=\"#1-版本控制\" class=\"headerlink\" title=\"1. 版本控制\"></a>1. 版本控制</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># requirements.in</span><br>flask&gt;=2.0.0,&lt;3.0.0  <span class=\"hljs-comment\"># 指定版本范围</span><br>python-dotenv~=1.0.0  <span class=\"hljs-comment\"># 允许补丁版本更新</span><br>openai==0.27.8       <span class=\"hljs-comment\"># 锁定具体版本</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-依赖分组\"><a href=\"#2-依赖分组\" class=\"headerlink\" title=\"2. 依赖分组\"></a>2. 依赖分组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># requirements-dev.in</span><br>-r requirements.in    <span class=\"hljs-comment\"># 包含基础依赖</span><br>pytest               <span class=\"hljs-comment\"># 测试框架</span><br>black                <span class=\"hljs-comment\"># 代码格式化</span><br>flake8               <span class=\"hljs-comment\"># 代码检查</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-更新依赖\"><a href=\"#3-更新依赖\" class=\"headerlink\" title=\"3. 更新依赖\"></a>3. 更新依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 更新单个包</span><br>pip-compile --upgrade-package flask requirements.in<br><br><span class=\"hljs-comment\"># 更新所有包</span><br>pip-compile --upgrade requirements.in<br></code></pre></td></tr></table></figure>\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><h3 id=\"1-依赖冲突\"><a href=\"#1-依赖冲突\" class=\"headerlink\" title=\"1. 依赖冲突\"></a>1. 依赖冲突</h3><p>如果遇到依赖冲突，可以：</p>\n<ul>\n<li>检查 <code>requirements.in</code> 中的版本约束</li>\n<li>使用 <code>pip-compile --verbose</code> 查看详细信息</li>\n<li>考虑降级某些包的版本</li>\n</ul>\n<h3 id=\"2-Hash-不匹配\"><a href=\"#2-Hash-不匹配\" class=\"headerlink\" title=\"2. Hash 不匹配\"></a>2. Hash 不匹配</h3><p>如果出现 hash 不匹配：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip-compile --generate-hashes requirements.in<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"3-环境不一致\"><a href=\"#3-环境不一致\" class=\"headerlink\" title=\"3. 环境不一致\"></a>3. 环境不一致</h3><p>确保团队成员：</p>\n<ul>\n<li>使用相同的 Python 版本</li>\n<li>严格执行 <code>pip-sync</code></li>\n<li>不要手动 <code>pip install</code></li>\n</ul>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><h3 id=\"1-自定义输出格式\"><a href=\"#1-自定义输出格式\" class=\"headerlink\" title=\"1. 自定义输出格式\"></a>1. 自定义输出格式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成带注释的依赖文件</span><br>pip-compile --annotate requirements.in<br><br><span class=\"hljs-comment\"># 生成带 hashes 的依赖文件</span><br>pip-compile --generate-hashes requirements.in<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-多环境配置\"><a href=\"#2-多环境配置\" class=\"headerlink\" title=\"2. 多环境配置\"></a>2. 多环境配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 开发环境</span><br>pip-compile requirements-dev.in<br><br><span class=\"hljs-comment\"># 生产环境</span><br>pip-compile requirements.in --output-file requirements-prod.txt<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-依赖更新策略\"><a href=\"#3-依赖更新策略\" class=\"headerlink\" title=\"3. 依赖更新策略\"></a>3. 依赖更新策略</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 只更新安全相关的包</span><br>pip-compile --upgrade-package flask --upgrade-package <span class=\"hljs-string\">&quot;requests&gt;=2.31.0&quot;</span><br><br><span class=\"hljs-comment\"># 保持现有版本</span><br>pip-compile --no-upgrade requirements.in<br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>通过使用 <code>pip-tools</code>，我们可以：</p>\n<ul>\n<li>实现精确的依赖版本控制</li>\n<li>简化依赖管理流程</li>\n<li>确保团队环境一致性</li>\n<li>提高项目的可维护性</li>\n</ul>\n<p>希望这篇指南能帮助你更好地管理 Python 项目的依赖！<br><img src = \"/img/great.jpg\" width = \"70%\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/jazzband/pip-tools\">pip-tools 官方文档</a></li>\n<li><a href=\"https://packaging.python.org/\">Python Packaging User Guide</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0508/\">PEP 508 – Dependency specification for Python Software Packages</a></li>\n</ul>\n","more":"<h1 id=\"Python依赖管理利器：pip-tools完全指南\"><a href=\"#Python依赖管理利器：pip-tools完全指南\" class=\"headerlink\" title=\"Python依赖管理利器：pip-tools完全指南\"></a>Python依赖管理利器：pip-tools完全指南</h1><blockquote>\n<p> 本文由 <em>Claude 3.5 Sonnet</em> 协助生成.</p>\n</blockquote>\n<p><img src=\"https://img.shields.io/badge/Python-3.6+-blue.svg\" alt=\"Python Version\"><br><img src=\"https://img.shields.io/badge/pip--tools-6.13.0-green.svg\" alt=\"pip-tools\"></p>\n<p>在 Python 项目开发中，依赖管理是一个常见但棘手的问题。特别是在团队协作时，不同成员的环境可能存在细微差异，导致”在我这里能运行”的经典问题。<br><img src=\"/img/2025-01-16-23-58-21.png\" width=\"70%\" /><br>针对上述问题, 本文将详细介绍如何使用 <code>pip-tools</code>，实现精确的依赖版本控制。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#为什么需要-pip-tools\">为什么需要 pip-tools？</a></li>\n<li><a href=\"#环境准备\">环境准备</a></li>\n<li><a href=\"#pip-tools-的安装与使用\">pip-tools 的安装与使用</a></li>\n<li><a href=\"#最佳实践\">最佳实践</a></li>\n<li><a href=\"#常见问题解决\">常见问题解决</a></li>\n<li><a href=\"#高级用法\">高级用法</a></li>\n</ol>\n<h2 id=\"为什么需要-pip-tools？\"><a href=\"#为什么需要-pip-tools？\" class=\"headerlink\" title=\"为什么需要 pip-tools？\"></a>为什么需要 pip-tools？</h2><p>传统的依赖管理方式存在以下问题：</p>\n<ul>\n<li><code>requirements.txt</code> 手动维护容易出错</li>\n<li>间接依赖版本难以控制</li>\n<li>团队成员环境不一致</li>\n<li>依赖更新流程繁琐</li>\n</ul>\n<p><code>pip-tools</code> 通过以下特性解决这些问题：</p>\n<ul>\n<li>自动生成完整的依赖关系</li>\n<li>锁定所有依赖的具体版本</li>\n<li>支持开发环境和生产环境分离</li>\n<li>提供简单的依赖更新机制</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"1-创建虚拟环境\"><a href=\"#1-创建虚拟环境\" class=\"headerlink\" title=\"1. 创建虚拟环境\"></a>1. 创建虚拟环境</h3><p>首先，我们需要创建一个独立的 Python 虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装 virtualenv（如果还没有安装）</span><br>pip install virtualenv<br><br><span class=\"hljs-comment\"># 创建虚拟环境</span><br>virtualenv venv<br><br><span class=\"hljs-comment\"># 激活虚拟环境</span><br><span class=\"hljs-comment\"># Linux/macOS:</span><br><span class=\"hljs-built_in\">source</span> venv/bin/activate<br><span class=\"hljs-comment\"># Windows:</span><br>.\\venv\\Scripts\\activate<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-项目结构\"><a href=\"#2-项目结构\" class=\"headerlink\" title=\"2. 项目结构\"></a>2. 项目结构</h3><p>推荐的项目结构如下：</p>\n<figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mizar\">my_project/<br>├── venv/<br>├── <span class=\"hljs-keyword\">requirements</span>.<span class=\"hljs-keyword\">in</span><br>├── <span class=\"hljs-keyword\">requirements</span>.txt<br>├── <span class=\"hljs-keyword\">requirements</span>-dev.<span class=\"hljs-keyword\">in</span>   # 可选：开发环境依赖<br>├── <span class=\"hljs-keyword\">requirements</span>-dev.txt  # 可选：开发环境依赖锁定文件<br>└── src/<br></code></pre></td></tr></table></figure>\n<h2 id=\"pip-tools-的安装与使用\"><a href=\"#pip-tools-的安装与使用\" class=\"headerlink\" title=\"pip-tools 的安装与使用\"></a>pip-tools 的安装与使用</h2><h3 id=\"1-安装-pip-tools\"><a href=\"#1-安装-pip-tools\" class=\"headerlink\" title=\"1. 安装 pip-tools\"></a>1. 安装 pip-tools</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install pip-tools<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-创建依赖文件\"><a href=\"#2-创建依赖文件\" class=\"headerlink\" title=\"2. 创建依赖文件\"></a>2. 创建依赖文件</h3><p>创建 <code>requirements.in</code> 文件，列出直接依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># requirements.in</span><br>flask<br>python-dotenv<br>openai<br>markdown-it-py<br>fairy-doc[cpu]<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意, 此处不同的依赖包必须分行呈现.</p>\n</blockquote>\n<h3 id=\"3-生成锁定文件\"><a href=\"#3-生成锁定文件\" class=\"headerlink\" title=\"3. 生成锁定文件\"></a>3. 生成锁定文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成 requirements.txt</span><br>pip-compile requirements.in<br><br><span class=\"hljs-comment\"># 如果有开发依赖</span><br>pip-compile requirements-dev.in<br></code></pre></td></tr></table></figure>\n<p>生成的 <code>requirements.txt</code> 示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># This file is autogenerated by pip-compile</span><br><span class=\"hljs-comment\"># To update, run:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#    pip-compile requirements.in</span><br><span class=\"hljs-comment\">#</span><br>flask==2.3.3<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>python-dotenv==1.0.0<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>openai==0.27.8<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>markdown-it-py==3.0.0<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br>fairy-doc[cpu]==1.2.0<br>  --<span class=\"hljs-built_in\">hash</span>=sha256:...<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-安装依赖\"><a href=\"#4-安装依赖\" class=\"headerlink\" title=\"4. 安装依赖\"></a>4. 安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装所有依赖</span><br>pip-sync requirements.txt<br><br><span class=\"hljs-comment\"># 如果同时需要开发依赖</span><br>pip-sync requirements.txt requirements-dev.txt<br></code></pre></td></tr></table></figure>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-版本控制\"><a href=\"#1-版本控制\" class=\"headerlink\" title=\"1. 版本控制\"></a>1. 版本控制</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># requirements.in</span><br>flask&gt;=2.0.0,&lt;3.0.0  <span class=\"hljs-comment\"># 指定版本范围</span><br>python-dotenv~=1.0.0  <span class=\"hljs-comment\"># 允许补丁版本更新</span><br>openai==0.27.8       <span class=\"hljs-comment\"># 锁定具体版本</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-依赖分组\"><a href=\"#2-依赖分组\" class=\"headerlink\" title=\"2. 依赖分组\"></a>2. 依赖分组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># requirements-dev.in</span><br>-r requirements.in    <span class=\"hljs-comment\"># 包含基础依赖</span><br>pytest               <span class=\"hljs-comment\"># 测试框架</span><br>black                <span class=\"hljs-comment\"># 代码格式化</span><br>flake8               <span class=\"hljs-comment\"># 代码检查</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-更新依赖\"><a href=\"#3-更新依赖\" class=\"headerlink\" title=\"3. 更新依赖\"></a>3. 更新依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 更新单个包</span><br>pip-compile --upgrade-package flask requirements.in<br><br><span class=\"hljs-comment\"># 更新所有包</span><br>pip-compile --upgrade requirements.in<br></code></pre></td></tr></table></figure>\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><h3 id=\"1-依赖冲突\"><a href=\"#1-依赖冲突\" class=\"headerlink\" title=\"1. 依赖冲突\"></a>1. 依赖冲突</h3><p>如果遇到依赖冲突，可以：</p>\n<ul>\n<li>检查 <code>requirements.in</code> 中的版本约束</li>\n<li>使用 <code>pip-compile --verbose</code> 查看详细信息</li>\n<li>考虑降级某些包的版本</li>\n</ul>\n<h3 id=\"2-Hash-不匹配\"><a href=\"#2-Hash-不匹配\" class=\"headerlink\" title=\"2. Hash 不匹配\"></a>2. Hash 不匹配</h3><p>如果出现 hash 不匹配：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip-compile --generate-hashes requirements.in<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"3-环境不一致\"><a href=\"#3-环境不一致\" class=\"headerlink\" title=\"3. 环境不一致\"></a>3. 环境不一致</h3><p>确保团队成员：</p>\n<ul>\n<li>使用相同的 Python 版本</li>\n<li>严格执行 <code>pip-sync</code></li>\n<li>不要手动 <code>pip install</code></li>\n</ul>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><h3 id=\"1-自定义输出格式\"><a href=\"#1-自定义输出格式\" class=\"headerlink\" title=\"1. 自定义输出格式\"></a>1. 自定义输出格式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成带注释的依赖文件</span><br>pip-compile --annotate requirements.in<br><br><span class=\"hljs-comment\"># 生成带 hashes 的依赖文件</span><br>pip-compile --generate-hashes requirements.in<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-多环境配置\"><a href=\"#2-多环境配置\" class=\"headerlink\" title=\"2. 多环境配置\"></a>2. 多环境配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 开发环境</span><br>pip-compile requirements-dev.in<br><br><span class=\"hljs-comment\"># 生产环境</span><br>pip-compile requirements.in --output-file requirements-prod.txt<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-依赖更新策略\"><a href=\"#3-依赖更新策略\" class=\"headerlink\" title=\"3. 依赖更新策略\"></a>3. 依赖更新策略</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 只更新安全相关的包</span><br>pip-compile --upgrade-package flask --upgrade-package <span class=\"hljs-string\">&quot;requests&gt;=2.31.0&quot;</span><br><br><span class=\"hljs-comment\"># 保持现有版本</span><br>pip-compile --no-upgrade requirements.in<br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>通过使用 <code>pip-tools</code>，我们可以：</p>\n<ul>\n<li>实现精确的依赖版本控制</li>\n<li>简化依赖管理流程</li>\n<li>确保团队环境一致性</li>\n<li>提高项目的可维护性</li>\n</ul>\n<p>希望这篇指南能帮助你更好地管理 Python 项目的依赖！<br><img src = \"/img/great.jpg\" width = \"70%\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/jazzband/pip-tools\">pip-tools 官方文档</a></li>\n<li><a href=\"https://packaging.python.org/\">Python Packaging User Guide</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0508/\">PEP 508 – Dependency specification for Python Software Packages</a></li>\n</ul>\n"},{"title":"React 主题切换实现：从基础到实践","date":"2025-01-23T02:06:34.000Z","excerpt":"通过CSS变量和上下文管理, 以React框架为例介绍主题的变色设置.","math":true,"index_img":"/img/雷姆拉姆.jpg","_content":"$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个\"环境变量\", 且`index.css`中的 CSS 应随这个\"环境变量\"而改变。\n\n要实现这个需求,我们需要解决以下几个问题：\n\n1. 如何定义和管理这个\"环境变量\"？\n2. 组件如何控制这个变量？\n3. CSS 如何响应变量的变化？\n\n这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。\n\n## 基础知识\n### Context 的创建和使用\n\n**Context** 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。\n\n```tsx\n// 创建 Context\nconst ThemeContext = createContext<ThemeType | undefined>(undefined);\n\n// 提供 Context\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 使用 Context\nconst ChildComponent = () => {\n  const { theme } = useContext(ThemeContext);\n  return <div>Current theme: {theme}</div>;\n};\n```\n因此, 我们可以在`src/context/`目录下创建一个`ThemeContext`来定义和管理相关上下文.\n- 在其中利用`useState`定义主题反转的函数;\n- 在点击按钮组件中使用上述的函数,\n\n### CSS 变量\n\nCSS 变量(也称为自定义属性)允许我们定义可重用的值：\n\n```css\n/* 定义变量 */\n:root {\n  --primary-color: #007bff;\n}\n\n/* 使用变量 */\n.button {\n  background-color: var(--primary-color);\n}\n```\n1. 为了区分CSS的变量与常量, `--xx-y`的命名格式是CSS变量的规范;\n2. 通过`var(<c--xx-y>)`的形式使用CSS变量.\n\n### HTML data-* 属性\n\n`document.documentElement.setAttribute('data-theme', theme)` 的作用是在 HTML 根元素上设置一个自定义数据属性：\n\n```js\n// JavaScript 设置\ndocument.documentElement.setAttribute('data-theme', 'dark');\n\n// 结果的 HTML\n<html data-theme=\"dark\">\n  ...\n</html>\n\n// 对应的 CSS\n[data-theme='dark'] {\n  --bg-color: #141414;\n}\n```\n\n## 主题切换实现\n\n### 主题变量设计\n\n首先设计主题相关的 CSS 变量：\n\n```css\n:root {\n  /* Light theme variables */\n  --bg-color: #ffffff;\n  --text-color: #000000;\n  --sidebar-bg: #f0f2f5;\n  --border-color: #e5e2e2;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n}\n\n[data-theme='dark'] {\n  --bg-color: #141414;\n  --text-color: #ffffff;\n  --sidebar-bg: #1f1f1f;\n  --border-color: #434343;\n  --shadow-color: rgba(0, 0, 0, 0.3);\n}\n```\n> 可根据实际需要增减CSS变量.\n\n### 主题状态管理\n\n创建主题 Context 进行状态管理：\n\n```typescript\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n```\n\n<br>\n\n在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:\n```html\n<!-- App.tsx -->\nimport { ThemeProvider } from './context/ThemeContext';\n\nfunction App(){\n    ...\n    return (\n        <ThemeProvider>\n            <div className = \"App\">\n                ...\n            </div>\n        </ThemeProvider>\n    )\n}\n\n```\n### 主题切换组件\n\n实现主题切换按钮：\n\n```typescript\nimport React from 'react';\nimport { Tooltip } from 'antd';\nimport { useTheme } from '../context/ThemeContext';\nimport { BsSun, BsMoonStars } from 'react-icons/bs';\nimport styles from './ThemeToggle.module.css';\n\nconst ThemeToggle: React.FC = () => {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Tooltip title={theme === 'light' ? '切换到暗色模式' : '切换到亮色模式'} placement=\"right\">\n      <button \n        className={styles.themeToggle} \n        onClick={toggleTheme}\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'light' ? <BsMoonStars /> : <BsSun />}\n      </button>\n    </Tooltip>\n  );\n};\n\nexport default ThemeToggle;\n```\n1. 此处使用`antd`的`Tooltip`, 用于在鼠标悬浮按钮组件时显示文字提示;\n2. `aria-label=\"Toggle theme\"` 在`<button>`内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 \"Toggle theme“.\n\n\n### 组件样式应用\n在组件内部使用CSS变量的方式已经在 [CSS变量](#CSS-变量) 中介绍, 在此给出示例:\n```css\n.sidebar_container {\n    background-color: var(--sidebar-bg);\n    color: var(--text-color);\n}\n\n.icon_button {\n    color: var(--text-color);\n    background-color: transparent;\n}\n\n.icon_button:hover {\n    background-color: var(--sidebar-hover-color);\n}\n```\n\n\n## 总结与参考\n通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：\n\n1. 使用 CSS 变量管理主题样式\n2. 通过 Context API 实现状态管理\n3. 利用 data-theme 属性切换主题\n4. 本地存储保持主题持久化\n\n### 参考 🔗\n1. [React Context API](https://react.dev/reference/react/useContext)\n2. [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n3. [HTML data-* Attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)","source":"_posts/themechange.md","raw":"---\ntitle: React 主题切换实现：从基础到实践\ndate: 2025-01-23 10:06:34\ntags:\ncategories:\nexcerpt: 通过CSS变量和上下文管理, 以React框架为例介绍主题的变色设置.\nmath: true\nindex_img: /img/雷姆拉姆.jpg\n---\n$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个\"环境变量\", 且`index.css`中的 CSS 应随这个\"环境变量\"而改变。\n\n要实现这个需求,我们需要解决以下几个问题：\n\n1. 如何定义和管理这个\"环境变量\"？\n2. 组件如何控制这个变量？\n3. CSS 如何响应变量的变化？\n\n这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。\n\n## 基础知识\n### Context 的创建和使用\n\n**Context** 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。\n\n```tsx\n// 创建 Context\nconst ThemeContext = createContext<ThemeType | undefined>(undefined);\n\n// 提供 Context\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 使用 Context\nconst ChildComponent = () => {\n  const { theme } = useContext(ThemeContext);\n  return <div>Current theme: {theme}</div>;\n};\n```\n因此, 我们可以在`src/context/`目录下创建一个`ThemeContext`来定义和管理相关上下文.\n- 在其中利用`useState`定义主题反转的函数;\n- 在点击按钮组件中使用上述的函数,\n\n### CSS 变量\n\nCSS 变量(也称为自定义属性)允许我们定义可重用的值：\n\n```css\n/* 定义变量 */\n:root {\n  --primary-color: #007bff;\n}\n\n/* 使用变量 */\n.button {\n  background-color: var(--primary-color);\n}\n```\n1. 为了区分CSS的变量与常量, `--xx-y`的命名格式是CSS变量的规范;\n2. 通过`var(<c--xx-y>)`的形式使用CSS变量.\n\n### HTML data-* 属性\n\n`document.documentElement.setAttribute('data-theme', theme)` 的作用是在 HTML 根元素上设置一个自定义数据属性：\n\n```js\n// JavaScript 设置\ndocument.documentElement.setAttribute('data-theme', 'dark');\n\n// 结果的 HTML\n<html data-theme=\"dark\">\n  ...\n</html>\n\n// 对应的 CSS\n[data-theme='dark'] {\n  --bg-color: #141414;\n}\n```\n\n## 主题切换实现\n\n### 主题变量设计\n\n首先设计主题相关的 CSS 变量：\n\n```css\n:root {\n  /* Light theme variables */\n  --bg-color: #ffffff;\n  --text-color: #000000;\n  --sidebar-bg: #f0f2f5;\n  --border-color: #e5e2e2;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n}\n\n[data-theme='dark'] {\n  --bg-color: #141414;\n  --text-color: #ffffff;\n  --sidebar-bg: #1f1f1f;\n  --border-color: #434343;\n  --shadow-color: rgba(0, 0, 0, 0.3);\n}\n```\n> 可根据实际需要增减CSS变量.\n\n### 主题状态管理\n\n创建主题 Context 进行状态管理：\n\n```typescript\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n```\n\n<br>\n\n在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:\n```html\n<!-- App.tsx -->\nimport { ThemeProvider } from './context/ThemeContext';\n\nfunction App(){\n    ...\n    return (\n        <ThemeProvider>\n            <div className = \"App\">\n                ...\n            </div>\n        </ThemeProvider>\n    )\n}\n\n```\n### 主题切换组件\n\n实现主题切换按钮：\n\n```typescript\nimport React from 'react';\nimport { Tooltip } from 'antd';\nimport { useTheme } from '../context/ThemeContext';\nimport { BsSun, BsMoonStars } from 'react-icons/bs';\nimport styles from './ThemeToggle.module.css';\n\nconst ThemeToggle: React.FC = () => {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Tooltip title={theme === 'light' ? '切换到暗色模式' : '切换到亮色模式'} placement=\"right\">\n      <button \n        className={styles.themeToggle} \n        onClick={toggleTheme}\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'light' ? <BsMoonStars /> : <BsSun />}\n      </button>\n    </Tooltip>\n  );\n};\n\nexport default ThemeToggle;\n```\n1. 此处使用`antd`的`Tooltip`, 用于在鼠标悬浮按钮组件时显示文字提示;\n2. `aria-label=\"Toggle theme\"` 在`<button>`内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 \"Toggle theme“.\n\n\n### 组件样式应用\n在组件内部使用CSS变量的方式已经在 [CSS变量](#CSS-变量) 中介绍, 在此给出示例:\n```css\n.sidebar_container {\n    background-color: var(--sidebar-bg);\n    color: var(--text-color);\n}\n\n.icon_button {\n    color: var(--text-color);\n    background-color: transparent;\n}\n\n.icon_button:hover {\n    background-color: var(--sidebar-hover-color);\n}\n```\n\n\n## 总结与参考\n通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：\n\n1. 使用 CSS 变量管理主题样式\n2. 通过 Context API 实现状态管理\n3. 利用 data-theme 属性切换主题\n4. 本地存储保持主题持久化\n\n### 参考 🔗\n1. [React Context API](https://react.dev/reference/react/useContext)\n2. [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n3. [HTML data-* Attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes)","slug":"themechange","published":1,"updated":"2025-01-23T03:22:56.238Z","_id":"cm68p3eng000quyqg2uxm244g","comments":1,"layout":"post","photos":[],"content":"<p>$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个”环境变量”, 且<code>index.css</code>中的 CSS 应随这个”环境变量”而改变。</p>\n<p>要实现这个需求,我们需要解决以下几个问题：</p>\n<ol>\n<li>如何定义和管理这个”环境变量”？</li>\n<li>组件如何控制这个变量？</li>\n<li>CSS 如何响应变量的变化？</li>\n</ol>\n<p>这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"Context-的创建和使用\"><a href=\"#Context-的创建和使用\" class=\"headerlink\" title=\"Context 的创建和使用\"></a>Context 的创建和使用</h3><p><strong>Context</strong> 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\"><span class=\"hljs-comment\">// 创建 Context</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = createContext&lt;<span class=\"hljs-title class_\">ThemeType</span> | <span class=\"hljs-literal\">undefined</span>&gt;(<span class=\"hljs-literal\">undefined</span>);<br><br><span class=\"hljs-comment\">// 提供 Context</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ThemeProvider</span> = (<span class=\"hljs-params\">&#123; children &#125;</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> [theme, setTheme] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;light&#x27;</span>);<br>  <br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;&#123;</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">setTheme</span> &#125;&#125;&gt;</span></span><br><span class=\"language-xml\">      &#123;children&#125;</span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class=\"hljs-comment\">// 使用 Context</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ChildComponent</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; theme &#125; = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Current theme: &#123;theme&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>因此, 我们可以在<code>src/context/</code>目录下创建一个<code>ThemeContext</code>来定义和管理相关上下文.</p>\n<ul>\n<li>在其中利用<code>useState</code>定义主题反转的函数;</li>\n<li>在点击按钮组件中使用上述的函数,</li>\n</ul>\n<h3 id=\"CSS-变量\"><a href=\"#CSS-变量\" class=\"headerlink\" title=\"CSS 变量\"></a>CSS 变量</h3><p>CSS 变量(也称为自定义属性)允许我们定义可重用的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 定义变量 */</span><br><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  <span class=\"hljs-attr\">--primary-color</span>: <span class=\"hljs-number\">#007bff</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/* 使用变量 */</span><br><span class=\"hljs-selector-class\">.button</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--primary-color);<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>为了区分CSS的变量与常量, <code>--xx-y</code>的命名格式是CSS变量的规范;</li>\n<li>通过<code>var(&lt;c--xx-y&gt;)</code>的形式使用CSS变量.</li>\n</ol>\n<h3 id=\"HTML-data-属性\"><a href=\"#HTML-data-属性\" class=\"headerlink\" title=\"HTML data-* 属性\"></a>HTML data-* 属性</h3><p><code>document.documentElement.setAttribute(&#39;data-theme&#39;, theme)</code> 的作用是在 HTML 根元素上设置一个自定义数据属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// JavaScript 设置</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-theme&#x27;</span>, <span class=\"hljs-string\">&#x27;dark&#x27;</span>);<br><br><span class=\"hljs-comment\">// 结果的 HTML</span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">data-theme</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;</span></span><br><span class=\"language-xml\">  ...</span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br><br><span class=\"hljs-comment\">// 对应的 CSS</span><br>[data-theme=<span class=\"hljs-string\">&#x27;dark&#x27;</span>] &#123;<br>  --bg-<span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">141414</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"主题切换实现\"><a href=\"#主题切换实现\" class=\"headerlink\" title=\"主题切换实现\"></a>主题切换实现</h2><h3 id=\"主题变量设计\"><a href=\"#主题变量设计\" class=\"headerlink\" title=\"主题变量设计\"></a>主题变量设计</h3><p>首先设计主题相关的 CSS 变量：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  <span class=\"hljs-comment\">/* Light theme variables */</span><br>  <span class=\"hljs-attr\">--bg-color</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  <span class=\"hljs-attr\">--text-color</span>: <span class=\"hljs-number\">#000000</span>;<br>  <span class=\"hljs-attr\">--sidebar-bg</span>: <span class=\"hljs-number\">#f0f2f5</span>;<br>  <span class=\"hljs-attr\">--border-color</span>: <span class=\"hljs-number\">#e5e2e2</span>;<br>  <span class=\"hljs-attr\">--shadow-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);<br>&#125;<br><br><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&#x27;dark&#x27;</span>]</span> &#123;<br>  <span class=\"hljs-attr\">--bg-color</span>: <span class=\"hljs-number\">#141414</span>;<br>  <span class=\"hljs-attr\">--text-color</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  <span class=\"hljs-attr\">--sidebar-bg</span>: <span class=\"hljs-number\">#1f1f1f</span>;<br>  <span class=\"hljs-attr\">--border-color</span>: <span class=\"hljs-number\">#434343</span>;<br>  <span class=\"hljs-attr\">--shadow-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>可根据实际需要增减CSS变量.</p>\n</blockquote>\n<h3 id=\"主题状态管理\"><a href=\"#主题状态管理\" class=\"headerlink\" title=\"主题状态管理\"></a>主题状态管理</h3><p>创建主题 Context 进行状态管理：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, &#123; createContext, useState, useContext, useEffect &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><br><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Theme</span> = <span class=\"hljs-string\">&#x27;light&#x27;</span> | <span class=\"hljs-string\">&#x27;dark&#x27;</span>;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ThemeContextType</span> &#123;<br>  <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-title class_\">Theme</span>;<br>  <span class=\"hljs-attr\">toggleTheme</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = createContext&lt;<span class=\"hljs-title class_\">ThemeContextType</span> | <span class=\"hljs-literal\">undefined</span>&gt;(<span class=\"hljs-literal\">undefined</span>);<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeProvider</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;&#123; <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span> &#125;&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; children &#125;</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> [theme, setTheme] = useState&lt;<span class=\"hljs-title class_\">Theme</span>&gt;(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> savedTheme = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> (savedTheme <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Theme</span>) || <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>  &#125;);<br><br>  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-theme&#x27;</span>, theme);<br>    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>, theme);<br>  &#125;, [theme]);<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggleTheme</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    <span class=\"hljs-title function_\">setTheme</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prev</span> =&gt;</span> prev === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>);<br>  &#125;;<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;&#123;</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">toggleTheme</span> &#125;&#125;&gt;</span></span><br><span class=\"language-xml\">      &#123;children&#125;</span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useTheme</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);<br>  <span class=\"hljs-keyword\">if</span> (context === <span class=\"hljs-literal\">undefined</span>) &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;useTheme must be used within a ThemeProvider&#x27;</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> context;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><br></p>\n<p>在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- App.tsx --&gt;</span><br>import &#123; ThemeProvider &#125; from &#x27;./context/ThemeContext&#x27;;<br><br>function App()&#123;<br>    ...<br>    return (<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeProvider</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span> = <span class=\"hljs-string\">&quot;App&quot;</span>&gt;</span><br>                ...<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeProvider</span>&gt;</span><br>    )<br>&#125;<br><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"主题切换组件\"><a href=\"#主题切换组件\" class=\"headerlink\" title=\"主题切换组件\"></a>主题切换组件</h3><p>实现主题切换按钮：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Tooltip</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;antd&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; useTheme &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../context/ThemeContext&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">BsSun</span>, <span class=\"hljs-title class_\">BsMoonStars</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-icons/bs&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ThemeToggle.module.css&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeToggle</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; theme, toggleTheme &#125; = <span class=\"hljs-title function_\">useTheme</span>();<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&#123;theme</span> === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? &#x27;<span class=\"hljs-attr\">切换到暗色模式</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">切换到亮色模式</span>&#x27;&#125; <span class=\"hljs-attr\">placement</span>=<span class=\"hljs-string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> </span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&#123;styles.themeToggle&#125;</span> </span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;toggleTheme&#125;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Toggle theme&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"language-xml\">        &#123;theme === &#x27;light&#x27; ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BsMoonStars</span> /&gt;</span> : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BsSun</span> /&gt;</span>&#125;</span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ThemeToggle</span>;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>此处使用<code>antd</code>的<code>Tooltip</code>, 用于在鼠标悬浮按钮组件时显示文字提示;</li>\n<li><code>aria-label=&quot;Toggle theme&quot;</code> 在<code>&lt;button&gt;</code>内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 “Toggle theme“.</li>\n</ol>\n<h3 id=\"组件样式应用\"><a href=\"#组件样式应用\" class=\"headerlink\" title=\"组件样式应用\"></a>组件样式应用</h3><p>在组件内部使用CSS变量的方式已经在 <a href=\"#CSS-变量\">CSS变量</a> 中介绍, 在此给出示例:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.sidebar_container</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--sidebar-bg);<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--text-color);<br>&#125;<br><br><span class=\"hljs-selector-class\">.icon_button</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--text-color);<br>    <span class=\"hljs-attribute\">background-color</span>: transparent;<br>&#125;<br><br><span class=\"hljs-selector-class\">.icon_button</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--sidebar-hover-color);<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"总结与参考\"><a href=\"#总结与参考\" class=\"headerlink\" title=\"总结与参考\"></a>总结与参考</h2><p>通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：</p>\n<ol>\n<li>使用 CSS 变量管理主题样式</li>\n<li>通过 Context API 实现状态管理</li>\n<li>利用 data-theme 属性切换主题</li>\n<li>本地存储保持主题持久化</li>\n</ol>\n<h3 id=\"参考-🔗\"><a href=\"#参考-🔗\" class=\"headerlink\" title=\"参考 🔗\"></a>参考 🔗</h3><ol>\n<li><a href=\"https://react.dev/reference/react/useContext\">React Context API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">CSS Custom Properties</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\">HTML data-* Attributes</a></li>\n</ol>\n","more":"<p>$\\underline{主题切换}$  即通过点击某个组件来切换背景与文字的颜色等 CSS 属性。这要求我们的组件能够控制某个”环境变量”, 且<code>index.css</code>中的 CSS 应随这个”环境变量”而改变。</p>\n<p>要实现这个需求,我们需要解决以下几个问题：</p>\n<ol>\n<li>如何定义和管理这个”环境变量”？</li>\n<li>组件如何控制这个变量？</li>\n<li>CSS 如何响应变量的变化？</li>\n</ol>\n<p>这些问题的解决方案涉及到几个重要的基础概念,让我们逐一了解。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"Context-的创建和使用\"><a href=\"#Context-的创建和使用\" class=\"headerlink\" title=\"Context 的创建和使用\"></a>Context 的创建和使用</h3><p><strong>Context</strong> 提供了一种在组件树中共享数据的方式,无需手动在每一层传递 props。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tsx\"><span class=\"hljs-comment\">// 创建 Context</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = createContext&lt;<span class=\"hljs-title class_\">ThemeType</span> | <span class=\"hljs-literal\">undefined</span>&gt;(<span class=\"hljs-literal\">undefined</span>);<br><br><span class=\"hljs-comment\">// 提供 Context</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ThemeProvider</span> = (<span class=\"hljs-params\">&#123; children &#125;</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> [theme, setTheme] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;light&#x27;</span>);<br>  <br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;&#123;</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">setTheme</span> &#125;&#125;&gt;</span></span><br><span class=\"language-xml\">      &#123;children&#125;</span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class=\"hljs-comment\">// 使用 Context</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ChildComponent</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; theme &#125; = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Current theme: &#123;theme&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>因此, 我们可以在<code>src/context/</code>目录下创建一个<code>ThemeContext</code>来定义和管理相关上下文.</p>\n<ul>\n<li>在其中利用<code>useState</code>定义主题反转的函数;</li>\n<li>在点击按钮组件中使用上述的函数,</li>\n</ul>\n<h3 id=\"CSS-变量\"><a href=\"#CSS-变量\" class=\"headerlink\" title=\"CSS 变量\"></a>CSS 变量</h3><p>CSS 变量(也称为自定义属性)允许我们定义可重用的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 定义变量 */</span><br><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  <span class=\"hljs-attr\">--primary-color</span>: <span class=\"hljs-number\">#007bff</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/* 使用变量 */</span><br><span class=\"hljs-selector-class\">.button</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--primary-color);<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>为了区分CSS的变量与常量, <code>--xx-y</code>的命名格式是CSS变量的规范;</li>\n<li>通过<code>var(&lt;c--xx-y&gt;)</code>的形式使用CSS变量.</li>\n</ol>\n<h3 id=\"HTML-data-属性\"><a href=\"#HTML-data-属性\" class=\"headerlink\" title=\"HTML data-* 属性\"></a>HTML data-* 属性</h3><p><code>document.documentElement.setAttribute(&#39;data-theme&#39;, theme)</code> 的作用是在 HTML 根元素上设置一个自定义数据属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// JavaScript 设置</span><br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-theme&#x27;</span>, <span class=\"hljs-string\">&#x27;dark&#x27;</span>);<br><br><span class=\"hljs-comment\">// 结果的 HTML</span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">data-theme</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;</span></span><br><span class=\"language-xml\">  ...</span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br><br><span class=\"hljs-comment\">// 对应的 CSS</span><br>[data-theme=<span class=\"hljs-string\">&#x27;dark&#x27;</span>] &#123;<br>  --bg-<span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">141414</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"主题切换实现\"><a href=\"#主题切换实现\" class=\"headerlink\" title=\"主题切换实现\"></a>主题切换实现</h2><h3 id=\"主题变量设计\"><a href=\"#主题变量设计\" class=\"headerlink\" title=\"主题变量设计\"></a>主题变量设计</h3><p>首先设计主题相关的 CSS 变量：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  <span class=\"hljs-comment\">/* Light theme variables */</span><br>  <span class=\"hljs-attr\">--bg-color</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  <span class=\"hljs-attr\">--text-color</span>: <span class=\"hljs-number\">#000000</span>;<br>  <span class=\"hljs-attr\">--sidebar-bg</span>: <span class=\"hljs-number\">#f0f2f5</span>;<br>  <span class=\"hljs-attr\">--border-color</span>: <span class=\"hljs-number\">#e5e2e2</span>;<br>  <span class=\"hljs-attr\">--shadow-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);<br>&#125;<br><br><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&#x27;dark&#x27;</span>]</span> &#123;<br>  <span class=\"hljs-attr\">--bg-color</span>: <span class=\"hljs-number\">#141414</span>;<br>  <span class=\"hljs-attr\">--text-color</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  <span class=\"hljs-attr\">--sidebar-bg</span>: <span class=\"hljs-number\">#1f1f1f</span>;<br>  <span class=\"hljs-attr\">--border-color</span>: <span class=\"hljs-number\">#434343</span>;<br>  <span class=\"hljs-attr\">--shadow-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>可根据实际需要增减CSS变量.</p>\n</blockquote>\n<h3 id=\"主题状态管理\"><a href=\"#主题状态管理\" class=\"headerlink\" title=\"主题状态管理\"></a>主题状态管理</h3><p>创建主题 Context 进行状态管理：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, &#123; createContext, useState, useContext, useEffect &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><br><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Theme</span> = <span class=\"hljs-string\">&#x27;light&#x27;</span> | <span class=\"hljs-string\">&#x27;dark&#x27;</span>;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ThemeContextType</span> &#123;<br>  <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-title class_\">Theme</span>;<br>  <span class=\"hljs-attr\">toggleTheme</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = createContext&lt;<span class=\"hljs-title class_\">ThemeContextType</span> | <span class=\"hljs-literal\">undefined</span>&gt;(<span class=\"hljs-literal\">undefined</span>);<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeProvider</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;&#123; <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span> &#125;&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; children &#125;</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> [theme, setTheme] = useState&lt;<span class=\"hljs-title class_\">Theme</span>&gt;(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> savedTheme = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> (savedTheme <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Theme</span>) || <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>  &#125;);<br><br>  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-theme&#x27;</span>, theme);<br>    <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>, theme);<br>  &#125;, [theme]);<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggleTheme</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    <span class=\"hljs-title function_\">setTheme</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prev</span> =&gt;</span> prev === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>);<br>  &#125;;<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;&#123;</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">toggleTheme</span> &#125;&#125;&gt;</span></span><br><span class=\"language-xml\">      &#123;children&#125;</span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useTheme</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);<br>  <span class=\"hljs-keyword\">if</span> (context === <span class=\"hljs-literal\">undefined</span>) &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;useTheme must be used within a ThemeProvider&#x27;</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> context;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><br></p>\n<p>在设置上下文组件之后, 我们需要明确其作用的范围. 我们希望主题变色需要在全局范围内生效, 以react框架为例:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- App.tsx --&gt;</span><br>import &#123; ThemeProvider &#125; from &#x27;./context/ThemeContext&#x27;;<br><br>function App()&#123;<br>    ...<br>    return (<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeProvider</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span> = <span class=\"hljs-string\">&quot;App&quot;</span>&gt;</span><br>                ...<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeProvider</span>&gt;</span><br>    )<br>&#125;<br><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"主题切换组件\"><a href=\"#主题切换组件\" class=\"headerlink\" title=\"主题切换组件\"></a>主题切换组件</h3><p>实现主题切换按钮：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">Tooltip</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;antd&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; useTheme &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../context/ThemeContext&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; <span class=\"hljs-title class_\">BsSun</span>, <span class=\"hljs-title class_\">BsMoonStars</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-icons/bs&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ThemeToggle.module.css&#x27;</span>;<br><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeToggle</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> &#123; theme, toggleTheme &#125; = <span class=\"hljs-title function_\">useTheme</span>();<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&#123;theme</span> === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? &#x27;<span class=\"hljs-attr\">切换到暗色模式</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">切换到亮色模式</span>&#x27;&#125; <span class=\"hljs-attr\">placement</span>=<span class=\"hljs-string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> </span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&#123;styles.themeToggle&#125;</span> </span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;toggleTheme&#125;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Toggle theme&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"language-xml\">        &#123;theme === &#x27;light&#x27; ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BsMoonStars</span> /&gt;</span> : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BsSun</span> /&gt;</span>&#125;</span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ThemeToggle</span>;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>此处使用<code>antd</code>的<code>Tooltip</code>, 用于在鼠标悬浮按钮组件时显示文字提示;</li>\n<li><code>aria-label=&quot;Toggle theme&quot;</code> 在<code>&lt;button&gt;</code>内设置这个属性不是必要的, 但是可以帮助屏幕阅读器读出 “Toggle theme“.</li>\n</ol>\n<h3 id=\"组件样式应用\"><a href=\"#组件样式应用\" class=\"headerlink\" title=\"组件样式应用\"></a>组件样式应用</h3><p>在组件内部使用CSS变量的方式已经在 <a href=\"#CSS-变量\">CSS变量</a> 中介绍, 在此给出示例:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.sidebar_container</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--sidebar-bg);<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--text-color);<br>&#125;<br><br><span class=\"hljs-selector-class\">.icon_button</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--text-color);<br>    <span class=\"hljs-attribute\">background-color</span>: transparent;<br>&#125;<br><br><span class=\"hljs-selector-class\">.icon_button</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--sidebar-hover-color);<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"总结与参考\"><a href=\"#总结与参考\" class=\"headerlink\" title=\"总结与参考\"></a>总结与参考</h2><p>通过以上实现,我们构建了一个完整的主题切换系统。关键点包括：</p>\n<ol>\n<li>使用 CSS 变量管理主题样式</li>\n<li>通过 Context API 实现状态管理</li>\n<li>利用 data-theme 属性切换主题</li>\n<li>本地存储保持主题持久化</li>\n</ol>\n<h3 id=\"参考-🔗\"><a href=\"#参考-🔗\" class=\"headerlink\" title=\"参考 🔗\"></a>参考 🔗</h3><ol>\n<li><a href=\"https://react.dev/reference/react/useContext\">React Context API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">CSS Custom Properties</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\">HTML data-* Attributes</a></li>\n</ol>\n"},{"title":"关系数据库","date":"2025-01-22T03:27:49.000Z","excerpt":"freeCodeCamp项目","_content":"# 通过创建模板学习Bash\n- `more + <fileName>` 可以预览文件的内容;\n- `cd ..` , `cd ../..` \n- `clear`清除终端的内容;\n- `mkdir <folder_name>`\n  - `touch <file_name>` 新建一个文件;\n\n<br>\n\n`ls <flag>`:\n\n`ls -l` 以长格式显示文件和目录的信息:\n- `ls -lh`：以人类可读的格式显示文件大小（如 1K, 4.0M）;\n- `ls -la`：显示所有文件（包括隐藏文件 . 和 ..）;\n- `ls -ltr`：按时间排序，最近修改的文件排在最后.\n\n`ls --help`\n\n<br>\n\n`cp <file> <destination>` 拷贝文件到指定目录;\n`rm <fila_name>` 删除指定的文件;\n\n<br>\n\n- `mv <file_name> <new_file_name>`: rename \n- `mv <file> <destination>`: move\n\n<br>\n\n`find` 显示当前目录下的文件树\n![](/img/find-2025-01-22-11-58-20.png)\n","source":"_posts/关系数据库.md","raw":"---\ntitle: 关系数据库\ndate: 2025-01-22 11:27:49\ntags:\ncategories:\nexcerpt: freeCodeCamp项目\n---\n# 通过创建模板学习Bash\n- `more + <fileName>` 可以预览文件的内容;\n- `cd ..` , `cd ../..` \n- `clear`清除终端的内容;\n- `mkdir <folder_name>`\n  - `touch <file_name>` 新建一个文件;\n\n<br>\n\n`ls <flag>`:\n\n`ls -l` 以长格式显示文件和目录的信息:\n- `ls -lh`：以人类可读的格式显示文件大小（如 1K, 4.0M）;\n- `ls -la`：显示所有文件（包括隐藏文件 . 和 ..）;\n- `ls -ltr`：按时间排序，最近修改的文件排在最后.\n\n`ls --help`\n\n<br>\n\n`cp <file> <destination>` 拷贝文件到指定目录;\n`rm <fila_name>` 删除指定的文件;\n\n<br>\n\n- `mv <file_name> <new_file_name>`: rename \n- `mv <file> <destination>`: move\n\n<br>\n\n`find` 显示当前目录下的文件树\n![](/img/find-2025-01-22-11-58-20.png)\n","slug":"关系数据库","published":1,"updated":"2025-01-22T04:47:27.121Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enh000tuyqg75msgj2c","content":"<h1 id=\"通过创建模板学习Bash\"><a href=\"#通过创建模板学习Bash\" class=\"headerlink\" title=\"通过创建模板学习Bash\"></a>通过创建模板学习Bash</h1><ul>\n<li><code>more + &lt;fileName&gt;</code> 可以预览文件的内容;</li>\n<li><code>cd ..</code> , <code>cd ../..</code> </li>\n<li><code>clear</code>清除终端的内容;</li>\n<li><code>mkdir &lt;folder_name&gt;</code><ul>\n<li><code>touch &lt;file_name&gt;</code> 新建一个文件;</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p><code>ls &lt;flag&gt;</code>:</p>\n<p><code>ls -l</code> 以长格式显示文件和目录的信息:</p>\n<ul>\n<li><code>ls -lh</code>：以人类可读的格式显示文件大小（如 1K, 4.0M）;</li>\n<li><code>ls -la</code>：显示所有文件（包括隐藏文件 . 和 ..）;</li>\n<li><code>ls -ltr</code>：按时间排序，最近修改的文件排在最后.</li>\n</ul>\n<p><code>ls --help</code></p>\n<p><br></p>\n<p><code>cp &lt;file&gt; &lt;destination&gt;</code> 拷贝文件到指定目录;<br><code>rm &lt;fila_name&gt;</code> 删除指定的文件;</p>\n<p><br></p>\n<ul>\n<li><code>mv &lt;file_name&gt; &lt;new_file_name&gt;</code>: rename </li>\n<li><code>mv &lt;file&gt; &lt;destination&gt;</code>: move</li>\n</ul>\n<p><br></p>\n<p><code>find</code> 显示当前目录下的文件树<br><img src=\"/img/find-2025-01-22-11-58-20.png\" alt=\"\"></p>\n","more":"<h1 id=\"通过创建模板学习Bash\"><a href=\"#通过创建模板学习Bash\" class=\"headerlink\" title=\"通过创建模板学习Bash\"></a>通过创建模板学习Bash</h1><ul>\n<li><code>more + &lt;fileName&gt;</code> 可以预览文件的内容;</li>\n<li><code>cd ..</code> , <code>cd ../..</code> </li>\n<li><code>clear</code>清除终端的内容;</li>\n<li><code>mkdir &lt;folder_name&gt;</code><ul>\n<li><code>touch &lt;file_name&gt;</code> 新建一个文件;</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p><code>ls &lt;flag&gt;</code>:</p>\n<p><code>ls -l</code> 以长格式显示文件和目录的信息:</p>\n<ul>\n<li><code>ls -lh</code>：以人类可读的格式显示文件大小（如 1K, 4.0M）;</li>\n<li><code>ls -la</code>：显示所有文件（包括隐藏文件 . 和 ..）;</li>\n<li><code>ls -ltr</code>：按时间排序，最近修改的文件排在最后.</li>\n</ul>\n<p><code>ls --help</code></p>\n<p><br></p>\n<p><code>cp &lt;file&gt; &lt;destination&gt;</code> 拷贝文件到指定目录;<br><code>rm &lt;fila_name&gt;</code> 删除指定的文件;</p>\n<p><br></p>\n<ul>\n<li><code>mv &lt;file_name&gt; &lt;new_file_name&gt;</code>: rename </li>\n<li><code>mv &lt;file&gt; &lt;destination&gt;</code>: move</li>\n</ul>\n<p><br></p>\n<p><code>find</code> 显示当前目录下的文件树<br><img src=\"/img/find-2025-01-22-11-58-20.png\" alt=\"\"></p>\n"},{"title":"媒体查询","date":"2025-01-08T11:16:49.000Z","excerpt":"利用媒体查询建立响应式的设计","index_img":"/img/Aniya_放大镜.jpg","_content":"> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","source":"_posts/媒体查询.md","raw":"---\ntitle: 媒体查询\ndate: 2025-01-08 19:16:49\ncategories: 学习笔记\ntags: \n- 前端\n- CSS\nexcerpt: 利用媒体查询建立响应式的设计\nindex_img: /img/Aniya_放大镜.jpg\n---\n> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","slug":"媒体查询","published":1,"updated":"2025-01-19T11:46:34.125Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3enu000wuyqg1ci871ok","content":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\">媒体查询入门指南</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\">使用编程方法测试媒体查询</a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> media-type <span class=\"hljs-keyword\">and</span> (media-feature) &#123;<br>    <span class=\"hljs-comment\">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 窗口恰好等于600px时 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: portrait) &#123;<br>    <span class=\"hljs-comment\">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>    <span class=\"hljs-comment\">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><p><code>and</code>实现与逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>  <span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>,</code>实现或逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape), (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">480px</span>) &#123;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class=\"hljs-comment\">  */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n</li>\n<li><p><code>not</code>实现非逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br><span class=\"hljs-comment\">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>not</code>实现 <strong>反转查询</strong>:</p>\n<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-keyword\">not</span> (screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>))), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 检测设备的旋转方向是否为纵向</span><br><span class=\"hljs-keyword\">var</span> mediaQueryList = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查属性<code>matches</code>获取对应的查询结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">if (mediaQueryList<span class=\"hljs-selector-class\">.matches</span>) &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 定义媒体查询字符串</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>;<br><br><span class=\"hljs-comment\">// 创建查询列表</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryList</span>: <span class=\"hljs-title class_\">MediaQueryList</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(mediaQueryString);<br><br><span class=\"hljs-comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleOrientationChange</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MediaQueryListEvent</span></span>): <span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// 媒体查询匹配（竖屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 媒体查询不匹配（横屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class=\"hljs-title function_\">handleOrientationChange</span>(&#123;<br>    <span class=\"hljs-attr\">matches</span>: mediaQueryList.<span class=\"hljs-property\">matches</span>,<br>    <span class=\"hljs-attr\">media</span>: mediaQueryList.<span class=\"hljs-property\">media</span>,<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>&#125; <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MediaQueryListEvent</span>);<br><br><span class=\"hljs-comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class=\"hljs-comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class=\"hljs-comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n","more":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\">媒体查询入门指南</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\">使用编程方法测试媒体查询</a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> media-type <span class=\"hljs-keyword\">and</span> (media-feature) &#123;<br>    <span class=\"hljs-comment\">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 窗口恰好等于600px时 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: portrait) &#123;<br>    <span class=\"hljs-comment\">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>    <span class=\"hljs-comment\">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><p><code>and</code>实现与逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>  <span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>,</code>实现或逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape), (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">480px</span>) &#123;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class=\"hljs-comment\">  */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n</li>\n<li><p><code>not</code>实现非逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br><span class=\"hljs-comment\">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>not</code>实现 <strong>反转查询</strong>:</p>\n<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-keyword\">not</span> (screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>))), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 检测设备的旋转方向是否为纵向</span><br><span class=\"hljs-keyword\">var</span> mediaQueryList = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查属性<code>matches</code>获取对应的查询结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">if (mediaQueryList<span class=\"hljs-selector-class\">.matches</span>) &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 定义媒体查询字符串</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>;<br><br><span class=\"hljs-comment\">// 创建查询列表</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryList</span>: <span class=\"hljs-title class_\">MediaQueryList</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(mediaQueryString);<br><br><span class=\"hljs-comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleOrientationChange</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MediaQueryListEvent</span></span>): <span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// 媒体查询匹配（竖屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 媒体查询不匹配（横屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class=\"hljs-title function_\">handleOrientationChange</span>(&#123;<br>    <span class=\"hljs-attr\">matches</span>: mediaQueryList.<span class=\"hljs-property\">matches</span>,<br>    <span class=\"hljs-attr\">media</span>: mediaQueryList.<span class=\"hljs-property\">media</span>,<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>&#125; <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MediaQueryListEvent</span>);<br><br><span class=\"hljs-comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class=\"hljs-comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class=\"hljs-comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"建站第一天","date":"2025-01-08T08:04:13.000Z","updated":"2025-01-08T08:04:15.000Z","excerpt":"鸽了好久的小博客终于诞生了","sticky":100,"index_img":"/img/闪耀pack.jpg","_content":"\n原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.\n\n然而发现Astro的文档~~还不够丰富, 配置起来还真是麻烦~~.折腾了几天, 还是放弃了. **还是hexo真香**.😊\n\n## 为什么搭建这个博客?😋\n- 记录一下自己的学习历程\n- 为生活的碎片留档, ~~越来越不想用puq了~~\n","source":"_posts/建站第一天.md","raw":"---\ntitle: 建站第一天\ndate: 2025-01-08 16:04:13\nupdated: 2025-01-08 16:04:15\ntags: \n- 杂记\nexcerpt: 鸽了好久的小博客终于诞生了\nsticky: 100\nindex_img: /img/闪耀pack.jpg\n---\n\n原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.\n\n然而发现Astro的文档~~还不够丰富, 配置起来还真是麻烦~~.折腾了几天, 还是放弃了. **还是hexo真香**.😊\n\n## 为什么搭建这个博客?😋\n- 记录一下自己的学习历程\n- 为生活的碎片留档, ~~越来越不想用puq了~~\n","slug":"建站第一天","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm68p3eo6001muyqgg5x54a9o","content":"<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p>\n<p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p>\n<h2 id=\"为什么搭建这个博客-😋\"><a href=\"#为什么搭建这个博客-😋\" class=\"headerlink\" title=\"为什么搭建这个博客?😋\"></a>为什么搭建这个博客?😋</h2><ul>\n<li>记录一下自己的学习历程</li>\n<li>为生活的碎片留档, <del>越来越不想用puq了</del></li>\n</ul>\n","more":"<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p>\n<p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p>\n<h2 id=\"为什么搭建这个博客-😋\"><a href=\"#为什么搭建这个博客-😋\" class=\"headerlink\" title=\"为什么搭建这个博客?😋\"></a>为什么搭建这个博客?😋</h2><ul>\n<li>记录一下自己的学习历程</li>\n<li>为生活的碎片留档, <del>越来越不想用puq了</del></li>\n</ul>\n"},{"title":"社会心理学","date":"2025-01-09T01:23:32.000Z","excerpt":"在专业基础课_社会心理学的教学内容基础上, 摘录个人感兴趣的部分, 同时补充了部分相关理论.","math":true,"index_img":"/img/社会心理学.png","banner_img":"/img/社会心理学.png","_content":"# 社会知觉\n## 非语言线索\n**面部表情反馈假设**: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;\n\n## 印象形成\n顺序效应\n- 首因效应: 最初获得的信息影响更大, 即第一印象效应;\n- 近因效应: 后来获得的信息影响更大, 即新颖效应;\n\n晕轮效应\n- 对一个人的某种特征 **形成** 好或坏的印象 **之后**, 据此推论其他方面的特征;\n- 与首因效应的区别: \n> 前者发生在初步印象形成之后, 后者发生在初步印象形成之前;\n\n投射效应\n- 在认知和形成他人印象时，认为他人与自己具有**相似**的特性;\n- 将自己的情感、特性投射到他人身上并强加于他人;\n\n### 期望效应\n***Self-fulfilling prophecy***\n> 自我实现预言 \n\n- “预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;\n- 人们的信念会影响他们的行为;\n\n可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. \n\n## 归因 \n> Attribution theory\n\n**归因**, 指观察者从他人的行为推论出行为原因、因果关系。\n\n**归因理论**, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。\n- $\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 --外因\n- $\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 --内因\n\n### 归因偏差\n**基本归因错误**: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;\n\n**行为者-观察者偏差**: \n- 归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;\n- 为什么会产生上述区别?\n  - 对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;\n  - 人们倾向于利用 **可得性** 高的信息来处理问题\n> 根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 **鲜明对比**;\n> 对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.\n---\n**错误共识效应**(False consensus effect): \n- 也称为 **虚假一致性效应**;\n- 指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;\n- 这同时导致人们倾向于与自己 **相似** 的个体交往;\n---\n**公平世界信念**: 指的是相信\"善有善报,恶有恶报\"而导致的归因偏差.\n- 认为每个人都应该为自己的行为负责;\n- 分析行为的原因时, 倾向于追溯个人自身的原因;\n---\n**动机性归因偏差**: \n- 倾向于将自己的成功归因于内在因素、失败归因于外在因素;\n- 而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;\n\n\n# 自我\n## 自我概念\n- $\\underline{自我知觉}$: 对自己持有的信念之集合;\n- $\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;\n- $\\underline{虚假一致性效应}$: \n\n\n","source":"_posts/社会心理学.md","raw":"---\ntitle: 社会心理学\ndate: 2025-01-09 09:23:32\ntags: \n- 心理学\ncategories: 兴趣阅读\nexcerpt: 在专业基础课_社会心理学的教学内容基础上, 摘录个人感兴趣的部分, 同时补充了部分相关理论.\nmath: true\nindex_img: /img/社会心理学.png\nbanner_img: /img/社会心理学.png\n---\n# 社会知觉\n## 非语言线索\n**面部表情反馈假设**: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;\n\n## 印象形成\n顺序效应\n- 首因效应: 最初获得的信息影响更大, 即第一印象效应;\n- 近因效应: 后来获得的信息影响更大, 即新颖效应;\n\n晕轮效应\n- 对一个人的某种特征 **形成** 好或坏的印象 **之后**, 据此推论其他方面的特征;\n- 与首因效应的区别: \n> 前者发生在初步印象形成之后, 后者发生在初步印象形成之前;\n\n投射效应\n- 在认知和形成他人印象时，认为他人与自己具有**相似**的特性;\n- 将自己的情感、特性投射到他人身上并强加于他人;\n\n### 期望效应\n***Self-fulfilling prophecy***\n> 自我实现预言 \n\n- “预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;\n- 人们的信念会影响他们的行为;\n\n可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. \n\n## 归因 \n> Attribution theory\n\n**归因**, 指观察者从他人的行为推论出行为原因、因果关系。\n\n**归因理论**, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。\n- $\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 --外因\n- $\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 --内因\n\n### 归因偏差\n**基本归因错误**: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;\n\n**行为者-观察者偏差**: \n- 归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;\n- 为什么会产生上述区别?\n  - 对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;\n  - 人们倾向于利用 **可得性** 高的信息来处理问题\n> 根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 **鲜明对比**;\n> 对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.\n---\n**错误共识效应**(False consensus effect): \n- 也称为 **虚假一致性效应**;\n- 指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;\n- 这同时导致人们倾向于与自己 **相似** 的个体交往;\n---\n**公平世界信念**: 指的是相信\"善有善报,恶有恶报\"而导致的归因偏差.\n- 认为每个人都应该为自己的行为负责;\n- 分析行为的原因时, 倾向于追溯个人自身的原因;\n---\n**动机性归因偏差**: \n- 倾向于将自己的成功归因于内在因素、失败归因于外在因素;\n- 而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;\n\n\n# 自我\n## 自我概念\n- $\\underline{自我知觉}$: 对自己持有的信念之集合;\n- $\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;\n- $\\underline{虚假一致性效应}$: \n\n\n","slug":"社会心理学","published":1,"updated":"2025-01-19T11:46:34.126Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3eo7001nuyqggybj8q6f","content":"<h1 id=\"社会知觉\"><a href=\"#社会知觉\" class=\"headerlink\" title=\"社会知觉\"></a>社会知觉</h1><h2 id=\"非语言线索\"><a href=\"#非语言线索\" class=\"headerlink\" title=\"非语言线索\"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p>\n<h2 id=\"印象形成\"><a href=\"#印象形成\" class=\"headerlink\" title=\"印象形成\"></a>印象形成</h2><p>顺序效应</p>\n<ul>\n<li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li>\n<li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li>\n</ul>\n<p>晕轮效应</p>\n<ul>\n<li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li>\n<li>与首因效应的区别: <blockquote>\n<p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p>\n</blockquote>\n</li>\n</ul>\n<p>投射效应</p>\n<ul>\n<li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li>\n<li>将自己的情感、特性投射到他人身上并强加于他人;</li>\n</ul>\n<h3 id=\"期望效应\"><a href=\"#期望效应\" class=\"headerlink\" title=\"期望效应\"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p>\n<blockquote>\n<p>自我实现预言 </p>\n</blockquote>\n<ul>\n<li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li>\n<li>人们的信念会影响他们的行为;</li>\n</ul>\n<p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p>\n<h2 id=\"归因\"><a href=\"#归因\" class=\"headerlink\" title=\"归因\"></a>归因</h2><blockquote>\n<p>Attribution theory</p>\n</blockquote>\n<p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p>\n<p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p>\n<ul>\n<li>$\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li>\n<li>$\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li>\n</ul>\n<h3 id=\"归因偏差\"><a href=\"#归因偏差\" class=\"headerlink\" title=\"归因偏差\"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p>\n<p><strong>行为者-观察者偏差</strong>: </p>\n<ul>\n<li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li>\n<li>为什么会产生上述区别?<ul>\n<li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li>\n<li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote>\n<p>根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>错误共识效应</strong>(False consensus effect): </p>\n<ul>\n<li>也称为 <strong>虚假一致性效应</strong>;</li>\n<li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li>\n<li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li>\n</ul>\n<hr>\n<p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p>\n<ul>\n<li>认为每个人都应该为自己的行为负责;</li>\n<li>分析行为的原因时, 倾向于追溯个人自身的原因;</li>\n</ul>\n<hr>\n<p><strong>动机性归因偏差</strong>: </p>\n<ul>\n<li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li>\n<li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li>\n</ul>\n<h1 id=\"自我\"><a href=\"#自我\" class=\"headerlink\" title=\"自我\"></a>自我</h1><h2 id=\"自我概念\"><a href=\"#自我概念\" class=\"headerlink\" title=\"自我概念\"></a>自我概念</h2><ul>\n<li>$\\underline{自我知觉}$: 对自己持有的信念之集合;</li>\n<li>$\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li>\n<li>$\\underline{虚假一致性效应}$: </li>\n</ul>\n","more":"<h1 id=\"社会知觉\"><a href=\"#社会知觉\" class=\"headerlink\" title=\"社会知觉\"></a>社会知觉</h1><h2 id=\"非语言线索\"><a href=\"#非语言线索\" class=\"headerlink\" title=\"非语言线索\"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p>\n<h2 id=\"印象形成\"><a href=\"#印象形成\" class=\"headerlink\" title=\"印象形成\"></a>印象形成</h2><p>顺序效应</p>\n<ul>\n<li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li>\n<li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li>\n</ul>\n<p>晕轮效应</p>\n<ul>\n<li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li>\n<li>与首因效应的区别: <blockquote>\n<p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p>\n</blockquote>\n</li>\n</ul>\n<p>投射效应</p>\n<ul>\n<li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li>\n<li>将自己的情感、特性投射到他人身上并强加于他人;</li>\n</ul>\n<h3 id=\"期望效应\"><a href=\"#期望效应\" class=\"headerlink\" title=\"期望效应\"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p>\n<blockquote>\n<p>自我实现预言 </p>\n</blockquote>\n<ul>\n<li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li>\n<li>人们的信念会影响他们的行为;</li>\n</ul>\n<p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p>\n<h2 id=\"归因\"><a href=\"#归因\" class=\"headerlink\" title=\"归因\"></a>归因</h2><blockquote>\n<p>Attribution theory</p>\n</blockquote>\n<p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p>\n<p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p>\n<ul>\n<li>$\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li>\n<li>$\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li>\n</ul>\n<h3 id=\"归因偏差\"><a href=\"#归因偏差\" class=\"headerlink\" title=\"归因偏差\"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p>\n<p><strong>行为者-观察者偏差</strong>: </p>\n<ul>\n<li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li>\n<li>为什么会产生上述区别?<ul>\n<li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li>\n<li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote>\n<p>根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>错误共识效应</strong>(False consensus effect): </p>\n<ul>\n<li>也称为 <strong>虚假一致性效应</strong>;</li>\n<li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li>\n<li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li>\n</ul>\n<hr>\n<p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p>\n<ul>\n<li>认为每个人都应该为自己的行为负责;</li>\n<li>分析行为的原因时, 倾向于追溯个人自身的原因;</li>\n</ul>\n<hr>\n<p><strong>动机性归因偏差</strong>: </p>\n<ul>\n<li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li>\n<li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li>\n</ul>\n<h1 id=\"自我\"><a href=\"#自我\" class=\"headerlink\" title=\"自我\"></a>自我</h1><h2 id=\"自我概念\"><a href=\"#自我概念\" class=\"headerlink\" title=\"自我概念\"></a>自我概念</h2><ul>\n<li>$\\underline{自我知觉}$: 对自己持有的信念之集合;</li>\n<li>$\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li>\n<li>$\\underline{虚假一致性效应}$: </li>\n</ul>\n"},{"title":"响应式设计","date":"2025-01-20T13:38:45.000Z","excerpt":"简单记录","index_img":null,"_content":"\n所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:\n- 第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；\n- 另一个作用是当图片无法加载时，页面需要显示的替代文本。\n\n<br>\n\n注意嵌套的形式.\ne.g\n```html\n <p>See more <a href=\"https://freecatphotoapp.com\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n\n要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。\n```html\n<p>See more <a href=\"https://freecatphotoapp.com\" target = \"_blank\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n锚元素除了能将文本转化为链接, 还可以将 **图片** 转换为链接:\n```html\n<a hreg = \"https://freecatphotoapp.com\">\n    <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n</a>\n```\n\n<br>\n\n\n**section** 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。\n\n<br>\n\n\n列表:\n- 无序列表: `ul`;\n- 有序列表:`ol`;\n- 列表项: `li`;\n\n<br>\n\n\n**figure** 元素代表自包含的内容，允许将图像与标题相关联;\n**figcaption** 元素用于添加标题以描述 figure 元素中包含的图像。\n```html\n<figure>\n  <img src=\"image.jpg\" alt=\"A description of the image\">\n  <figcaption>A cute cat</figcaption>\n</figure>\n```\n\n<br>\n\n\n- 使用 **em** 使得文字为斜体;\n- `strong` 加深文字;\n\n<br>\n\n\nform 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。\n- `action`属性指定表单数据发送的位置;\n``` html\n<form action=\"/submit-url\"></form>\n```\n\n---\ninput 允许通过多种方式从Web表单中收集数据:\n- 与`img`一样为空元素——不需要结束标签;\n- 使用 `type` 属性创建多种输入;\n  - `text` : 文本;\n  - `radio`: 可以使用单选按钮;\n  - `checkbox`: 表单使用 **复选框**;\n- 使用`name`属性使得区分提交的数据;\n  - 令多个单选按钮具有 **相同** 的`name`, 使得在选中其中一个按钮时自动取消另外的单选按钮;\n  - 形成`name = value`形式的属性对进行提交;\n```html\n<label><input id=\"indoor\" type=\"radio\" name = \"indoor-outdoor\"> Indoor</label>\n<label><input id=\"outdoor\" type=\"radio\" name = 'indoor-outdoor'> Outdoor</label>\n```\n- `placeholder` 中为 **占位符** 文本, 用于提示输入框中输入的信息;\n- `required`属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;\n\n```html\n    <input type=\"text\" name = \"catphotourl\">\n```\n\n<br>\n\n\n`button` 用于创建可点击的按钮:\n- 单击**没有任何属性**的表单按钮的默认行为会将表单提交到**表单**的 `action `属性中指定的位置;\n- 由于`input`和`button`为 **内联** 元素, 即使相隔书写也会显示在同行:\n- `type`的`submit`明确了为 可提交按钮;\n```html\n<button type = \"submit\">Submit</button>\n```\n\n<br>\n\nlabel 元素用于帮助将 input 元素的文本与 input 元素本身关联起来\n```html\n<label><input type=\"radio\"> cat</label>\n<!-- 点击单词 \"cat\" 也将选择 radio 按钮。 -->\n```\n\n<br>\n\n`id`用于标识特定的HTML元素\n\n<br>\n\n`fieldset` 元素用于在 Web 表单中将相关的输入和标签组合在一起:\n  - 块级元素，这意味着它们出现在新的一行上。\n  - `legend` 元素充当 fieldset 元素中内容的标题。\n```html\n<fieldset>\n        <legend> Is your cat an indoor or outdoor cat?</legend>\n          <label><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n          <label><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label>\n</fieldset>\n```\n![](/img/legend-2025-01-21-21-19-51.png)\n\n<br>\n\n还可以使用`for`属性将文本直接嵌套在`label`当中, 同时设置`input`的`id`与上述的`for`属性相同, 从而实现文本与元素相关联的效果:\n```html\n<input id=\"loving\" type=\"checkbox\"> \n<label for = \"loving\"> Loving </label>\n```\n\n<br>\n\n默认选中的按钮: `checked`\n```html\n<input checked type=\"radio\" name=\"meal\" value=\"breakfast\"> Breakfast\n```\n> checked属性无需额外赋值.\n\n<br>\n\n`footer`素用于定义文档或章节的页脚:\n- 脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.\n\n<br>\n\nhead 相关\n- 存放 $\\underline{元数据}$ 不会实际显示在html中的数据;\n- `title `元素决定了浏览器在页面的标题栏或选项卡中显示的内容;\n- `<link rel = \"stylesheet\" href = \"styles.css\">` 将CSS文件链接到当前的HTML\n\nelse:\n- `<!DOCTYPE html`: 声明满足最新版本html相关设置的要求;\n- `meta`是空元素; `<meta charset = \"utf-8\">`;\n- \n\n\n---\n\n选择器:\n- **id**选择器\n```css\n#cat {\n  width: 250px;\n}\n```\n- **class**选择器\n```css\n.class-name, .other-class {\n  styles\n}\n```\n- class类中元素的选择\n```css\n.item p{\n  /* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */\n  display: inline-block; \n}\n```\n- **伪元素**\n```css\n/* 已访问链接后设置为灰色 */\na:visited{\n  color: grey;\n}\n\n/* 悬浮时的变色 */\na:hover {\n  color: brown;\n}\n\n/* 点击时的状态设置 */\na:active{\n  color: white;\n}\n```\n<br>\n\n```css\n  margin-left : auto;\n  margin-right: auto;\n```\n> 使得**普通**元素在父级元素的空间内 **水平居中**\n\n\n<br>\n\n`article`是一个语义化标签:\n- 用于表示文档、页面或应用中的**独立**的、完整的内容单元;\n- 清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;\n- 内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.\n\n与其他类似标签的区别:\n- `div`: 粹的容器，没有语义，常用于布局;\n- `section`: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;\n- `article`: 示一个可以独立存在的内容单元.\n\n<br>\n\n```css\n/* 设置备用字体 */\nh1, h2 {\n  font-family: Impact, serif;\n}\n```\n\n\n","source":"_posts/计.md","raw":"---\ntitle: 响应式设计\ndate: 2025-01-20 21:38:45\ntags: \n- 杂记\nexcerpt: 简单记录\nindex_img: \ncategories: 学习笔记\n---\n\n所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:\n- 第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；\n- 另一个作用是当图片无法加载时，页面需要显示的替代文本。\n\n<br>\n\n注意嵌套的形式.\ne.g\n```html\n <p>See more <a href=\"https://freecatphotoapp.com\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n\n要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。\n```html\n<p>See more <a href=\"https://freecatphotoapp.com\" target = \"_blank\">cat photos</a> in our gallery.</p>\n```\n\n<br>\n\n锚元素除了能将文本转化为链接, 还可以将 **图片** 转换为链接:\n```html\n<a hreg = \"https://freecatphotoapp.com\">\n    <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n</a>\n```\n\n<br>\n\n\n**section** 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。\n\n<br>\n\n\n列表:\n- 无序列表: `ul`;\n- 有序列表:`ol`;\n- 列表项: `li`;\n\n<br>\n\n\n**figure** 元素代表自包含的内容，允许将图像与标题相关联;\n**figcaption** 元素用于添加标题以描述 figure 元素中包含的图像。\n```html\n<figure>\n  <img src=\"image.jpg\" alt=\"A description of the image\">\n  <figcaption>A cute cat</figcaption>\n</figure>\n```\n\n<br>\n\n\n- 使用 **em** 使得文字为斜体;\n- `strong` 加深文字;\n\n<br>\n\n\nform 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。\n- `action`属性指定表单数据发送的位置;\n``` html\n<form action=\"/submit-url\"></form>\n```\n\n---\ninput 允许通过多种方式从Web表单中收集数据:\n- 与`img`一样为空元素——不需要结束标签;\n- 使用 `type` 属性创建多种输入;\n  - `text` : 文本;\n  - `radio`: 可以使用单选按钮;\n  - `checkbox`: 表单使用 **复选框**;\n- 使用`name`属性使得区分提交的数据;\n  - 令多个单选按钮具有 **相同** 的`name`, 使得在选中其中一个按钮时自动取消另外的单选按钮;\n  - 形成`name = value`形式的属性对进行提交;\n```html\n<label><input id=\"indoor\" type=\"radio\" name = \"indoor-outdoor\"> Indoor</label>\n<label><input id=\"outdoor\" type=\"radio\" name = 'indoor-outdoor'> Outdoor</label>\n```\n- `placeholder` 中为 **占位符** 文本, 用于提示输入框中输入的信息;\n- `required`属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;\n\n```html\n    <input type=\"text\" name = \"catphotourl\">\n```\n\n<br>\n\n\n`button` 用于创建可点击的按钮:\n- 单击**没有任何属性**的表单按钮的默认行为会将表单提交到**表单**的 `action `属性中指定的位置;\n- 由于`input`和`button`为 **内联** 元素, 即使相隔书写也会显示在同行:\n- `type`的`submit`明确了为 可提交按钮;\n```html\n<button type = \"submit\">Submit</button>\n```\n\n<br>\n\nlabel 元素用于帮助将 input 元素的文本与 input 元素本身关联起来\n```html\n<label><input type=\"radio\"> cat</label>\n<!-- 点击单词 \"cat\" 也将选择 radio 按钮。 -->\n```\n\n<br>\n\n`id`用于标识特定的HTML元素\n\n<br>\n\n`fieldset` 元素用于在 Web 表单中将相关的输入和标签组合在一起:\n  - 块级元素，这意味着它们出现在新的一行上。\n  - `legend` 元素充当 fieldset 元素中内容的标题。\n```html\n<fieldset>\n        <legend> Is your cat an indoor or outdoor cat?</legend>\n          <label><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n          <label><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label>\n</fieldset>\n```\n![](/img/legend-2025-01-21-21-19-51.png)\n\n<br>\n\n还可以使用`for`属性将文本直接嵌套在`label`当中, 同时设置`input`的`id`与上述的`for`属性相同, 从而实现文本与元素相关联的效果:\n```html\n<input id=\"loving\" type=\"checkbox\"> \n<label for = \"loving\"> Loving </label>\n```\n\n<br>\n\n默认选中的按钮: `checked`\n```html\n<input checked type=\"radio\" name=\"meal\" value=\"breakfast\"> Breakfast\n```\n> checked属性无需额外赋值.\n\n<br>\n\n`footer`素用于定义文档或章节的页脚:\n- 脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.\n\n<br>\n\nhead 相关\n- 存放 $\\underline{元数据}$ 不会实际显示在html中的数据;\n- `title `元素决定了浏览器在页面的标题栏或选项卡中显示的内容;\n- `<link rel = \"stylesheet\" href = \"styles.css\">` 将CSS文件链接到当前的HTML\n\nelse:\n- `<!DOCTYPE html`: 声明满足最新版本html相关设置的要求;\n- `meta`是空元素; `<meta charset = \"utf-8\">`;\n- \n\n\n---\n\n选择器:\n- **id**选择器\n```css\n#cat {\n  width: 250px;\n}\n```\n- **class**选择器\n```css\n.class-name, .other-class {\n  styles\n}\n```\n- class类中元素的选择\n```css\n.item p{\n  /* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */\n  display: inline-block; \n}\n```\n- **伪元素**\n```css\n/* 已访问链接后设置为灰色 */\na:visited{\n  color: grey;\n}\n\n/* 悬浮时的变色 */\na:hover {\n  color: brown;\n}\n\n/* 点击时的状态设置 */\na:active{\n  color: white;\n}\n```\n<br>\n\n```css\n  margin-left : auto;\n  margin-right: auto;\n```\n> 使得**普通**元素在父级元素的空间内 **水平居中**\n\n\n<br>\n\n`article`是一个语义化标签:\n- 用于表示文档、页面或应用中的**独立**的、完整的内容单元;\n- 清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;\n- 内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.\n\n与其他类似标签的区别:\n- `div`: 粹的容器，没有语义，常用于布局;\n- `section`: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;\n- `article`: 示一个可以独立存在的内容单元.\n\n<br>\n\n```css\n/* 设置备用字体 */\nh1, h2 {\n  font-family: Impact, serif;\n}\n```\n\n\n","slug":"计","published":1,"updated":"2025-01-21T15:04:19.192Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3eok001puyqggrtifxqe","content":"<p>所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:</p>\n<ul>\n<li>第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；</li>\n<li>另一个作用是当图片无法加载时，页面需要显示的替代文本。</li>\n</ul>\n<p><br></p>\n<p>注意嵌套的形式.<br>e.g<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>See more <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> in our gallery.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>See more <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://freecatphotoapp.com&quot;</span> <span class=\"hljs-attr\">target</span> = <span class=\"hljs-string\">&quot;_blank&quot;</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> in our gallery.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>锚元素除了能将文本转化为链接, 还可以将 <strong>图片</strong> 转换为链接:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">hreg</span> = <span class=\"hljs-string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;A cute orange cat lying on its back.&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>section</strong> 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。</p>\n<p><br></p>\n<p>列表:</p>\n<ul>\n<li>无序列表: <code>ul</code>;</li>\n<li>有序列表:<code>ol</code>;</li>\n<li>列表项: <code>li</code>;</li>\n</ul>\n<p><br></p>\n<p><strong>figure</strong> 元素代表自包含的内容，允许将图像与标题相关联;<br><strong>figcaption</strong> 元素用于添加标题以描述 figure 元素中包含的图像。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figure</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;image.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;A description of the image&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figcaption</span>&gt;</span>A cute cat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figcaption</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figure</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li>使用 <strong>em</strong> 使得文字为斜体;</li>\n<li><code>strong</code> 加深文字;</li>\n</ul>\n<p><br></p>\n<p>form 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。</p>\n<ul>\n<li><code>action</code>属性指定表单数据发送的位置;<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/submit-url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>input 允许通过多种方式从Web表单中收集数据:</p>\n<ul>\n<li>与<code>img</code>一样为空元素——不需要结束标签;</li>\n<li>使用 <code>type</code> 属性创建多种输入;<ul>\n<li><code>text</code> : 文本;</li>\n<li><code>radio</code>: 可以使用单选按钮;</li>\n<li><code>checkbox</code>: 表单使用 <strong>复选框</strong>;</li>\n</ul>\n</li>\n<li>使用<code>name</code>属性使得区分提交的数据;<ul>\n<li>令多个单选按钮具有 <strong>相同</strong> 的<code>name</code>, 使得在选中其中一个按钮时自动取消另外的单选按钮;</li>\n<li>形成<code>name = value</code>形式的属性对进行提交;<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;indoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;indoor-outdoor&quot;</span>&gt;</span> Indoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outdoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&#x27;indoor-outdoor&#x27;</span>&gt;</span> Outdoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><code>placeholder</code> 中为 <strong>占位符</strong> 文本, 用于提示输入框中输入的信息;</li>\n<li><code>required</code>属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;catphotourl&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>button</code> 用于创建可点击的按钮:</p>\n<ul>\n<li>单击<strong>没有任何属性</strong>的表单按钮的默认行为会将表单提交到<strong>表单</strong>的 <code>action</code>属性中指定的位置;</li>\n<li>由于<code>input</code>和<code>button</code>为 <strong>内联</strong> 元素, 即使相隔书写也会显示在同行:</li>\n<li><code>type</code>的<code>submit</code>明确了为 可提交按钮;<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span> = <span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p>label 元素用于帮助将 input 元素的文本与 input 元素本身关联起来<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span>&gt;</span> cat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 点击单词 &quot;cat&quot; 也将选择 radio 按钮。 --&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><code>id</code>用于标识特定的HTML元素</p>\n<p><br></p>\n<p><code>fieldset</code> 元素用于在 Web 表单中将相关的输入和标签组合在一起:</p>\n<ul>\n<li>块级元素，这意味着它们出现在新的一行上。</li>\n<li><code>legend</code> 元素充当 fieldset 元素中内容的标题。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span> Is your cat an indoor or outdoor cat?<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;indoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;indoor-outdoor&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;indoor&quot;</span>&gt;</span> Indoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outdoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;indoor-outdoor&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;outdoor&quot;</span>&gt;</span> Outdoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<img src=\"/img/legend-2025-01-21-21-19-51.png\" alt=\"\"></li>\n</ul>\n<p><br></p>\n<p>还可以使用<code>for</code>属性将文本直接嵌套在<code>label</code>当中, 同时设置<code>input</code>的<code>id</code>与上述的<code>for</code>属性相同, 从而实现文本与元素相关联的效果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;loving&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span> = <span class=\"hljs-string\">&quot;loving&quot;</span>&gt;</span> Loving <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>默认选中的按钮: <code>checked</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">checked</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;meal&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;breakfast&quot;</span>&gt;</span> Breakfast<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>checked属性无需额外赋值.</p>\n</blockquote>\n<p><br></p>\n<p><code>footer</code>素用于定义文档或章节的页脚:</p>\n<ul>\n<li>脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.</li>\n</ul>\n<p><br></p>\n<p>head 相关</p>\n<ul>\n<li>存放 $\\underline{元数据}$ 不会实际显示在html中的数据;</li>\n<li><code>title</code>元素决定了浏览器在页面的标题栏或选项卡中显示的内容;</li>\n<li><code>&lt;link rel = &quot;stylesheet&quot; href = &quot;styles.css&quot;&gt;</code> 将CSS文件链接到当前的HTML</li>\n</ul>\n<p>else:</p>\n<ul>\n<li><code>&lt;!DOCTYPE html</code>: 声明满足最新版本html相关设置的要求;</li>\n<li><code>meta</code>是空元素; <code>&lt;meta charset = &quot;utf-8&quot;&gt;</code>;</li>\n<li></li>\n</ul>\n<hr>\n<p>选择器:</p>\n<ul>\n<li><strong>id</strong>选择器<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#cat</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">250px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><strong>class</strong>选择器<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.class-name</span>, <span class=\"hljs-selector-class\">.other-class</span> &#123;<br>  styles<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>class类中元素的选择<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> <span class=\"hljs-selector-tag\">p</span>&#123;<br>  <span class=\"hljs-comment\">/* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */</span><br>  <span class=\"hljs-attribute\">display</span>: inline-block; <br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><strong>伪元素</strong><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 已访问链接后设置为灰色 */</span><br><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span>&#123;<br>  <span class=\"hljs-attribute\">color</span>: grey;<br>&#125;<br><br><span class=\"hljs-comment\">/* 悬浮时的变色 */</span><br><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: brown;<br>&#125;<br><br><span class=\"hljs-comment\">/* 点击时的状态设置 */</span><br><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:active</span>&#123;<br>  <span class=\"hljs-attribute\">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure>\n<br></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">margin-left</span> : auto;<br><span class=\"hljs-attribute\">margin-right</span>: auto;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>使得<strong>普通</strong>元素在父级元素的空间内 <strong>水平居中</strong></p>\n</blockquote>\n<p><br></p>\n<p><code>article</code>是一个语义化标签:</p>\n<ul>\n<li>用于表示文档、页面或应用中的<strong>独立</strong>的、完整的内容单元;</li>\n<li>清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;</li>\n<li>内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.</li>\n</ul>\n<p>与其他类似标签的区别:</p>\n<ul>\n<li><code>div</code>: 粹的容器，没有语义，常用于布局;</li>\n<li><code>section</code>: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;</li>\n<li><code>article</code>: 示一个可以独立存在的内容单元.</li>\n</ul>\n<p><br></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 设置备用字体 */</span><br><span class=\"hljs-selector-tag\">h1</span>, <span class=\"hljs-selector-tag\">h2</span> &#123;<br>  <span class=\"hljs-attribute\">font-family</span>: Impact, serif;<br>&#125;<br></code></pre></td></tr></table></figure>\n","more":"<p>所有的 img 元素都应该有一个 alt 属性。 alt 属性的文本（值）有两个作用:</p>\n<ul>\n<li>第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；</li>\n<li>另一个作用是当图片无法加载时，页面需要显示的替代文本。</li>\n</ul>\n<p><br></p>\n<p>注意嵌套的形式.<br>e.g<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>See more <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> in our gallery.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>要在新标签页中打开链接，可以在锚元素（a）中使用 target 属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>See more <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://freecatphotoapp.com&quot;</span> <span class=\"hljs-attr\">target</span> = <span class=\"hljs-string\">&quot;_blank&quot;</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> in our gallery.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>锚元素除了能将文本转化为链接, 还可以将 <strong>图片</strong> 转换为链接:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">hreg</span> = <span class=\"hljs-string\">&quot;https://freecatphotoapp.com&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;A cute orange cat lying on its back.&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>section</strong> 元素用于在文档中定义各部分，如章节、标题、页脚或文档的任何其他部分。 它是一个对 SEO 和无障碍特性有帮助的语义元素。</p>\n<p><br></p>\n<p>列表:</p>\n<ul>\n<li>无序列表: <code>ul</code>;</li>\n<li>有序列表:<code>ol</code>;</li>\n<li>列表项: <code>li</code>;</li>\n</ul>\n<p><br></p>\n<p><strong>figure</strong> 元素代表自包含的内容，允许将图像与标题相关联;<br><strong>figcaption</strong> 元素用于添加标题以描述 figure 元素中包含的图像。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figure</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;image.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;A description of the image&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">figcaption</span>&gt;</span>A cute cat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figcaption</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">figure</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li>使用 <strong>em</strong> 使得文字为斜体;</li>\n<li><code>strong</code> 加深文字;</li>\n</ul>\n<p><br></p>\n<p>form 元素用于从用户获取信息，如姓名、电子邮件和其他详细信息。</p>\n<ul>\n<li><code>action</code>属性指定表单数据发送的位置;<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/submit-url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>input 允许通过多种方式从Web表单中收集数据:</p>\n<ul>\n<li>与<code>img</code>一样为空元素——不需要结束标签;</li>\n<li>使用 <code>type</code> 属性创建多种输入;<ul>\n<li><code>text</code> : 文本;</li>\n<li><code>radio</code>: 可以使用单选按钮;</li>\n<li><code>checkbox</code>: 表单使用 <strong>复选框</strong>;</li>\n</ul>\n</li>\n<li>使用<code>name</code>属性使得区分提交的数据;<ul>\n<li>令多个单选按钮具有 <strong>相同</strong> 的<code>name</code>, 使得在选中其中一个按钮时自动取消另外的单选按钮;</li>\n<li>形成<code>name = value</code>形式的属性对进行提交;<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;indoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;indoor-outdoor&quot;</span>&gt;</span> Indoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outdoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&#x27;indoor-outdoor&#x27;</span>&gt;</span> Outdoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><code>placeholder</code> 中为 <strong>占位符</strong> 文本, 用于提示输入框中输入的信息;</li>\n<li><code>required</code>属性可以避免缺少所需信息时的提交, 无需赋值, 确保空格即可;</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;catphotourl&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>button</code> 用于创建可点击的按钮:</p>\n<ul>\n<li>单击<strong>没有任何属性</strong>的表单按钮的默认行为会将表单提交到<strong>表单</strong>的 <code>action</code>属性中指定的位置;</li>\n<li>由于<code>input</code>和<code>button</code>为 <strong>内联</strong> 元素, 即使相隔书写也会显示在同行:</li>\n<li><code>type</code>的<code>submit</code>明确了为 可提交按钮;<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span> = <span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p>label 元素用于帮助将 input 元素的文本与 input 元素本身关联起来<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span>&gt;</span> cat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 点击单词 &quot;cat&quot; 也将选择 radio 按钮。 --&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><code>id</code>用于标识特定的HTML元素</p>\n<p><br></p>\n<p><code>fieldset</code> 元素用于在 Web 表单中将相关的输入和标签组合在一起:</p>\n<ul>\n<li>块级元素，这意味着它们出现在新的一行上。</li>\n<li><code>legend</code> 元素充当 fieldset 元素中内容的标题。<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span> Is your cat an indoor or outdoor cat?<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;indoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;indoor-outdoor&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;indoor&quot;</span>&gt;</span> Indoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outdoor&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;indoor-outdoor&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;outdoor&quot;</span>&gt;</span> Outdoor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<img src=\"/img/legend-2025-01-21-21-19-51.png\" alt=\"\"></li>\n</ul>\n<p><br></p>\n<p>还可以使用<code>for</code>属性将文本直接嵌套在<code>label</code>当中, 同时设置<code>input</code>的<code>id</code>与上述的<code>for</code>属性相同, 从而实现文本与元素相关联的效果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;loving&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span> = <span class=\"hljs-string\">&quot;loving&quot;</span>&gt;</span> Loving <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>默认选中的按钮: <code>checked</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">checked</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;meal&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;breakfast&quot;</span>&gt;</span> Breakfast<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>checked属性无需额外赋值.</p>\n</blockquote>\n<p><br></p>\n<p><code>footer</code>素用于定义文档或章节的页脚:</p>\n<ul>\n<li>脚通常包含文档作者信息、版权数据、使用条款链接、联系信息等.</li>\n</ul>\n<p><br></p>\n<p>head 相关</p>\n<ul>\n<li>存放 $\\underline{元数据}$ 不会实际显示在html中的数据;</li>\n<li><code>title</code>元素决定了浏览器在页面的标题栏或选项卡中显示的内容;</li>\n<li><code>&lt;link rel = &quot;stylesheet&quot; href = &quot;styles.css&quot;&gt;</code> 将CSS文件链接到当前的HTML</li>\n</ul>\n<p>else:</p>\n<ul>\n<li><code>&lt;!DOCTYPE html</code>: 声明满足最新版本html相关设置的要求;</li>\n<li><code>meta</code>是空元素; <code>&lt;meta charset = &quot;utf-8&quot;&gt;</code>;</li>\n<li></li>\n</ul>\n<hr>\n<p>选择器:</p>\n<ul>\n<li><strong>id</strong>选择器<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#cat</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">250px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><strong>class</strong>选择器<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.class-name</span>, <span class=\"hljs-selector-class\">.other-class</span> &#123;<br>  styles<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>class类中元素的选择<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> <span class=\"hljs-selector-tag\">p</span>&#123;<br>  <span class=\"hljs-comment\">/* 设置为样式近似于内联--排列在同一行, 同时可以设置宽高、边距 */</span><br>  <span class=\"hljs-attribute\">display</span>: inline-block; <br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><strong>伪元素</strong><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 已访问链接后设置为灰色 */</span><br><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span>&#123;<br>  <span class=\"hljs-attribute\">color</span>: grey;<br>&#125;<br><br><span class=\"hljs-comment\">/* 悬浮时的变色 */</span><br><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: brown;<br>&#125;<br><br><span class=\"hljs-comment\">/* 点击时的状态设置 */</span><br><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:active</span>&#123;<br>  <span class=\"hljs-attribute\">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure>\n<br></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">margin-left</span> : auto;<br><span class=\"hljs-attribute\">margin-right</span>: auto;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>使得<strong>普通</strong>元素在父级元素的空间内 <strong>水平居中</strong></p>\n</blockquote>\n<p><br></p>\n<p><code>article</code>是一个语义化标签:</p>\n<ul>\n<li>用于表示文档、页面或应用中的<strong>独立</strong>的、完整的内容单元;</li>\n<li>清晰地表明内容的用途，帮助开发者和搜索引擎理解页面结构;</li>\n<li>内容通常可以通过RSS订阅、社交媒体分享等方式单独发布.</li>\n</ul>\n<p>与其他类似标签的区别:</p>\n<ul>\n<li><code>div</code>: 粹的容器，没有语义，常用于布局;</li>\n<li><code>section</code>: 表示文档中的一个逻辑区域，通常用于分组内容，但不一定是独立的内容单元;</li>\n<li><code>article</code>: 示一个可以独立存在的内容单元.</li>\n</ul>\n<p><br></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 设置备用字体 */</span><br><span class=\"hljs-selector-tag\">h1</span>, <span class=\"hljs-selector-tag\">h2</span> &#123;<br>  <span class=\"hljs-attribute\">font-family</span>: Impact, serif;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"协议切换与认证配置","date":"2025-01-18T04:47:21.000Z","excerpt":"已经为服务器配置了代理还是在初次push时显示 Connection timed out?😱 不要急, 可能需要在SSH与Https协议之间进行切换~","index_img":"/img/哭哭帕克.jpg","_content":"# Git 远程仓库认证：从 SSH 到 HTTPS\n\n## 背景介绍\n在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。\n\n## 认证机制解析\n\n### 双层认证架构\n1. **服务器层认证**\n   - 用于验证用户对服务器的访问权限\n   - 通常通过 SSH 密钥或密码完成\n\n2. **仓库层认证**\n   - 验证用户对特定 Git 仓库的操作权限\n   - 独立于服务器认证系统\n   - 确保代码安全性和提交者身份\n\n### SSH vs HTTPS \n\n\n1. **SSH 协议**\n   - 优势：\n     - 更安全，使用密钥对进行加密\n     - 配置一次可永久使用\n     - 可以避免每次输入密码\n   - 劣势：\n     - 可能被防火墙阻止（22端口）\n     - 在某些企业网络中可能无法使用\n     - 配置相对复杂\n\n2. **HTTPS 协议**\n   - 优势：\n     - 几乎总是可用（443端口）\n     - 穿透防火墙能力强\n     - 配置简单\n   - 劣势：\n     - 需要管理凭证\n     - 可能需要频繁输入认证信息\n\n## 连接问题分析\n\n### SSH 超时问题解析\nSSH 连接可能出现超时的原因：\n1. **网络限制**\n   - 企业防火墙可能会阻止或限制 SSH 连接\n   - 某些网络环境会定期切断长时间的 SSH 连接\n\n2. **代理影响**\n   - SSH 不会自动使用系统代理\n   - 需要额外配置 SSH 的代理设置\n\n3. **防火墙策略**\n   - 22 端口经常被封锁\n   - 某些地区可能限制 SSH 协议\n\n### HTTPS 连接优势\n1. **标准 Web 端口**\n   - 使用 443 端口，几乎总是开放的\n   - 与普通网页浏览使用相同的端口\n\n2. **代理兼容**\n   - 自动使用系统代理设置\n   - 更好的网络兼容性\n\n3. **连接特性**\n   - 非持久连接，每次请求独立\n   - 不受长连接限制影响\n\n## 协议转换实践\n在尝试直接`git push`时显示:\n![](/img/2025-01-18-12-58-38.png)\n通过执行命令`git remote -v`查看当前远程仓库的地址:\n![](/img/2025-01-18-13-01-29.png)\n> `git@`的前缀格式说明是通过`ssh`的方式, 我们尝试修改为`https`的协议来解决超时问题.\n\n更新仓库的URL:\n```bash\ngit remote set-url origin https://github.com/用户名/仓库名.git\n```\ne.g.: \n![](/img/2025-01-18-13-03-21.png)\n> 在更新之后执行`get remote -v`, 检查发现已经转换为`HTTPS`.\n\n\n### 配置凭证管理\n此时依旧无法直接`git push`, 因为仓库层认证的密码验证方式已经不受`github`支持, 如果尝试通过用户名-密码的方式验证, 将会失败:\n![](/img/2025-01-18-13-09-11.png)\n\n因此我们需要通过 **个人访问令牌**(PAT) 的方式来鉴权.\n1. **配置凭证管理:**\n```bash\n# 永久存储凭证\ngit config --global credential.helper store\n\n# 或临时缓存（如15分钟）\ngit config --global credential.helper 'cache --timeout=900'\n```\n> 如果不希望影响其他仓库, 去除`--global`即可.\n\n2. **获取PAT**:\n   1. 访问 GitHub Settings;\n   2. 下滑到底部,进入 `Developer settings`;\n   3. 选择 `Personal access tokens` → `Tokens (classic)`;\n   4. 在右上角选择生成新的`access token`;\n   5. 生成新令牌并设置适当的权限范围 (至少勾选`repo`).\n![](/img/2025-01-18-13-15-38.png)\n> 在生成PAT之后立即复制并保存.\n\n\n### 通过PAT鉴权\n此时, 我们可以`git push`然后利用PAT来鉴权:\n```bash\ngit push\nUsername: <GitHub用户名>\nPassword: <个人访问令牌>\n```\ne.g.\n![](/img/2025-01-18-13-23-22.png)\n\n## 安全相关建议\n\n### 凭证管理\n1. **凭证存储位置**\n   - Linux/Mac: `~/.git-credentials`\n   - Windows: `%USERPROFILE%\\.git-credentials`\n\n2. **安全建议**\n   - 定期更新访问令牌\n   - 在共享环境使用临时缓存\n   - 及时清理凭证缓存\n\n### 故障排除\n```bash\n# 删除全局凭证配置\ngit config --global --unset credential.helper\n\n# 删除凭证文件\nrm ~/.git-credentials  # Linux/Mac\ndel \"%USERPROFILE%\\.git-credentials\"  # Windows\n```\n","source":"_posts/认证配置.md","raw":"---\ntitle: 协议切换与认证配置\ndate: 2025-01-18 12:47:21\ntags: \n- 服务器\n- PAT\ncategories: 通用技能\nexcerpt: 已经为服务器配置了代理还是在初次push时显示 Connection timed out?😱 不要急, 可能需要在SSH与Https协议之间进行切换~\nindex_img: /img/哭哭帕克.jpg\n---\n# Git 远程仓库认证：从 SSH 到 HTTPS\n\n## 背景介绍\n在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。\n\n## 认证机制解析\n\n### 双层认证架构\n1. **服务器层认证**\n   - 用于验证用户对服务器的访问权限\n   - 通常通过 SSH 密钥或密码完成\n\n2. **仓库层认证**\n   - 验证用户对特定 Git 仓库的操作权限\n   - 独立于服务器认证系统\n   - 确保代码安全性和提交者身份\n\n### SSH vs HTTPS \n\n\n1. **SSH 协议**\n   - 优势：\n     - 更安全，使用密钥对进行加密\n     - 配置一次可永久使用\n     - 可以避免每次输入密码\n   - 劣势：\n     - 可能被防火墙阻止（22端口）\n     - 在某些企业网络中可能无法使用\n     - 配置相对复杂\n\n2. **HTTPS 协议**\n   - 优势：\n     - 几乎总是可用（443端口）\n     - 穿透防火墙能力强\n     - 配置简单\n   - 劣势：\n     - 需要管理凭证\n     - 可能需要频繁输入认证信息\n\n## 连接问题分析\n\n### SSH 超时问题解析\nSSH 连接可能出现超时的原因：\n1. **网络限制**\n   - 企业防火墙可能会阻止或限制 SSH 连接\n   - 某些网络环境会定期切断长时间的 SSH 连接\n\n2. **代理影响**\n   - SSH 不会自动使用系统代理\n   - 需要额外配置 SSH 的代理设置\n\n3. **防火墙策略**\n   - 22 端口经常被封锁\n   - 某些地区可能限制 SSH 协议\n\n### HTTPS 连接优势\n1. **标准 Web 端口**\n   - 使用 443 端口，几乎总是开放的\n   - 与普通网页浏览使用相同的端口\n\n2. **代理兼容**\n   - 自动使用系统代理设置\n   - 更好的网络兼容性\n\n3. **连接特性**\n   - 非持久连接，每次请求独立\n   - 不受长连接限制影响\n\n## 协议转换实践\n在尝试直接`git push`时显示:\n![](/img/2025-01-18-12-58-38.png)\n通过执行命令`git remote -v`查看当前远程仓库的地址:\n![](/img/2025-01-18-13-01-29.png)\n> `git@`的前缀格式说明是通过`ssh`的方式, 我们尝试修改为`https`的协议来解决超时问题.\n\n更新仓库的URL:\n```bash\ngit remote set-url origin https://github.com/用户名/仓库名.git\n```\ne.g.: \n![](/img/2025-01-18-13-03-21.png)\n> 在更新之后执行`get remote -v`, 检查发现已经转换为`HTTPS`.\n\n\n### 配置凭证管理\n此时依旧无法直接`git push`, 因为仓库层认证的密码验证方式已经不受`github`支持, 如果尝试通过用户名-密码的方式验证, 将会失败:\n![](/img/2025-01-18-13-09-11.png)\n\n因此我们需要通过 **个人访问令牌**(PAT) 的方式来鉴权.\n1. **配置凭证管理:**\n```bash\n# 永久存储凭证\ngit config --global credential.helper store\n\n# 或临时缓存（如15分钟）\ngit config --global credential.helper 'cache --timeout=900'\n```\n> 如果不希望影响其他仓库, 去除`--global`即可.\n\n2. **获取PAT**:\n   1. 访问 GitHub Settings;\n   2. 下滑到底部,进入 `Developer settings`;\n   3. 选择 `Personal access tokens` → `Tokens (classic)`;\n   4. 在右上角选择生成新的`access token`;\n   5. 生成新令牌并设置适当的权限范围 (至少勾选`repo`).\n![](/img/2025-01-18-13-15-38.png)\n> 在生成PAT之后立即复制并保存.\n\n\n### 通过PAT鉴权\n此时, 我们可以`git push`然后利用PAT来鉴权:\n```bash\ngit push\nUsername: <GitHub用户名>\nPassword: <个人访问令牌>\n```\ne.g.\n![](/img/2025-01-18-13-23-22.png)\n\n## 安全相关建议\n\n### 凭证管理\n1. **凭证存储位置**\n   - Linux/Mac: `~/.git-credentials`\n   - Windows: `%USERPROFILE%\\.git-credentials`\n\n2. **安全建议**\n   - 定期更新访问令牌\n   - 在共享环境使用临时缓存\n   - 及时清理凭证缓存\n\n### 故障排除\n```bash\n# 删除全局凭证配置\ngit config --global --unset credential.helper\n\n# 删除凭证文件\nrm ~/.git-credentials  # Linux/Mac\ndel \"%USERPROFILE%\\.git-credentials\"  # Windows\n```\n","slug":"认证配置","published":1,"updated":"2025-01-19T11:46:34.126Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3eok001ruyqg7vmkdc73","content":"<h1 id=\"Git-远程仓库认证：从-SSH-到-HTTPS\"><a href=\"#Git-远程仓库认证：从-SSH-到-HTTPS\" class=\"headerlink\" title=\"Git 远程仓库认证：从 SSH 到 HTTPS\"></a>Git 远程仓库认证：从 SSH 到 HTTPS</h1><h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。</p>\n<h2 id=\"认证机制解析\"><a href=\"#认证机制解析\" class=\"headerlink\" title=\"认证机制解析\"></a>认证机制解析</h2><h3 id=\"双层认证架构\"><a href=\"#双层认证架构\" class=\"headerlink\" title=\"双层认证架构\"></a>双层认证架构</h3><ol>\n<li><p><strong>服务器层认证</strong></p>\n<ul>\n<li>用于验证用户对服务器的访问权限</li>\n<li>通常通过 SSH 密钥或密码完成</li>\n</ul>\n</li>\n<li><p><strong>仓库层认证</strong></p>\n<ul>\n<li>验证用户对特定 Git 仓库的操作权限</li>\n<li>独立于服务器认证系统</li>\n<li>确保代码安全性和提交者身份</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"SSH-vs-HTTPS\"><a href=\"#SSH-vs-HTTPS\" class=\"headerlink\" title=\"SSH vs HTTPS\"></a>SSH vs HTTPS</h3><ol>\n<li><p><strong>SSH 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>更安全，使用密钥对进行加密</li>\n<li>配置一次可永久使用</li>\n<li>可以避免每次输入密码</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>可能被防火墙阻止（22端口）</li>\n<li>在某些企业网络中可能无法使用</li>\n<li>配置相对复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>HTTPS 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>几乎总是可用（443端口）</li>\n<li>穿透防火墙能力强</li>\n<li>配置简单</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>需要管理凭证</li>\n<li>可能需要频繁输入认证信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"连接问题分析\"><a href=\"#连接问题分析\" class=\"headerlink\" title=\"连接问题分析\"></a>连接问题分析</h2><h3 id=\"SSH-超时问题解析\"><a href=\"#SSH-超时问题解析\" class=\"headerlink\" title=\"SSH 超时问题解析\"></a>SSH 超时问题解析</h3><p>SSH 连接可能出现超时的原因：</p>\n<ol>\n<li><p><strong>网络限制</strong></p>\n<ul>\n<li>企业防火墙可能会阻止或限制 SSH 连接</li>\n<li>某些网络环境会定期切断长时间的 SSH 连接</li>\n</ul>\n</li>\n<li><p><strong>代理影响</strong></p>\n<ul>\n<li>SSH 不会自动使用系统代理</li>\n<li>需要额外配置 SSH 的代理设置</li>\n</ul>\n</li>\n<li><p><strong>防火墙策略</strong></p>\n<ul>\n<li>22 端口经常被封锁</li>\n<li>某些地区可能限制 SSH 协议</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTTPS-连接优势\"><a href=\"#HTTPS-连接优势\" class=\"headerlink\" title=\"HTTPS 连接优势\"></a>HTTPS 连接优势</h3><ol>\n<li><p><strong>标准 Web 端口</strong></p>\n<ul>\n<li>使用 443 端口，几乎总是开放的</li>\n<li>与普通网页浏览使用相同的端口</li>\n</ul>\n</li>\n<li><p><strong>代理兼容</strong></p>\n<ul>\n<li>自动使用系统代理设置</li>\n<li>更好的网络兼容性</li>\n</ul>\n</li>\n<li><p><strong>连接特性</strong></p>\n<ul>\n<li>非持久连接，每次请求独立</li>\n<li>不受长连接限制影响</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"协议转换实践\"><a href=\"#协议转换实践\" class=\"headerlink\" title=\"协议转换实践\"></a>协议转换实践</h2><p>在尝试直接<code>git push</code>时显示:<br><img src=\"/img/2025-01-18-12-58-38.png\" alt=\"\"><br>通过执行命令<code>git remote -v</code>查看当前远程仓库的地址:<br><img src=\"/img/2025-01-18-13-01-29.png\" alt=\"\"></p>\n<blockquote>\n<p><code>git@</code>的前缀格式说明是通过<code>ssh</code>的方式, 我们尝试修改为<code>https</code>的协议来解决超时问题.</p>\n</blockquote>\n<p>更新仓库的URL:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git remote set-url origin https://github.com/用户名/仓库名.git<br></code></pre></td></tr></table></figure><br>e.g.:<br><img src=\"/img/2025-01-18-13-03-21.png\" alt=\"\"></p>\n<blockquote>\n<p>在更新之后执行<code>get remote -v</code>, 检查发现已经转换为<code>HTTPS</code>.</p>\n</blockquote>\n<h3 id=\"配置凭证管理\"><a href=\"#配置凭证管理\" class=\"headerlink\" title=\"配置凭证管理\"></a>配置凭证管理</h3><p>此时依旧无法直接<code>git push</code>, 因为仓库层认证的密码验证方式已经不受<code>github</code>支持, 如果尝试通过用户名-密码的方式验证, 将会失败:<br><img src=\"/img/2025-01-18-13-09-11.png\" alt=\"\"></p>\n<p>因此我们需要通过 <strong>个人访问令牌</strong>(PAT) 的方式来鉴权.</p>\n<ol>\n<li><p><strong>配置凭证管理:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 永久存储凭证</span><br>git config --global credential.helper store<br><br><span class=\"hljs-comment\"># 或临时缓存（如15分钟）</span><br>git config --global credential.helper <span class=\"hljs-string\">&#x27;cache --timeout=900&#x27;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不希望影响其他仓库, 去除<code>--global</code>即可.</p>\n</blockquote>\n</li>\n<li><p><strong>获取PAT</strong>:</p>\n<ol>\n<li>访问 GitHub Settings;</li>\n<li>下滑到底部,进入 <code>Developer settings</code>;</li>\n<li>选择 <code>Personal access tokens</code> → <code>Tokens (classic)</code>;</li>\n<li>在右上角选择生成新的<code>access token</code>;</li>\n<li>生成新令牌并设置适当的权限范围 (至少勾选<code>repo</code>).<br><img src=\"/img/2025-01-18-13-15-38.png\" alt=\"\"><blockquote>\n<p>在生成PAT之后立即复制并保存.</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"通过PAT鉴权\"><a href=\"#通过PAT鉴权\" class=\"headerlink\" title=\"通过PAT鉴权\"></a>通过PAT鉴权</h3><p>此时, 我们可以<code>git push</code>然后利用PAT来鉴权:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git push<br>Username: &lt;GitHub用户名&gt;<br>Password: &lt;个人访问令牌&gt;<br></code></pre></td></tr></table></figure><br>e.g.<br><img src=\"/img/2025-01-18-13-23-22.png\" alt=\"\"></p>\n<h2 id=\"安全相关建议\"><a href=\"#安全相关建议\" class=\"headerlink\" title=\"安全相关建议\"></a>安全相关建议</h2><h3 id=\"凭证管理\"><a href=\"#凭证管理\" class=\"headerlink\" title=\"凭证管理\"></a>凭证管理</h3><ol>\n<li><p><strong>凭证存储位置</strong></p>\n<ul>\n<li>Linux/Mac: <code>~/.git-credentials</code></li>\n<li>Windows: <code>%USERPROFILE%\\.git-credentials</code></li>\n</ul>\n</li>\n<li><p><strong>安全建议</strong></p>\n<ul>\n<li>定期更新访问令牌</li>\n<li>在共享环境使用临时缓存</li>\n<li>及时清理凭证缓存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 删除全局凭证配置</span><br>git config --global --<span class=\"hljs-built_in\">unset</span> credential.helper<br><br><span class=\"hljs-comment\"># 删除凭证文件</span><br><span class=\"hljs-built_in\">rm</span> ~/.git-credentials  <span class=\"hljs-comment\"># Linux/Mac</span><br>del <span class=\"hljs-string\">&quot;%USERPROFILE%\\.git-credentials&quot;</span>  <span class=\"hljs-comment\"># Windows</span><br></code></pre></td></tr></table></figure>\n","more":"<h1 id=\"Git-远程仓库认证：从-SSH-到-HTTPS\"><a href=\"#Git-远程仓库认证：从-SSH-到-HTTPS\" class=\"headerlink\" title=\"Git 远程仓库认证：从 SSH 到 HTTPS\"></a>Git 远程仓库认证：从 SSH 到 HTTPS</h1><h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在使用 Git 进行版本控制时，我们经常需要在 SSH 和 HTTPS 两种协议之间进行切换。本文将详细介绍这两种认证方式的特点、转换方法以及相关的常见问题解决方案。</p>\n<h2 id=\"认证机制解析\"><a href=\"#认证机制解析\" class=\"headerlink\" title=\"认证机制解析\"></a>认证机制解析</h2><h3 id=\"双层认证架构\"><a href=\"#双层认证架构\" class=\"headerlink\" title=\"双层认证架构\"></a>双层认证架构</h3><ol>\n<li><p><strong>服务器层认证</strong></p>\n<ul>\n<li>用于验证用户对服务器的访问权限</li>\n<li>通常通过 SSH 密钥或密码完成</li>\n</ul>\n</li>\n<li><p><strong>仓库层认证</strong></p>\n<ul>\n<li>验证用户对特定 Git 仓库的操作权限</li>\n<li>独立于服务器认证系统</li>\n<li>确保代码安全性和提交者身份</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"SSH-vs-HTTPS\"><a href=\"#SSH-vs-HTTPS\" class=\"headerlink\" title=\"SSH vs HTTPS\"></a>SSH vs HTTPS</h3><ol>\n<li><p><strong>SSH 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>更安全，使用密钥对进行加密</li>\n<li>配置一次可永久使用</li>\n<li>可以避免每次输入密码</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>可能被防火墙阻止（22端口）</li>\n<li>在某些企业网络中可能无法使用</li>\n<li>配置相对复杂</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>HTTPS 协议</strong></p>\n<ul>\n<li>优势：<ul>\n<li>几乎总是可用（443端口）</li>\n<li>穿透防火墙能力强</li>\n<li>配置简单</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>需要管理凭证</li>\n<li>可能需要频繁输入认证信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"连接问题分析\"><a href=\"#连接问题分析\" class=\"headerlink\" title=\"连接问题分析\"></a>连接问题分析</h2><h3 id=\"SSH-超时问题解析\"><a href=\"#SSH-超时问题解析\" class=\"headerlink\" title=\"SSH 超时问题解析\"></a>SSH 超时问题解析</h3><p>SSH 连接可能出现超时的原因：</p>\n<ol>\n<li><p><strong>网络限制</strong></p>\n<ul>\n<li>企业防火墙可能会阻止或限制 SSH 连接</li>\n<li>某些网络环境会定期切断长时间的 SSH 连接</li>\n</ul>\n</li>\n<li><p><strong>代理影响</strong></p>\n<ul>\n<li>SSH 不会自动使用系统代理</li>\n<li>需要额外配置 SSH 的代理设置</li>\n</ul>\n</li>\n<li><p><strong>防火墙策略</strong></p>\n<ul>\n<li>22 端口经常被封锁</li>\n<li>某些地区可能限制 SSH 协议</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HTTPS-连接优势\"><a href=\"#HTTPS-连接优势\" class=\"headerlink\" title=\"HTTPS 连接优势\"></a>HTTPS 连接优势</h3><ol>\n<li><p><strong>标准 Web 端口</strong></p>\n<ul>\n<li>使用 443 端口，几乎总是开放的</li>\n<li>与普通网页浏览使用相同的端口</li>\n</ul>\n</li>\n<li><p><strong>代理兼容</strong></p>\n<ul>\n<li>自动使用系统代理设置</li>\n<li>更好的网络兼容性</li>\n</ul>\n</li>\n<li><p><strong>连接特性</strong></p>\n<ul>\n<li>非持久连接，每次请求独立</li>\n<li>不受长连接限制影响</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"协议转换实践\"><a href=\"#协议转换实践\" class=\"headerlink\" title=\"协议转换实践\"></a>协议转换实践</h2><p>在尝试直接<code>git push</code>时显示:<br><img src=\"/img/2025-01-18-12-58-38.png\" alt=\"\"><br>通过执行命令<code>git remote -v</code>查看当前远程仓库的地址:<br><img src=\"/img/2025-01-18-13-01-29.png\" alt=\"\"></p>\n<blockquote>\n<p><code>git@</code>的前缀格式说明是通过<code>ssh</code>的方式, 我们尝试修改为<code>https</code>的协议来解决超时问题.</p>\n</blockquote>\n<p>更新仓库的URL:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git remote set-url origin https://github.com/用户名/仓库名.git<br></code></pre></td></tr></table></figure><br>e.g.:<br><img src=\"/img/2025-01-18-13-03-21.png\" alt=\"\"></p>\n<blockquote>\n<p>在更新之后执行<code>get remote -v</code>, 检查发现已经转换为<code>HTTPS</code>.</p>\n</blockquote>\n<h3 id=\"配置凭证管理\"><a href=\"#配置凭证管理\" class=\"headerlink\" title=\"配置凭证管理\"></a>配置凭证管理</h3><p>此时依旧无法直接<code>git push</code>, 因为仓库层认证的密码验证方式已经不受<code>github</code>支持, 如果尝试通过用户名-密码的方式验证, 将会失败:<br><img src=\"/img/2025-01-18-13-09-11.png\" alt=\"\"></p>\n<p>因此我们需要通过 <strong>个人访问令牌</strong>(PAT) 的方式来鉴权.</p>\n<ol>\n<li><p><strong>配置凭证管理:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 永久存储凭证</span><br>git config --global credential.helper store<br><br><span class=\"hljs-comment\"># 或临时缓存（如15分钟）</span><br>git config --global credential.helper <span class=\"hljs-string\">&#x27;cache --timeout=900&#x27;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不希望影响其他仓库, 去除<code>--global</code>即可.</p>\n</blockquote>\n</li>\n<li><p><strong>获取PAT</strong>:</p>\n<ol>\n<li>访问 GitHub Settings;</li>\n<li>下滑到底部,进入 <code>Developer settings</code>;</li>\n<li>选择 <code>Personal access tokens</code> → <code>Tokens (classic)</code>;</li>\n<li>在右上角选择生成新的<code>access token</code>;</li>\n<li>生成新令牌并设置适当的权限范围 (至少勾选<code>repo</code>).<br><img src=\"/img/2025-01-18-13-15-38.png\" alt=\"\"><blockquote>\n<p>在生成PAT之后立即复制并保存.</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"通过PAT鉴权\"><a href=\"#通过PAT鉴权\" class=\"headerlink\" title=\"通过PAT鉴权\"></a>通过PAT鉴权</h3><p>此时, 我们可以<code>git push</code>然后利用PAT来鉴权:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git push<br>Username: &lt;GitHub用户名&gt;<br>Password: &lt;个人访问令牌&gt;<br></code></pre></td></tr></table></figure><br>e.g.<br><img src=\"/img/2025-01-18-13-23-22.png\" alt=\"\"></p>\n<h2 id=\"安全相关建议\"><a href=\"#安全相关建议\" class=\"headerlink\" title=\"安全相关建议\"></a>安全相关建议</h2><h3 id=\"凭证管理\"><a href=\"#凭证管理\" class=\"headerlink\" title=\"凭证管理\"></a>凭证管理</h3><ol>\n<li><p><strong>凭证存储位置</strong></p>\n<ul>\n<li>Linux/Mac: <code>~/.git-credentials</code></li>\n<li>Windows: <code>%USERPROFILE%\\.git-credentials</code></li>\n</ul>\n</li>\n<li><p><strong>安全建议</strong></p>\n<ul>\n<li>定期更新访问令牌</li>\n<li>在共享环境使用临时缓存</li>\n<li>及时清理凭证缓存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 删除全局凭证配置</span><br>git config --global --<span class=\"hljs-built_in\">unset</span> credential.helper<br><br><span class=\"hljs-comment\"># 删除凭证文件</span><br><span class=\"hljs-built_in\">rm</span> ~/.git-credentials  <span class=\"hljs-comment\"># Linux/Mac</span><br>del <span class=\"hljs-string\">&quot;%USERPROFILE%\\.git-credentials&quot;</span>  <span class=\"hljs-comment\"># Windows</span><br></code></pre></td></tr></table></figure>\n"},{"title":"倦鸟","date":"2025-01-08T08:10:10.000Z","excerpt":"等一处栖居 🪶","index_img":"/img/倦鸟.png","banner_img":null,"hide":false,"archive":true,"_content":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n<img src = \"/img/倦鸟.png\" width =\"70%\">\n> 下附最初的三节诗, 以及灵感来源.\n\n\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","source":"_posts/poets/bird.md","raw":"---\ntitle: 倦鸟\ndate: 2025-01-08 16:10:10\ntags: \n- 短诗\n- 她\ncategories: 随机掉落的文字碎片\nexcerpt: 等一处栖居 🪶\nindex_img: /img/倦鸟.png\nbanner_img: \nhide: false\narchive: true\n---\n<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n<img src = \"/img/倦鸟.png\" width =\"70%\">\n> 下附最初的三节诗, 以及灵感来源.\n\n\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","slug":"poets/bird","published":1,"updated":"2025-01-19T11:46:34.125Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3eol001suyqg84gfc22w","content":"<p><br></p>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n<p><img src = \"/img/倦鸟.png\" width =\"70%\"></p>\n<blockquote>\n<p>下附最初的三节诗, 以及灵感来源.</p>\n</blockquote>\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>","more":"<p><br></p>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟\n<br>\n越过人海 坠入你乌黑瞳仁中的夜\n</p>\n\n<p><img src = \"/img/倦鸟.png\" width =\"70%\"></p>\n<blockquote>\n<p>下附最初的三节诗, 以及灵感来源.</p>\n</blockquote>\n<details>\n<summary> 完整三节诗</summary>\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    line-height: 1.5em;\"\n>\n我盘旋的目光是漂泊不息的倦鸟 <br>\n越过人海终于落入你乌黑瞳仁中的夜<br>\n<br>\n你澄澈的眼眸映照着闪烁明灭的晨星<br>\n你泛着红晕的脸颊 留着朝霞热切亲吻的印记<br>\n<br>\n我们的目光还是悄然相遇了<br>\n你温和的凝视又让我想起黎明的微光<br>\n我漆黑的羽翼微微颤动 随后灼灼燃烧<br>\n于是 我的目光载着余烬 再度飞远了<br>\n</p>\n</details>\n\n<details>\n<summary> 「灵感」Tagore's</summary>\n\n<p style = \" \n    font-size: 1.1em;\n    text-align: center;\n    line-height: 2em;\"\n>\nMy heart, the bird of the wilderness, <br>\nhas found its sky in your eyes.<br>\n\n<p style = \" \n    font-size: 1em;\n    text-align: center;\n    color: grey;\n    line-height: 2em;\"\n>(出自泰戈尔的园丁集)\n</p>\n\n</p>\n</details>"},{"title":"晚霞","date":"2025-01-09T12:59:02.000Z","excerpt":"记紫金港的世纪晚霞","hide":false,"archive":true,"_content":"<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临🌔\n</p>\n\n<img src = \"/img/晚霞.jpg\" width = \"70%\">","source":"_posts/poets/晚霞.md","raw":"---\ntitle: 晚霞\ndate: 2025-01-09 20:59:02\ntags: \n- 短诗\n- 自然\ncategories: 随机掉落的文字碎片\nexcerpt: 记紫金港的世纪晚霞\nhide: false\narchive: true\n---\n<br>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临🌔\n</p>\n\n<img src = \"/img/晚霞.jpg\" width = \"70%\">","slug":"poets/晚霞","published":1,"updated":"2025-01-19T11:46:34.125Z","comments":1,"layout":"post","photos":[],"_id":"cm68p3eol001vuyqgbhga9z2g","content":"<p><br></p>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临🌔\n</p>\n\n<p><img src = \"/img/晚霞.jpg\" width = \"70%\"></p>\n","more":"<p><br></p>\n<p style = \" \n    font-size: 1.3em;\n    text-align: center;\n    line-height: 2em;\"\n>\n白昼飞红了她的<span style = \"color: #fe4017\">脸颊</span> <br>\n以隐匿于远山之后的凝望<br>  \n默默期待着  <br>\n月色的降临🌔\n</p>\n\n<p><img src = \"/img/晚霞.jpg\" width = \"70%\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm68p3en90003uyqggym4831o","category_id":"cm68p3end0006uyqg2436dz40","_id":"cm68p3enf000fuyqgfb10gy7j"},{"post_id":"cm68p3enf000auyqg322dc9ae","category_id":"cm68p3end0006uyqg2436dz40","_id":"cm68p3eng000juyqg81p5errw"},{"post_id":"cm68p3enf000duyqg3k5fhc89","category_id":"cm68p3end0006uyqg2436dz40","_id":"cm68p3eng000muyqg24xs2p17"},{"post_id":"cm68p3enc0005uyqg6lzh8sde","category_id":"cm68p3enf000buyqgepst36ah","_id":"cm68p3eng000ruyqgh3945kyl"},{"post_id":"cm68p3ene0008uyqg4dw22x18","category_id":"cm68p3enf000guyqg17f17io3","_id":"cm68p3eni000uuyqg310lg8e2"},{"post_id":"cm68p3eng000luyqg98nm95v6","category_id":"cm68p3enf000guyqg17f17io3","_id":"cm68p3env000xuyqg3u7t00g3"},{"post_id":"cm68p3ene0009uyqgdp49bs99","category_id":"cm68p3enf000guyqg17f17io3","_id":"cm68p3env000yuyqgcuhf2czn"},{"post_id":"cm68p3enu000wuyqg1ci871ok","category_id":"cm68p3end0006uyqg2436dz40","_id":"cm68p3env0011uyqgf93iay0z"},{"post_id":"cm68p3eok001puyqggrtifxqe","category_id":"cm68p3end0006uyqg2436dz40","_id":"cm68p3eol001wuyqg3hlmhvj2"},{"post_id":"cm68p3eok001ruyqg7vmkdc73","category_id":"cm68p3enf000guyqg17f17io3","_id":"cm68p3eol001yuyqgc0k28r2r"},{"post_id":"cm68p3eo7001nuyqggybj8q6f","category_id":"cm68p3eok001quyqg06kfdi9e","_id":"cm68p3eol0020uyqgcjy8dciy"},{"post_id":"cm68p3eol001suyqg84gfc22w","category_id":"cm68p3eol001xuyqg1y8lf2yc","_id":"cm68p3eom0025uyqg70tz85n1"},{"post_id":"cm68p3eol001vuyqgbhga9z2g","category_id":"cm68p3eol001xuyqg1y8lf2yc","_id":"cm68p3eom0028uyqgd3db96ow"}],"PostTag":[{"post_id":"cm68p3en90003uyqggym4831o","tag_id":"cm68p3ene0007uyqgb44393i8","_id":"cm68p3eng000kuyqgbzd4amtk"},{"post_id":"cm68p3en90003uyqggym4831o","tag_id":"cm68p3enf000cuyqg311xfzi3","_id":"cm68p3eng000nuyqgeetp4b92"},{"post_id":"cm68p3enc0005uyqg6lzh8sde","tag_id":"cm68p3enf000huyqg8abq3ypk","_id":"cm68p3enh000suyqgdmva2mxu"},{"post_id":"cm68p3ene0008uyqg4dw22x18","tag_id":"cm68p3eng000puyqggptmc1xt","_id":"cm68p3env0010uyqg2beg65up"},{"post_id":"cm68p3ene0008uyqg4dw22x18","tag_id":"cm68p3eni000vuyqg1pgb5tv4","_id":"cm68p3env0012uyqg36un8jbu"},{"post_id":"cm68p3ene0009uyqgdp49bs99","tag_id":"cm68p3eni000vuyqg1pgb5tv4","_id":"cm68p3env0015uyqgdimd95rh"},{"post_id":"cm68p3ene0009uyqgdp49bs99","tag_id":"cm68p3env0013uyqgerl77u2b","_id":"cm68p3env0016uyqgg1py69ud"},{"post_id":"cm68p3enf000auyqg322dc9ae","tag_id":"cm68p3env0014uyqg2gi57at2","_id":"cm68p3eo00019uyqg9nznh81h"},{"post_id":"cm68p3enf000auyqg322dc9ae","tag_id":"cm68p3env0017uyqghj58cwo1","_id":"cm68p3eo0001auyqg5ngobpzq"},{"post_id":"cm68p3enf000duyqg3k5fhc89","tag_id":"cm68p3env0014uyqg2gi57at2","_id":"cm68p3eo2001duyqg51730zo6"},{"post_id":"cm68p3enf000duyqg3k5fhc89","tag_id":"cm68p3eo0001buyqgftcld03a","_id":"cm68p3eo2001euyqg1zjs1ro6"},{"post_id":"cm68p3eng000luyqg98nm95v6","tag_id":"cm68p3eo0001cuyqgathdcp07","_id":"cm68p3eo3001huyqg47fx33i1"},{"post_id":"cm68p3eng000luyqg98nm95v6","tag_id":"cm68p3eo2001fuyqghgdr08sf","_id":"cm68p3eo3001iuyqg18wlcb9a"},{"post_id":"cm68p3enu000wuyqg1ci871ok","tag_id":"cm68p3env0014uyqg2gi57at2","_id":"cm68p3eo3001kuyqghb8e0f6s"},{"post_id":"cm68p3enu000wuyqg1ci871ok","tag_id":"cm68p3eo0001buyqgftcld03a","_id":"cm68p3eo3001luyqg1efpdn84"},{"post_id":"cm68p3eo6001muyqgg5x54a9o","tag_id":"cm68p3eoc001ouyqg587jhklk","_id":"cm68p3eol001uuyqg7n4nc5nn"},{"post_id":"cm68p3eo7001nuyqggybj8q6f","tag_id":"cm68p3eol001tuyqgazt07pwj","_id":"cm68p3eol0021uyqgfp0g77l8"},{"post_id":"cm68p3eok001puyqggrtifxqe","tag_id":"cm68p3eoc001ouyqg587jhklk","_id":"cm68p3eol0024uyqgh3f0epto"},{"post_id":"cm68p3eok001ruyqg7vmkdc73","tag_id":"cm68p3eni000vuyqg1pgb5tv4","_id":"cm68p3eom0027uyqgfxmxadt3"},{"post_id":"cm68p3eok001ruyqg7vmkdc73","tag_id":"cm68p3eol0023uyqga4lqe28c","_id":"cm68p3eom0029uyqgei7i4xax"},{"post_id":"cm68p3eol001suyqg84gfc22w","tag_id":"cm68p3eom0026uyqgcpby9by8","_id":"cm68p3eom002cuyqg2gb1dcnt"},{"post_id":"cm68p3eol001suyqg84gfc22w","tag_id":"cm68p3eom002auyqgfln16pnt","_id":"cm68p3eom002duyqgabd315hr"},{"post_id":"cm68p3eol001vuyqgbhga9z2g","tag_id":"cm68p3eom0026uyqgcpby9by8","_id":"cm68p3eom002fuyqg7zfo99r7"},{"post_id":"cm68p3eol001vuyqgbhga9z2g","tag_id":"cm68p3eom002euyqg1rmchyf6","_id":"cm68p3eom002guyqgfh9ke4kf"}],"Tag":[{"name":"前后端交互","_id":"cm68p3ene0007uyqgb44393i8"},{"name":"网站开发","_id":"cm68p3enf000cuyqg311xfzi3"},{"name":"追番","_id":"cm68p3enf000huyqg8abq3ypk"},{"name":"ssh","_id":"cm68p3eng000puyqggptmc1xt"},{"name":"服务器","_id":"cm68p3eni000vuyqg1pgb5tv4"},{"name":"多会话管理","_id":"cm68p3env0013uyqgerl77u2b"},{"name":"前端","_id":"cm68p3env0014uyqg2gi57at2"},{"name":"JS","_id":"cm68p3env0017uyqghj58cwo1"},{"name":"CSS","_id":"cm68p3eo0001buyqgftcld03a"},{"name":"python","_id":"cm68p3eo0001cuyqgathdcp07"},{"name":"环境配置","_id":"cm68p3eo2001fuyqghgdr08sf"},{"name":"杂记","_id":"cm68p3eoc001ouyqg587jhklk"},{"name":"心理学","_id":"cm68p3eol001tuyqgazt07pwj"},{"name":"PAT","_id":"cm68p3eol0023uyqga4lqe28c"},{"name":"短诗","_id":"cm68p3eom0026uyqgcpby9by8"},{"name":"她","_id":"cm68p3eom002auyqgfln16pnt"},{"name":"自然","_id":"cm68p3eom002euyqg1rmchyf6"}]}}