{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","path":"fonts/LXGWWenKaiGBScreen.ttf","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/TypeScript.md","hash":"57a18df423b0b8669e6611654f99c8b27bfa08c8","modified":1736401611404},{"_id":"source/_posts/建站第一天.md","hash":"5b14352c72a3dc1d589304fd81126a365ef90014","modified":1736328477604},{"_id":"source/_posts/css笔记.md","hash":"ef318c2a983fb8c3df854711dfead51a1ba5321c","modified":1736340275338},{"_id":"source/about/index.md","hash":"51db98c8124ff2a7c6297aa8a8cfc4bd04303bc0","modified":1736318582842},{"_id":"source/_posts/JavaScript.md","hash":"24eb754a7f6b2723b81bc1d6967e827f14c42eae","modified":1736406363798},{"_id":"source/_posts/媒体查询.md","hash":"8b9a4e3c522b374fdf64270a4011b5b3a15c9001","modified":1736399590013},{"_id":"source/_drafts/my-fisrt-draft.md","hash":"e142445800a90b2f3e176061f51fc052d41c884e","modified":1736320419661},{"_id":"source/_posts/poets/bird.md","hash":"430781e22a5609c0fd0bea6492df393435a0040a","modified":1736341406718},{"_id":"source/css/custom.css","hash":"3b450cf9f87bd522f1f69991aaf141c5da750b60","modified":1736410431834},{"_id":"source/_posts/course_notes/My-New-Post.md","hash":"313faf52ee5f84ddea672ac9342aacea61b1309a","modified":1736328051592},{"_id":"source/_posts/社会心理学.md","hash":"255b07a9ca3895550f874d5253510dde0813f42e","modified":1736399547902},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1736410984397},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1736410984360},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1736410984360},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1736410984363},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1736410984363},{"_id":"themes/fluid/README.md","hash":"34e3223851da1596b9ff051f2b29c6004edca8a1","modified":1736410984363},{"_id":"themes/fluid/README_en.md","hash":"85656f2a23cc5e31420f0118bf5541b6e9f058b6","modified":1736410984363},{"_id":"themes/fluid/_config.yml","hash":"1eba561f8d7bc686e294266a6fc1b33ca0c223e0","modified":1736413824709},{"_id":"themes/fluid/package.json","hash":"a40b10b51b7500255a025d42b28e02324e089886","modified":1736413403373},{"_id":"themes/fluid/languages/de.yml","hash":"f814263ded504cb4c50a8b66157bdd71f553be1b","modified":1736410984364},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1736410984361},{"_id":"themes/fluid/languages/eo.yml","hash":"314b97a7e68093328675acfd308d839b1d772ac9","modified":1736410984365},{"_id":"themes/fluid/languages/es.yml","hash":"0ad94ddf1ca868a67b5b84aed257a30572962210","modified":1736410984365},{"_id":"themes/fluid/languages/en.yml","hash":"415e3403182e1282386f28b9d61343f147519163","modified":1736410984365},{"_id":"themes/fluid/languages/ja.yml","hash":"65a90f294f6c73245e8250e87d124630ad10b389","modified":1736410984365},{"_id":"themes/fluid/languages/ru.yml","hash":"998112b384b574e0e29c6ea16e4c1ebce1c15a4c","modified":1736410984366},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"497b3dea5058f718da225a7a443e916da895ea10","modified":1736410984366},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"05418d0bca261de386872be65027bf4498758788","modified":1736410984366},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"ded0621e63b1f8b241be21f6e9b52d4f36edbcd0","modified":1736410984366},{"_id":"themes/fluid/layout/about.ejs","hash":"2f3ea36713f0fa91d8d61d39fcf9e584372de818","modified":1736410984376},{"_id":"themes/fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1736410984366},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1736410984376},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1736410984377},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1736410984377},{"_id":"themes/fluid/layout/index.ejs","hash":"dde1f6a27c8d09c38850a691089937f181b6c035","modified":1736410984377},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1736410984377},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1736410984377},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1736410984377},{"_id":"themes/fluid/layout/post.ejs","hash":"c8da695dc1b01b715909ae6f1052ccaebdf9db4c","modified":1736410984378},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1736410984378},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1736410984378},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1736410984361},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1736410984361},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1736410984362},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1736410984361},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1736410984362},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1736410984362},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1736410984363},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1736410984362},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1736410984362},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1736410984367},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1736410984367},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1736410984367},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"901280e6fb3194c30542751d04f27e78b42d3c6f","modified":1736410984370},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1736410984367},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"6bb3335b5486d4bee2ed42f8bef57903066bc234","modified":1736410984370},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"a0bcbbfc34efaef3b23c6b531e7f3201f2eab2dd","modified":1736410984371},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1736410984371},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1736410984372},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1736410984376},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1736410984372},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1736410984376},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1736410984399},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1736410984399},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1736410984399},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1736410984401},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1736410984398},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1736410984401},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1736410984401},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1736410984402},{"_id":"themes/fluid/source/js/color-schema.js","hash":"e7addcc88eb73dec4a9a8641a4bb68966a38a65d","modified":1736410984402},{"_id":"themes/fluid/source/js/events.js","hash":"3efd602cdb694902d6e74c4eb1e5bd70120ac5b1","modified":1736410984402},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1736410984402},{"_id":"themes/fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1736410984403},{"_id":"themes/fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1736410984403},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1736410984403},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1736410984398},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1736410984404},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1736410984381},{"_id":"themes/fluid/source/js/umami-view.js","hash":"370ab30ab88c596d85327dbd7db3bafd49489fdd","modified":1736410984404},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1736410984382},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1736410984381},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1736410984382},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1736410984379},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1736410984383},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1736410984382},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1736410984382},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1736410984384},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1736410984383},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"67637461e3f94f9e9675369eb7ff015355d9ec54","modified":1736410984381},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1736410984384},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1736410984383},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1736410984384},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"f57be245e6e7228673e1dec3a3477e731492c5c1","modified":1736410984385},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1736410984386},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"1ff4ea054f2c735dfaccb0be90f1708a2a750bc8","modified":1736410984386},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"0bb33314aa5cfe326ab9bb14b545e343e4db4193","modified":1736410984385},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1736410984383},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"a93e2603021ad38714e870399767bea24e7cbe3e","modified":1736410984386},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1736410984386},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1736410984387},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1736410984387},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1736410984387},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1736410984388},{"_id":"themes/fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1736410984404},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1736410984386},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"474b00a57f43dbe7bc2876d637ece4214d016c06","modified":1736410984387},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1736410984388},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1736410984367},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1736410984368},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1736410984368},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1736410984368},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1736410984368},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1736410984369},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1736410984369},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1736410984388},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1736410984369},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1736410984369},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1736410984370},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"df6bae1a93827991049f7a33f6a69681c60eab0e","modified":1736410984370},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1736410984368},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1736410984371},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"047bece1db5cdf96cb78a44c6420ce3e92e6a9ca","modified":1736410984371},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1736410984372},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1736410984375},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1736410984375},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"73827074db4e0fc3d52c51a76285df87aa5e5a7f","modified":1736410984375},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1736410984372},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1736410984375},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1736410984376},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1736410984376},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1736410984373},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"26905d5862b1531ebcc175af15178dabeecc81c8","modified":1736410984375},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"f8fe8e58b83f627db82c0dbeb663389efc33c1c6","modified":1736410984373},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1736410984373},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1736410984373},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1736410984373},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1736410984373},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1736410984374},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1736410984374},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"acc72c3284fe906a4505132c3d9a4720d80e6fcb","modified":1736410984374},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1736410984374},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1736410984397},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1736410984374},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1736410984388},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1736410984379},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1736410984398},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da987411ae4a4e6896a9b8af1fce6209192af28e","modified":1736410984380},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1736410984389},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1736410984380},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1736410984380},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1736410984379},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"d103e4bf612b2445bb136712d57b81e784a313e2","modified":1736410984380},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1736410984381},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1736410984389},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1736410984389},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1736410984393},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"66d5b045c0e54001d3c98c5901d72590fe08acc4","modified":1736410984393},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1736410984394},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1736410984394},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1736410984395},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1736410984394},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1736410984395},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1736410984394},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"bac20c8fb20276b08972df5ecc7a5850a72393f4","modified":1736413686248},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1736410984396},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1736410984396},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1736410984396},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"6a35a450bd0a12f68fd92aac3f88b23475a98d46","modified":1736410984396},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1736410984396},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"31c64c3fae4a0fc4747d8afeb72f7a9667c5326c","modified":1736410984397},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1736410984397},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1736410984390},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1736410984390},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1736410984390},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1736410984391},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1736410984391},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1736410984391},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1736410984390},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"88c3c2d99a097142a87eeec0c7c65a3789f25117","modified":1736410984391},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1736410984392},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1736410984392},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1736410984392},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1736410984392},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1736410984393},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1736410984392},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1736410984393},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1736410984393},{"_id":"themes/fluid/package-lock.json","hash":"53b271ded56ff7acac508f85c600f8968818ab3a","modified":1736413403400},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1736410984400},{"_id":"source/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1725896166692},{"_id":"public/local-search.xml","hash":"58fd77224035fab90c293643f4680b954a2d6721","modified":1736414487890},{"_id":"public/css/custom.css","hash":"828014d4b22808ed3b6fa5d8919be21ee9049393","modified":1736414487890},{"_id":"public/about/index.html","hash":"927c5ddee1beb60e16d09bcecee09e1cfebc3df3","modified":1736414487890},{"_id":"public/2025/01/09/JavaScript/index.html","hash":"948861df7607e95d344526f0cfac3c8070704bf7","modified":1736414487890},{"_id":"public/2025/01/09/TypeScript/index.html","hash":"4a7df28a7f8c2578667ea6586677ae1873fac226","modified":1736414487890},{"_id":"public/2025/01/09/社会心理学/index.html","hash":"1d17fafba409626732e53d5765e554b4876dbd2c","modified":1736414487890},{"_id":"public/2025/01/08/媒体查询/index.html","hash":"c52948b673431f79d5056d04c928002de80df628","modified":1736414487890},{"_id":"public/2025/01/08/css笔记/index.html","hash":"4465d5756645fd1564b1919548c3c2a005293e89","modified":1736414487890},{"_id":"public/2025/01/08/建站第一天/index.html","hash":"957f1322827985eca88800dd36aebb05f6352db8","modified":1736414487890},{"_id":"public/2025/01/08/course_notes/My-New-Post/index.html","hash":"0638d1df4d34ca519cba6192790a8ad2a7dcc39e","modified":1736414487890},{"_id":"public/2025/01/08/poets/bird/index.html","hash":"8810b517efa0a37059ebfde469c20b7fd87552f8","modified":1736414487890},{"_id":"public/archives/index.html","hash":"5e2e80a50f043b5fee7b7a626abd9cd353603b30","modified":1736414487890},{"_id":"public/archives/2025/index.html","hash":"84c0ba5dcf2048ab6493c1111f4308f56da5d5f4","modified":1736414487890},{"_id":"public/index.html","hash":"f7b91eeb74e53a931afbf57a3125a06e6fc367ff","modified":1736414487890},{"_id":"public/archives/2025/01/index.html","hash":"f5213d04f0fdd3c30b80342226da77c3e8e61f2f","modified":1736414487890},{"_id":"public/tags/杂记/index.html","hash":"076b84923b96a74c4e6f1913907c7ac829d56b3c","modified":1736414487890},{"_id":"public/tags/poet/index.html","hash":"6a1aa688a31744a3a37d4bfe266ff4b9914b2066","modified":1736414487890},{"_id":"public/categories/前端学习/index.html","hash":"04b1965a71f667b2d24bf4f4a66bbbd6f1668dcb","modified":1736414487890},{"_id":"public/404.html","hash":"e43c2dbcfeb1e751015fdc98734702bb1d31fc78","modified":1736414487890},{"_id":"public/categories/poets/index.html","hash":"d4d32b2fb62dfe4e57fd1f47076891ab74d2338d","modified":1736414487890},{"_id":"public/tags/index.html","hash":"b811bd377bdcac9a88fcb856eff0e7db83451357","modified":1736414487890},{"_id":"public/categories/index.html","hash":"b1ce63e38fa28af06b1d897e96931c1e6f172e07","modified":1736414487890},{"_id":"public/links/index.html","hash":"fe68ce78c2de2e3f52b31b9835cbee5016a2b8b7","modified":1736414487890},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1736414487890},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1736414487890},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1736414487890},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1736414487890},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1736414487890},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1736414487890},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1736414487890},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1736414487890},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1736414487890},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1736414487890},{"_id":"public/css/main.css","hash":"98a5e5e437054682bc2bf8db620c7918c0b28357","modified":1736414487890},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1736414487890},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1736414487890},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1736414487890},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1736414487890},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1736414487890},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1736414487890},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1736414487890},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1736414487890},{"_id":"public/fonts/LXGWWenKaiGBScreen.ttf","hash":"e2139681d643e07e2ffb498fa3d656f6cba75afa","modified":1736414487890}],"Category":[{"name":"前端学习","_id":"cm5p4c7860004uscuedwucojm"},{"name":"poets","_id":"cm5p4c78a000fuscug0oqflg7"}],"Data":[],"Page":[{"_content":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n\n    font-display: swap;  /* 可选：优化字体加载 */\n  }\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n/* 为文章列表添加边框 */\n.index-card {\n  border: 1px solid rgba(var(--text-secondary-color-rgb), 0.4);\n  border-radius: 15px;\n  padding: 1rem;\n  padding-left: 0px;\n  margin-bottom: 1.5rem;\n  background: var(--background-color);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 2px 4px var(--shadow-color);\n}\n\n/* 暗黑模式下的边框设置 */\n[data-user-color-scheme=\"dark\"]{\n  .index-card {\n    border-color: rgba(152, 37, 37, 0.15);\n  }\n}\n\n/* 鼠标悬停效果 */\n.index-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 16px var(--shadow-color), \n              0 4px 8px var(--shadow-color);\n}\n\n/* 点击效果 */\n.index-card:active {\n  transform: translateY(0);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n","source":"css/custom.css","raw":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n\n    font-display: swap;  /* 可选：优化字体加载 */\n  }\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n/* 为文章列表添加边框 */\n.index-card {\n  border: 1px solid rgba(var(--text-secondary-color-rgb), 0.4);\n  border-radius: 15px;\n  padding: 1rem;\n  padding-left: 0px;\n  margin-bottom: 1.5rem;\n  background: var(--background-color);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 2px 4px var(--shadow-color);\n}\n\n/* 暗黑模式下的边框设置 */\n[data-user-color-scheme=\"dark\"]{\n  .index-card {\n    border-color: rgba(152, 37, 37, 0.15);\n  }\n}\n\n/* 鼠标悬停效果 */\n.index-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 16px var(--shadow-color), \n              0 4px 8px var(--shadow-color);\n}\n\n/* 点击效果 */\n.index-card:active {\n  transform: translateY(0);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n","date":"2025-01-09T08:13:51.834Z","updated":"2025-01-09T08:13:51.834Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cm5p4c7820000uscu3q2m5of0","content":"@font-face {\n    font-family: \"wenkai\";\n    src: url(\"/fonts/LXGWWenKaiGBScreen.ttf\") format(\"truetype\");\n\n    font-display: swap;  /* 可选：优化字体加载 */\n  }\n\nbody, .markdown-body {\n    font-family: \"wenkai\", sans-serif;\n}\n\n/* 为文章列表添加边框 */\n.index-card {\n  border: 1px solid rgba(var(--text-secondary-color-rgb), 0.4);\n  border-radius: 15px;\n  padding: 1rem;\n  padding-left: 0px;\n  margin-bottom: 1.5rem;\n  background: var(--background-color);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 2px 4px var(--shadow-color);\n}\n\n/* 暗黑模式下的边框设置 */\n[data-user-color-scheme=\"dark\"]{\n  .index-card {\n    border-color: rgba(152, 37, 37, 0.15);\n  }\n}\n\n/* 鼠标悬停效果 */\n.index-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 16px var(--shadow-color), \n              0 4px 8px var(--shadow-color);\n}\n\n/* 点击效果 */\n.index-card:active {\n  transform: translateY(0);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n"},{"title":"about","layout":"about","date":"2025-01-08T06:42:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2025-01-08 14:42:30\n---\n","updated":"2025-01-08T06:43:02.842Z","path":"about/index.html","comments":1,"_id":"cm5p4c7850002uscuev4j610v","content":"","excerpt":"","more":""}],"Post":[{"title":"css笔记","date":"2025-01-08T10:33:32.000Z","index_img":"/img/Aniya.png","excerpt":"css属性好多好复杂😶‍🌫️","_content":"> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n```\n```css\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n```\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","source":"_posts/css笔记.md","raw":"---\ntitle: css笔记\ndate: 2025-01-08 18:33:32\ntags:\nindex_img: /img/Aniya.png\ncategories: 前端学习\nexcerpt: css属性好多好复杂😶‍🌫️\n---\n> [在线编辑平台](https://jsfiddle.net/?locale=zh_CN)\n\n\n### 伪元素\n使用伪元素`before`和`after`可以为元素添加内容.\n```html\n<div class=\"author\">待抉</div>\n```\n```css\n.author:before {\n  content: \"Author: \";\n  font-weight: bold; /* 加粗字体 */\n  color: blue; /* 文本颜色为蓝色 */\n}\n.author:after {\n  content: \" ✍️\";\n  font-size: 1.2em; /* 调整图标大小 */\n  margin-left: 5px; /* 添加左边距 */\n}\n```\n\n### 基本的元素属性\n#### 布局属性\n- `margin`: 控制元素的外边距;\n- `padding`: 控制元素的内边距;\n\n#### 文本属性\n- `font-size`: 控制字体大小;\n- `font-weight`: 控制字体粗细;\n- `text-align`: 控制文本的对齐方式;\n- `text-decoration`: 控制文本的装饰;\n- `line-height`: 控制行高;\n- `letter-spacing`: 控制字符间距;\n- `text-transform`: 控制文本的大小写;\n\n#### 边框属性\n- `border`: e.g. `border: 1px solid red;` 简写属性;\n- `border-radius`: 控制元素的圆角;\n- `border-style`: solid, dashed, dotted...\n\n#### 其他\n- `overflow`: visible, hidden, scroll, auto;\n- `opacity`: 控制元素的透明度;\n- `cursor`: pointer, default, move, not-allowed...\n\n### 动感魔法\n#### hover效果\n通过为class设置`:hover`伪类，可以为元素添加鼠标悬停时的效果。\n```css\n.my-element:hover {\n  background-color: green;\n  color: red;\n  transform: scale(1.1);\n  font-size:20px;\n}\n```\n> 空格将不会被忽略, 需要确保类名与`:hover`之间不存在空格;\n\n其他的一些常用的伪类:\n```css\na:hover {\n      color: red;\n    }\n    button:active {\n      background-color: green;\n    }\n    input:focus {\n      border-color: blue;\n    }\n    a:visited {\n      color: purple;\n    }\n    p:first-child {\n      font-weight: bold;\n    }\n    p:last-child {\n      font-style: italic;\n    }\n    li:nth-child(2) {\n      color: red;\n    }\n    p:only-child {\n      color: green;\n    }\n    div:empty {\n      background-color: yellow;\n    }\n```\n\n### Flex\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* 定义Flex容器 */\n    .container {\n      display: flex; /* 将容器设置为Flexbox容器 */\n      \n      /* flex-direction: 定义主轴方向 */\n      /* row: 水平从左到右（默认） */\n      /* row-reverse: 水平从右到左 */\n      /* column: 垂直从上到下 */\n      /* column-reverse: 垂直从下到上 */\n      flex-direction: row; /* 可以改为row-reverse, column, column-reverse */\n\n      /* flex-wrap: 定义是否换行 */\n      /* nowrap: 不换行（默认） */\n      /* wrap: 换行 */\n      /* wrap-reverse: 反向换行 */\n      flex-wrap: wrap; /* 可以改为nowrap, wrap-reverse */\n\n      /* flex-flow: flex-direction 和 flex-wrap 的简写 */\n      /* flex-flow: <flex-direction> <flex-wrap>; */\n      flex-flow: row wrap; /* 可以改为column nowrap等组合 */\n\n      /* justify-content: 定义在主轴上的对齐方式 */\n      /* flex-start: 起始对齐（默认） */\n      /* flex-end: 末端对齐 */\n      /* center: 居中对齐 */\n      /* space-between: 两端对齐，项目之间间隔相等 */\n      /* space-around: 项目之间间隔相等，项目两边有半个间隔 */\n      /* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */\n      justify-content: space-between; /* 可以改为flex-start, flex-end, center, space-around, space-evenly */\n\n      /* align-items: 定义在交叉轴上的对齐方式 */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* baseline: 项目基线对齐 */\n      align-items: center; /* 可以改为flex-start, flex-end, stretch, baseline */\n\n      /* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */\n      /* stretch: 拉伸适应容器（默认） */\n      /* flex-start: 交叉轴起始对齐 */\n      /* flex-end: 交叉轴末端对齐 */\n      /* center: 交叉轴居中对齐 */\n      /* space-between: 多行两端对齐，行之间间隔相等 */\n      /* space-around: 多行之间间隔相等，行两边有半个间隔 */\n      align-content: space-between; /* 可以改为flex-start, flex-end, center, space-around */\n      \n      height: 100vh; /* 设置容器高度 */\n      background-color: #f0f0f0; /* 设置容器背景颜色 */\n    }\n    \n    /* 定义Flex项目 */\n    .item {\n      flex: 1; /* 设置项目的flex属性，项目平分空间 */\n      padding: 20px; /* 设置项目内边距 */\n      background-color: lightblue; /* 设置项目背景颜色 */\n      margin: 10px; /* 设置项目外边距 */\n      text-align: center; /* 设置项目文本居中 */\n      flex-grow: 1;/*尝试向flex容器扩展空间*/\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n  </div>\n</body>\n</html>\n```\n\n","slug":"css笔记","published":1,"updated":"2025-01-08T12:44:35.338Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c7840001uscu6zm41q8s","content":"<blockquote>\n<p><a href=\"https://jsfiddle.net/?locale=zh_CN\">在线编辑平台</a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot;Author: &quot;</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* 加粗字体 */</span><br>  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* 文本颜色为蓝色 */</span><br>&#125;<br><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:after</span> &#123;<br>  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot; ✍️&quot;</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>; <span class=\"hljs-comment\">/* 调整图标大小 */</span><br>  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* 添加左边距 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.my-element</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: green;<br>  <span class=\"hljs-attribute\">color</span>: red;<br>  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);<br>  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:active</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span> &#123;<br>      <span class=\"hljs-attribute\">border-color</span>: blue;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: purple;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-weight</span>: bold;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:last-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-style</span>: italic;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:only-child</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:empty</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex容器 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* 将容器设置为Flexbox容器 */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-direction: 定义主轴方向 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row: 水平从左到右（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row-reverse: 水平从右到左 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column: 垂直从上到下 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column-reverse: 垂直从下到上 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-direction</span>: row; <span class=\"hljs-comment\">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-wrap: 定义是否换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* nowrap: 不换行（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap: 换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap-reverse: 反向换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-wrap</span>: wrap; <span class=\"hljs-comment\">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-flow</span>: row wrap; <span class=\"hljs-comment\">/* 可以改为column nowrap等组合 */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 起始对齐（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">justify-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* baseline: 项目基线对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-items</span>: center; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>; <span class=\"hljs-comment\">/* 设置容器高度 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-comment\">/* 设置容器背景颜色 */</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    </span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex项目 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.item</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 设置项目内边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: lightblue; <span class=\"hljs-comment\">/* 设置项目背景颜色 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* 设置项目外边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-comment\">/* 设置项目文本居中 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">/*尝试向flex容器扩展空间*/</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p><a href=\"https://jsfiddle.net/?locale=zh_CN\">在线编辑平台</a></p>\n</blockquote>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>使用伪元素<code>before</code>和<code>after</code>可以为元素添加内容.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;author&quot;</span>&gt;</span>待抉<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot;Author: &quot;</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: bold; <span class=\"hljs-comment\">/* 加粗字体 */</span><br>  <span class=\"hljs-attribute\">color</span>: blue; <span class=\"hljs-comment\">/* 文本颜色为蓝色 */</span><br>&#125;<br><span class=\"hljs-selector-class\">.author</span><span class=\"hljs-selector-pseudo\">:after</span> &#123;<br>  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&quot; ✍️&quot;</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>; <span class=\"hljs-comment\">/* 调整图标大小 */</span><br>  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">5px</span>; <span class=\"hljs-comment\">/* 添加左边距 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"基本的元素属性\"><a href=\"#基本的元素属性\" class=\"headerlink\" title=\"基本的元素属性\"></a>基本的元素属性</h3><h4 id=\"布局属性\"><a href=\"#布局属性\" class=\"headerlink\" title=\"布局属性\"></a>布局属性</h4><ul>\n<li><code>margin</code>: 控制元素的外边距;</li>\n<li><code>padding</code>: 控制元素的内边距;</li>\n</ul>\n<h4 id=\"文本属性\"><a href=\"#文本属性\" class=\"headerlink\" title=\"文本属性\"></a>文本属性</h4><ul>\n<li><code>font-size</code>: 控制字体大小;</li>\n<li><code>font-weight</code>: 控制字体粗细;</li>\n<li><code>text-align</code>: 控制文本的对齐方式;</li>\n<li><code>text-decoration</code>: 控制文本的装饰;</li>\n<li><code>line-height</code>: 控制行高;</li>\n<li><code>letter-spacing</code>: 控制字符间距;</li>\n<li><code>text-transform</code>: 控制文本的大小写;</li>\n</ul>\n<h4 id=\"边框属性\"><a href=\"#边框属性\" class=\"headerlink\" title=\"边框属性\"></a>边框属性</h4><ul>\n<li><code>border</code>: e.g. <code>border: 1px solid red;</code> 简写属性;</li>\n<li><code>border-radius</code>: 控制元素的圆角;</li>\n<li><code>border-style</code>: solid, dashed, dotted…</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><code>overflow</code>: visible, hidden, scroll, auto;</li>\n<li><code>opacity</code>: 控制元素的透明度;</li>\n<li><code>cursor</code>: pointer, default, move, not-allowed…</li>\n</ul>\n<h3 id=\"动感魔法\"><a href=\"#动感魔法\" class=\"headerlink\" title=\"动感魔法\"></a>动感魔法</h3><h4 id=\"hover效果\"><a href=\"#hover效果\" class=\"headerlink\" title=\"hover效果\"></a>hover效果</h4><p>通过为class设置<code>:hover</code>伪类，可以为元素添加鼠标悬停时的效果。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.my-element</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: green;<br>  <span class=\"hljs-attribute\">color</span>: red;<br>  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);<br>  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>空格将不会被忽略, 需要确保类名与<code>:hover</code>之间不存在空格;</p>\n</blockquote>\n<p>其他的一些常用的伪类:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:active</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span> &#123;<br>      <span class=\"hljs-attribute\">border-color</span>: blue;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:visited</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: purple;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-weight</span>: bold;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:last-child</span> &#123;<br>      <span class=\"hljs-attribute\">font-style</span>: italic;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-attribute\">color</span>: red;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:only-child</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: green;<br>    &#125;<br>    <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:empty</span> &#123;<br>      <span class=\"hljs-attribute\">background-color</span>: yellow;<br>    &#125;<br></code></pre></td></tr></table></figure></p>\n<h3 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex容器 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-comment\">/* 将容器设置为Flexbox容器 */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-direction: 定义主轴方向 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row: 水平从左到右（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* row-reverse: 水平从右到左 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column: 垂直从上到下 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* column-reverse: 垂直从下到上 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-direction</span>: row; <span class=\"hljs-comment\">/* 可以改为row-reverse, column, column-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-wrap: 定义是否换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* nowrap: 不换行（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap: 换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* wrap-reverse: 反向换行 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-wrap</span>: wrap; <span class=\"hljs-comment\">/* 可以改为nowrap, wrap-reverse */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: flex-direction 和 flex-wrap 的简写 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;; */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-flow</span>: row wrap; <span class=\"hljs-comment\">/* 可以改为column nowrap等组合 */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* justify-content: 定义在主轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 起始对齐（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 两端对齐，项目之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 项目之间间隔相等，项目两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-evenly: 项目之间间隔相等，项目两边有完整间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">justify-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around, space-evenly */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-items: 定义在交叉轴上的对齐方式 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* baseline: 项目基线对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-items</span>: center; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, stretch, baseline */</span></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* align-content: 定义多行的内容在交叉轴上的对齐方式（适用于多行时） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* stretch: 拉伸适应容器（默认） */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-start: 交叉轴起始对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* flex-end: 交叉轴末端对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* center: 交叉轴居中对齐 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-between: 多行两端对齐，行之间间隔相等 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-comment\">/* space-around: 多行之间间隔相等，行两边有半个间隔 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">align-content</span>: space-between; <span class=\"hljs-comment\">/* 可以改为flex-start, flex-end, center, space-around */</span></span><br><span class=\"language-css\">      </span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>; <span class=\"hljs-comment\">/* 设置容器高度 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>; <span class=\"hljs-comment\">/* 设置容器背景颜色 */</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    </span><br><span class=\"language-css\">    <span class=\"hljs-comment\">/* 定义Flex项目 */</span></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.item</span> &#123;</span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* 设置项目的flex属性，项目平分空间 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">/* 设置项目内边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">background-color</span>: lightblue; <span class=\"hljs-comment\">/* 设置项目背景颜色 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-comment\">/* 设置项目外边距 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">text-align</span>: center; <span class=\"hljs-comment\">/* 设置项目文本居中 */</span></span><br><span class=\"language-css\">      <span class=\"hljs-attribute\">flex-grow</span>: <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">/*尝试向flex容器扩展空间*/</span></span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n"},{"title":"JavaScript","date":"2025-01-09T06:06:30.000Z","excerpt":"一种轻量级的、解释型的、面向对象的编程语言","math":true,"_content":"\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n","source":"_posts/JavaScript.md","raw":"---\ntitle: JavaScript\ndate: 2025-01-09 14:06:30\ntags:\ncategories:\nexcerpt: 一种轻量级的、解释型的、面向对象的编程语言\nmath: true\n---\n\n# 创建JS代码块\n## 变量\n### `var` or `let`?\n`var`先于`let`的产生, 后者是现代版本的JS中新的关键字.\n\n使用`var`, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是`let`并不适用.\n```js\nmyName = \"Chris\";\n\nfunction logName() {\n  console.log(myName);\n}\n\nlogName(); //输出\"Chris\"\n\nvar myName = \"Aniya\";\nlogName(); //输出\"Aniya\"\n```\n\n除此之外, 可以使用`var`前后声明相同的变量, 这并不会报错:\n```js\nvar myName = \"Chris\";\nvar myName = \"Bob\";\n```\n\n而`let`只能声明一次:\n```js\nlet myName = \"Chris\";\nmyName = \"Bob\";\n```\n\n因此, 在代码编写中应尽量**多使用**`let`而非`var`, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.\n\n\n### 变量命名的规则\n与C语言类似, 建议以 **字母、数字、下划线** 组成的标识符来命名变量.\n- 不可用`_`开头, 因为可能被JS设计为特殊的含义;\n- 不可用数字开头, 否则引发错误;\n- 大小写敏感;\n- 建议采用 **小写驼峰命名法** ,即小写整个命名的第一个字母然后大写剩下单词的首字符;\n- 避免使用保留字, 比如`var`,`let`,`for`等.\n\n### 变量类型\n\n```js\nlet myAge = 20 ;// 数字\nlet dolphinGoodbye = \"So long and thanks for all the fish\"; // 字符串\nlet test = 6 < 3; //boolean\n\n//数组类型\nlet myNameArray = [\"Chris\", \"Bob\", \"Jim\"];\nlet myNumberArray = [10, 15, 40];\n\n//对象类型\nlet dog = { name: \"Spot\", breed: \"Dalmatian\" };\n\n```\n> 对象类型的访问与结构体相似, `dog.name;`\n\n在上面的几种变量类型中, 我们都采用`let`关键字声明变量, 这体现了JS是一种 **动态类型语言** ,即无需指定变量包含的数据类型.\n\n同时, 这也意味着我们可以像`python`一样对同一个变量先后赋值不同类型的值:\n```js\nlet myNumber = \"500\";\ntypeof myNumber;\n// 输出 'string'\n\nmyNumber = 500; \ntypeof myNumber;\n//输出'number'\n```\n\n\n## 函数\n- $\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.\n```js\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"函数内\");\n  console.log(x);\n}\n```\n> 由于 **提升** 的存在, 上述的函数调用不会出错.\n\n\n### 默认参数\n在编写函数时, 可以通过在参数名称后添加`=`, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。\n```js\nfunction greeding(name = \"my friend\") {\n    console.log(`Hello, ${name}!`);\n}\nhello(); //Hello, my friend!\nhello(\"world\"); //Hello, world!\n```\n\n### 箭头函数\n在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:\n```js\nfunction myFunction() {\n  alert(\"你好\");\n}\n\n// 匿名函数\n(function () {\n  alert(\"你好\");\n});\n```\n> 正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.\n\n如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:\n```js\nfunction logKey(event) {\n  console.log(`You pressed \"${event.key}\".`);\n}\n\ntextBox.addEventListener(\"keydown\", logKey);\n```\n这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:\n```js\ntextBox.addEventListener(\"keydown\", function (event) {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.\n\n而**箭头函数**则是在此情况下更简洁的函数定义方式:\n```js\ntextBox.addEventListener(\"keydown\", (event) => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n\n//如果函数只接受一个参数, 也可以省略参数周围的括号\ntextBox.addEventListener(\"keydown\", event => {\n  console.log(`You pressed \"${event.key}\".`);\n});\n```\n\n如果只包含一行的`return`,则可以忽略`{}`和`return`关键字:\n```js\nconst originals = [1, 2, 3];\n\nconst doubled = originals.map(item => item * 2);\n\nconsole.log(doubled); // [2, 4, 6]\n```\n> `item => item * 2`等价于:\n```js\nfunction doubleItem(item) {\n  return item * 2;\n}\n```\n\n#### 一个实例\n```html\n<input id=\"textBox\" type=\"text\" />\n<div id=\"output\"></div>\n```\n```js\nconst textBox = document.querySelector(\"#textBox\");\nconst output = document.querySelector(\"#output\");\n\ntextBox.addEventListener(\"keydown\", (event) => {\n  output.textContent = `You pressed \"${event.key}\".`;\n});\n```\n通过监听输入框的keydown事件, 输出按下的键盘按键.\n\n### 函数作用域和冲突\n$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. \n- 全局作用域: 脚本模式运行所有代码的默认作用域;\n- 模块作用域: 模块模式中运行代码的作用域;\n- 函数作用域: 由函数创建的作用域\n\n和C语言相似, 在函数外部`let`定义的变量, 以及`const`定义的常量可以在函数内部访问.\n\n如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:\n```html\n<!-- Excerpt from my HTML -->\n<script src=\"first.js\"></script>\n<script src=\"second.js\"></script>\n<script>\n  greeting();\n</script>\n```\n> 如果两个JS文件都定义了`greeting`函数, 则只有第一个文件中的函数才会被调用.\n\n","slug":"JavaScript","published":1,"updated":"2025-01-09T07:06:03.798Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c7860003uscuahhc8v60","content":"<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logName</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myName);<br>&#125;<br><br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Chris&quot;</span><br><br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Aniya&quot;</span>;<br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>而<code>let</code>只能声明一次:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br>myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myAge = <span class=\"hljs-number\">20</span> ;<span class=\"hljs-comment\">// 数字</span><br><span class=\"hljs-keyword\">let</span> dolphinGoodbye = <span class=\"hljs-string\">&quot;So long and thanks for all the fish&quot;</span>; <span class=\"hljs-comment\">// 字符串</span><br><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">6</span> &lt; <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//boolean</span><br><br><span class=\"hljs-comment\">//数组类型</span><br><span class=\"hljs-keyword\">let</span> myNameArray = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Jim&quot;</span>];<br><span class=\"hljs-keyword\">let</span> myNumberArray = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>];<br><br><span class=\"hljs-comment\">//对象类型</span><br><span class=\"hljs-keyword\">let</span> dog = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spot&quot;</span>, <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNumber = <span class=\"hljs-string\">&quot;500&quot;</span>;<br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class=\"hljs-number\">500</span>; <br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>$\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">exampleFunction</span>();<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;函数内&quot;</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greeding</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;my friend&quot;</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">//Hello, my friend!</span><br><span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">&quot;world&quot;</span>); <span class=\"hljs-comment\">//Hello, world!</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 匿名函数</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logKey</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> originals = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-keyword\">const</span> doubled = originals.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item * <span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled); <span class=\"hljs-comment\">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleItem</span>(<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;textBox&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> textBox = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#textBox&quot;</span>);<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#output&quot;</span>);<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  output.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;first.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;second.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>  greeting();<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n","more":"<h1 id=\"创建JS代码块\"><a href=\"#创建JS代码块\" class=\"headerlink\" title=\"创建JS代码块\"></a>创建JS代码块</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"var-or-let\"><a href=\"#var-or-let\" class=\"headerlink\" title=\"var or let?\"></a><code>var</code> or <code>let</code>?</h3><p><code>var</code>先于<code>let</code>的产生, 后者是现代版本的JS中新的关键字.</p>\n<p>使用<code>var</code>, 可以对一个先前已被声明且初始化的变量重新声明, 这不会带来报错, 代码依旧可以工作. 但是<code>let</code>并不适用.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logName</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myName);<br>&#125;<br><br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Chris&quot;</span><br><br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Aniya&quot;</span>;<br><span class=\"hljs-title function_\">logName</span>(); <span class=\"hljs-comment\">//输出&quot;Aniya&quot;</span><br></code></pre></td></tr></table></figure></p>\n<p>除此之外, 可以使用<code>var</code>前后声明相同的变量, 这并不会报错:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>而<code>let</code>只能声明一次:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myName = <span class=\"hljs-string\">&quot;Chris&quot;</span>;<br>myName = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></p>\n<p>因此, 在代码编写中应尽量<strong>多使用</strong><code>let</code>而非<code>var</code>, 这可以帮助我们排除无意中重新命名相同变量而导致的错误.</p>\n<h3 id=\"变量命名的规则\"><a href=\"#变量命名的规则\" class=\"headerlink\" title=\"变量命名的规则\"></a>变量命名的规则</h3><p>与C语言类似, 建议以 <strong>字母、数字、下划线</strong> 组成的标识符来命名变量.</p>\n<ul>\n<li>不可用<code>_</code>开头, 因为可能被JS设计为特殊的含义;</li>\n<li>不可用数字开头, 否则引发错误;</li>\n<li>大小写敏感;</li>\n<li>建议采用 <strong>小写驼峰命名法</strong> ,即小写整个命名的第一个字母然后大写剩下单词的首字符;</li>\n<li>避免使用保留字, 比如<code>var</code>,<code>let</code>,<code>for</code>等.</li>\n</ul>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myAge = <span class=\"hljs-number\">20</span> ;<span class=\"hljs-comment\">// 数字</span><br><span class=\"hljs-keyword\">let</span> dolphinGoodbye = <span class=\"hljs-string\">&quot;So long and thanks for all the fish&quot;</span>; <span class=\"hljs-comment\">// 字符串</span><br><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">6</span> &lt; <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//boolean</span><br><br><span class=\"hljs-comment\">//数组类型</span><br><span class=\"hljs-keyword\">let</span> myNameArray = [<span class=\"hljs-string\">&quot;Chris&quot;</span>, <span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Jim&quot;</span>];<br><span class=\"hljs-keyword\">let</span> myNumberArray = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>];<br><br><span class=\"hljs-comment\">//对象类型</span><br><span class=\"hljs-keyword\">let</span> dog = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spot&quot;</span>, <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Dalmatian&quot;</span> &#125;;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>对象类型的访问与结构体相似, <code>dog.name;</code></p>\n</blockquote>\n<p>在上面的几种变量类型中, 我们都采用<code>let</code>关键字声明变量, 这体现了JS是一种 <strong>动态类型语言</strong> ,即无需指定变量包含的数据类型.</p>\n<p>同时, 这也意味着我们可以像<code>python</code>一样对同一个变量先后赋值不同类型的值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> myNumber = <span class=\"hljs-string\">&quot;500&quot;</span>;<br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">// 输出 &#x27;string&#x27;</span><br><br>myNumber = <span class=\"hljs-number\">500</span>; <br><span class=\"hljs-keyword\">typeof</span> myNumber;<br><span class=\"hljs-comment\">//输出&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>$\\underline{提升}$ 解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">exampleFunction</span>();<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;函数内&quot;</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 <strong>提升</strong> 的存在, 上述的函数调用不会出错.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在编写函数时, 可以通过在参数名称后添加<code>=</code>, 再指定默认值, 这样当调用函数时, 如果没有传入该参数, 则使用默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greeding</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">&quot;my friend&quot;</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">$&#123;name&#125;</span>!`</span>);<br>&#125;<br><span class=\"hljs-title function_\">hello</span>(); <span class=\"hljs-comment\">//Hello, my friend!</span><br><span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">&quot;world&quot;</span>); <span class=\"hljs-comment\">//Hello, world!</span><br></code></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在了解箭头函数的作用之前, 需要先介绍 $\\underline{匿名函数}$:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 匿名函数</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;你好&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>正如其名, 匿名函数没有函数名, 不能被调用, 但可以作为参数传入其他函数中.</p>\n</blockquote>\n<p>如果我们希望在监听某个事件发生时调用简单的函数来处理, 则可以通过调用上述的匿名函数实现:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logKey</span>(<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, logKey);<br></code></pre></td></tr></table></figure><br>这部分代码通过监听html元素的keydown事件, 调用函数输出按下的键盘按键. 我们可以通过匿名函数来简化书写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只需传入函数体, 而不需要函数名, 就可以实现监听事件并调用函数的功能.</p>\n</blockquote>\n<p>而<strong>箭头函数</strong>则是在此情况下更简洁的函数定义方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br><br><span class=\"hljs-comment\">//如果函数只接受一个参数, 也可以省略参数周围的括号</span><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>\n<p>如果只包含一行的<code>return</code>,则可以忽略<code>&#123;&#125;</code>和<code>return</code>关键字:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> originals = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-keyword\">const</span> doubled = originals.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item * <span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled); <span class=\"hljs-comment\">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>item =&gt; item * 2</code>等价于:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleItem</span>(<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> item * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"一个实例\"><a href=\"#一个实例\" class=\"headerlink\" title=\"一个实例\"></a>一个实例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;textBox&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;output&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> textBox = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#textBox&quot;</span>);<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#output&quot;</span>);<br><br>textBox.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keydown&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;<br>  output.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`You pressed &quot;<span class=\"hljs-subst\">$&#123;event.key&#125;</span>&quot;.`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>通过监听输入框的keydown事件, 输出按下的键盘按键.</p>\n<h3 id=\"函数作用域和冲突\"><a href=\"#函数作用域和冲突\" class=\"headerlink\" title=\"函数作用域和冲突\"></a>函数作用域和冲突</h3><p>$\\underline{作用域}$ 指当前的执行上下文, 在其中的值和表达式可以被访问. </p>\n<ul>\n<li>全局作用域: 脚本模式运行所有代码的默认作用域;</li>\n<li>模块作用域: 模块模式中运行代码的作用域;</li>\n<li>函数作用域: 由函数创建的作用域</li>\n</ul>\n<p>和C语言相似, 在函数外部<code>let</code>定义的变量, 以及<code>const</code>定义的常量可以在函数内部访问.</p>\n<p>如果HTML调用了多个外部JS文件, 其中具有相同的函数名, 那么只能访问的第一个函数, 第二个函数将被忽略:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Excerpt from my HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;first.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;second.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>  greeting();<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果两个JS文件都定义了<code>greeting</code>函数, 则只有第一个文件中的函数才会被调用.</p>\n</blockquote>\n"},{"title":"建站第一天","date":"2025-01-08T08:04:13.000Z","excerpt":"鸽了好久的小博客终于诞生了","_content":"\n原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.\n\n然而发现Astro的文档~~还不够丰富, 配置起来还真是麻烦~~.折腾了几天, 还是放弃了. **还是hexo真香**.😊\n\n## 为什么搭建这个博客?😋\n- 记录一下自己的学习历程\n- 为生活的碎片留档, ~~越来越不想用puq了~~\n","source":"_posts/建站第一天.md","raw":"---\ntitle: 建站第一天\ndate: 2025-01-08 16:04:13\ntags: 杂记\nexcerpt: 鸽了好久的小博客终于诞生了\n---\n\n原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.\n\n然而发现Astro的文档~~还不够丰富, 配置起来还真是麻烦~~.折腾了几天, 还是放弃了. **还是hexo真香**.😊\n\n## 为什么搭建这个博客?😋\n- 记录一下自己的学习历程\n- 为生活的碎片留档, ~~越来越不想用puq了~~\n","slug":"建站第一天","published":1,"updated":"2025-01-08T09:27:57.604Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c7870005uscuc6ie7rl7","content":"<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p>\n<p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p>\n<h2 id=\"为什么搭建这个博客-😋\"><a href=\"#为什么搭建这个博客-😋\" class=\"headerlink\" title=\"为什么搭建这个博客?😋\"></a>为什么搭建这个博客?😋</h2><ul>\n<li>记录一下自己的学习历程</li>\n<li>为生活的碎片留档, <del>越来越不想用puq了</del></li>\n</ul>\n","more":"<p>原本在倒腾Astro框架的, 想着用自己一些微薄的前端经验可以更自由地在react框架下自定义博客.</p>\n<p>然而发现Astro的文档<del>还不够丰富, 配置起来还真是麻烦</del>.折腾了几天, 还是放弃了. <strong>还是hexo真香</strong>.😊</p>\n<h2 id=\"为什么搭建这个博客-😋\"><a href=\"#为什么搭建这个博客-😋\" class=\"headerlink\" title=\"为什么搭建这个博客?😋\"></a>为什么搭建这个博客?😋</h2><ul>\n<li>记录一下自己的学习历程</li>\n<li>为生活的碎片留档, <del>越来越不想用puq了</del></li>\n</ul>\n"},{"title":"my-fisrt-draft","_content":"","source":"_drafts/my-fisrt-draft.md","raw":"---\ntitle: my-fisrt-draft\ntags:\n---\n","slug":"my-fisrt-draft","published":0,"date":"2025-01-08T07:13:39.661Z","updated":"2025-01-08T07:13:39.661Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c7870006uscugwzlbwbe","content":"","excerpt":"","more":""},{"title":"TypeScript","date":"2025-01-09T05:45:55.000Z","excerpt":"让我们在编译时检查类型","_content":"\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2025-01-09 13:45:55\ntags:\ncategories: 前端学习\nexcerpt: 让我们在编译时检查类型\n---\n\n","slug":"TypeScript","published":1,"updated":"2025-01-09T05:46:51.404Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c7880008uscu1zwn26jw","content":"","more":""},{"title":"媒体查询","date":"2025-01-08T11:16:49.000Z","excerpt":"利用媒体查询建立响应式的设计","index_img":"/img/Aniya_放大镜.jpg","_content":"> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","source":"_posts/媒体查询.md","raw":"---\ntitle: 媒体查询\ndate: 2025-01-08 19:16:49\ntags:\nexcerpt: 利用媒体查询建立响应式的设计\nindex_img: /img/Aniya_放大镜.jpg\n---\n> [媒体查询入门指南](https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries)\n> [使用编程方法测试媒体查询](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries)\n\n# 媒体查询入门\n对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.\n\n媒体查询的范式:\n```css\n@media media-type and (media-feature) {\n    /*css rules*/\n}\n```\n> 1. 媒体类型用于声明css文件被用作什么类型的媒体;\n> 2. 媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;\n> 3. 通过测试且符合媒体类型的情况下应用内部的CSS样式.\n\n**media-type**: all, print, screen, speech.\n\n## 媒体特征\n### 屏幕尺寸\n使用`min`,`max`在一定的数值范围内启用当前的CSS样式.\n> 如果去掉前缀, 将仅在恰好为当前数值中启用.\n```css\n/* 启用宽度大于或等于600px的屏幕 */\n@media screen and (max-width: 600px){\n    ...\n}\n\n/* 启用宽度小于或等于600px的屏幕 */\n@media screen and (min-width: 600px){\n    ...\n}\n\n/* 窗口恰好等于600px时 */\n@media screen and (width: 600px) {\n    ...\n}\n```\n\n### 朝向\n`orientation`可以检测设备的方向, 如竖屏或横屏.\n```css\n@media screen and (orientation: portrait) {\n    /* 竖放时的CSS样式 */\n}\n@media screen and (orientation: landscape) {\n    /* 横屏时的CSS样式 */\n}\n```\n\n## 更复杂的媒体查询\n- `and`实现与逻辑:\n```css\n@media screen and (min-width: 400px) and (orientation: landscape) {\n  body {\n    color: blue;\n  }\n}\n```\n\n- `,`实现或逻辑:\n```css\n@media (min-width: 768px) and (orientation: landscape), (max-width: 480px) {\n  /* \n  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)\n  */\n}\n```\n> 与C中的`&`和`|`类似, 与的优先级更高, 先将`and`的条件进行判断, 然后视作整体.\n\n- `not`实现非逻辑:\n```css\n@media not all and (orientation: landscape) {\n/* 非全部屏幕且屏幕方向为横向 */\n}\n```\n\n- `not`实现 **反转查询**:\n> 与最近的`and`组合所绑定, 注意优先级\n\n```css\n@media not screen and (color), print and (color) { ... }\n```\n`,`将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:\n```css\n@media (not (screen and (color))), print and (color) { ... }\n```\n\n\n---\n\n# 利用查询结果扩展设计\n上述在CSS中利用`@media`可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.\n\n- 使用`window.matchMedia()`方法存放媒体查询结果:\n```js\n// 检测设备的旋转方向是否为纵向\nvar mediaQueryList = window.matchMedia(\"(orientation: portrait)\");\n```\n\n- 检查属性`matches`获取对应的查询结果:\n```css\nif (mediaQueryList.matches) {\n  /* 设备的旋转方向为纵向 portrait */\n} else {\n  /* 设备的旋转方向不是纵向，也就是横向 landscape */\n}\n```\n\n- 通过`addListener()`方法注册监听器, 持续监听查询列表的结果\n```ts\n// 定义媒体查询字符串\nconst mediaQueryString: string = \"(orientation: portrait)\";\n\n// 创建查询列表\nconst mediaQueryList: MediaQueryList = window.matchMedia(mediaQueryString);\n\n// 定义回调函数，使用 MediaQueryListEvent 类型\nfunction handleOrientationChange(event: MediaQueryListEvent): void {\n  if (event.matches) {\n    // 媒体查询匹配（竖屏）\n    console.log(\"Orientation changed to portrait\");\n    // 在这里执行竖屏时的逻辑\n  } else {\n    // 媒体查询不匹配（横屏）\n    console.log(\"Orientation changed to landscape\");\n    // 在这里执行横屏时的逻辑\n  }\n}\n\n// 先运行一次回调函数，传入 MediaQueryList 对象\nhandleOrientationChange({\n    matches: mediaQueryList.matches,\n    media: mediaQueryList.media,\n    type: 'change',\n} as MediaQueryListEvent);\n\n// 为查询列表注册监听器，同时将回调函数传给监听器\nmediaQueryList.addEventListener('change', handleOrientationChange);\n\n// (可选) 在组件卸载时或不再需要监听时，移除事件监听器\n// mediaQueryList.removeEventListener('change', handleOrientationChange);\n```\n\n","slug":"媒体查询","published":1,"updated":"2025-01-09T05:13:10.013Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c789000cuscuf3i60qoe","content":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\">媒体查询入门指南</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\">使用编程方法测试媒体查询</a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> media-type <span class=\"hljs-keyword\">and</span> (media-feature) &#123;<br>    <span class=\"hljs-comment\">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 窗口恰好等于600px时 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: portrait) &#123;<br>    <span class=\"hljs-comment\">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>    <span class=\"hljs-comment\">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><p><code>and</code>实现与逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>  <span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>,</code>实现或逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape), (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">480px</span>) &#123;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class=\"hljs-comment\">  */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n</li>\n<li><p><code>not</code>实现非逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br><span class=\"hljs-comment\">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>not</code>实现 <strong>反转查询</strong>:</p>\n<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-keyword\">not</span> (screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>))), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 检测设备的旋转方向是否为纵向</span><br><span class=\"hljs-keyword\">var</span> mediaQueryList = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查属性<code>matches</code>获取对应的查询结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">if (mediaQueryList<span class=\"hljs-selector-class\">.matches</span>) &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 定义媒体查询字符串</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>;<br><br><span class=\"hljs-comment\">// 创建查询列表</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryList</span>: <span class=\"hljs-title class_\">MediaQueryList</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(mediaQueryString);<br><br><span class=\"hljs-comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleOrientationChange</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MediaQueryListEvent</span></span>): <span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// 媒体查询匹配（竖屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 媒体查询不匹配（横屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class=\"hljs-title function_\">handleOrientationChange</span>(&#123;<br>    <span class=\"hljs-attr\">matches</span>: mediaQueryList.<span class=\"hljs-property\">matches</span>,<br>    <span class=\"hljs-attr\">media</span>: mediaQueryList.<span class=\"hljs-property\">media</span>,<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>&#125; <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MediaQueryListEvent</span>);<br><br><span class=\"hljs-comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class=\"hljs-comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class=\"hljs-comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n","more":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/CSS_layout/Media_queries\">媒体查询入门指南</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries\">使用编程方法测试媒体查询</a></p>\n</blockquote>\n<h1 id=\"媒体查询入门\"><a href=\"#媒体查询入门\" class=\"headerlink\" title=\"媒体查询入门\"></a>媒体查询入门</h1><p>对于前端, 如果我们想实现响应式的设计, 那么媒体查询是必不可少的工具. 媒体查询可以帮助我们根据不同的设备和屏幕尺寸, 调整我们的网页的布局和样式.</p>\n<p>媒体查询的范式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> media-type <span class=\"hljs-keyword\">and</span> (media-feature) &#123;<br>    <span class=\"hljs-comment\">/*css rules*/</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>媒体类型用于声明css文件被用作什么类型的媒体;</li>\n<li>媒体表达式用于指定媒体特征, 只有满足媒体特征的条件下, 才会应用css规则;</li>\n<li>通过测试且符合媒体类型的情况下应用内部的CSS样式.</li>\n</ol>\n</blockquote>\n<p><strong>media-type</strong>: all, print, screen, speech.</p>\n<h2 id=\"媒体特征\"><a href=\"#媒体特征\" class=\"headerlink\" title=\"媒体特征\"></a>媒体特征</h2><h3 id=\"屏幕尺寸\"><a href=\"#屏幕尺寸\" class=\"headerlink\" title=\"屏幕尺寸\"></a>屏幕尺寸</h3><p>使用<code>min</code>,<code>max</code>在一定的数值范围内启用当前的CSS样式.</p>\n<blockquote>\n<p>如果去掉前缀, 将仅在恰好为当前数值中启用.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 启用宽度大于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 启用宽度小于或等于600px的屏幕 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">600px</span>)&#123;<br>    ...<br>&#125;<br><br><span class=\"hljs-comment\">/* 窗口恰好等于600px时 */</span><br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"朝向\"><a href=\"#朝向\" class=\"headerlink\" title=\"朝向\"></a>朝向</h3><p><code>orientation</code>可以检测设备的方向, 如竖屏或横屏.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: portrait) &#123;<br>    <span class=\"hljs-comment\">/* 竖放时的CSS样式 */</span><br>&#125;<br><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>    <span class=\"hljs-comment\">/* 横屏时的CSS样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"更复杂的媒体查询\"><a href=\"#更复杂的媒体查询\" class=\"headerlink\" title=\"更复杂的媒体查询\"></a>更复杂的媒体查询</h2><ul>\n<li><p><code>and</code>实现与逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">400px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br>  <span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>,</code>实现或逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">768px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape), (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">480px</span>) &#123;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  (屏幕宽度大于等于 768px 且屏幕方向为横向) 或 (屏幕宽度小于等于 480px)</span><br><span class=\"hljs-comment\">  */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>与C中的<code>&amp;</code>和<code>|</code>类似, 与的优先级更高, 先将<code>and</code>的条件进行判断, 然后视作整体.</p>\n</blockquote>\n</li>\n<li><p><code>not</code>实现非逻辑:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> all <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">orientation</span>: landscape) &#123;<br><span class=\"hljs-comment\">/* 非全部屏幕且屏幕方向为横向 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>not</code>实现 <strong>反转查询</strong>:</p>\n<blockquote>\n<p>与最近的<code>and</code>组合所绑定, 注意优先级</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">not</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure>\n<p><code>,</code>将媒体查询的表达式分为了前后两级, 因此上述的媒体查询等价于:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-keyword\">not</span> (screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>))), print <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"利用查询结果扩展设计\"><a href=\"#利用查询结果扩展设计\" class=\"headerlink\" title=\"利用查询结果扩展设计\"></a>利用查询结果扩展设计</h1><p>上述在CSS中利用<code>@media</code>可以实现响应式的设计, 如果我们希望在js/ts中使用媒体查询的结果呢? 利用媒体查询列表进行设计可以帮助我们实现更加自由的设计.</p>\n<ul>\n<li><p>使用<code>window.matchMedia()</code>方法存放媒体查询结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 检测设备的旋转方向是否为纵向</span><br><span class=\"hljs-keyword\">var</span> mediaQueryList = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>检查属性<code>matches</code>获取对应的查询结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">if (mediaQueryList<span class=\"hljs-selector-class\">.matches</span>) &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向为纵向 portrait */</span><br>&#125; else &#123;<br>  <span class=\"hljs-comment\">/* 设备的旋转方向不是纵向，也就是横向 landscape */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>addListener()</code>方法注册监听器, 持续监听查询列表的结果</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// 定义媒体查询字符串</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;(orientation: portrait)&quot;</span>;<br><br><span class=\"hljs-comment\">// 创建查询列表</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mediaQueryList</span>: <span class=\"hljs-title class_\">MediaQueryList</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(mediaQueryString);<br><br><span class=\"hljs-comment\">// 定义回调函数，使用 MediaQueryListEvent 类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleOrientationChange</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">event</span>: <span class=\"hljs-title class_\">MediaQueryListEvent</span></span>): <span class=\"hljs-built_in\">void</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// 媒体查询匹配（竖屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to portrait&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行竖屏时的逻辑</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 媒体查询不匹配（横屏）</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Orientation changed to landscape&quot;</span>);<br>    <span class=\"hljs-comment\">// 在这里执行横屏时的逻辑</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 先运行一次回调函数，传入 MediaQueryList 对象</span><br><span class=\"hljs-title function_\">handleOrientationChange</span>(&#123;<br>    <span class=\"hljs-attr\">matches</span>: mediaQueryList.<span class=\"hljs-property\">matches</span>,<br>    <span class=\"hljs-attr\">media</span>: mediaQueryList.<span class=\"hljs-property\">media</span>,<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>&#125; <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MediaQueryListEvent</span>);<br><br><span class=\"hljs-comment\">// 为查询列表注册监听器，同时将回调函数传给监听器</span><br>mediaQueryList.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, handleOrientationChange);<br><br><span class=\"hljs-comment\">// (可选) 在组件卸载时或不再需要监听时，移除事件监听器</span><br><span class=\"hljs-comment\">// mediaQueryList.removeEventListener(&#x27;change&#x27;, handleOrientationChange);</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Bird","date":"2025-01-07T16:00:00.000Z","excerpt":"呜呜呜占位","_content":"我盘旋的目光是漂泊不息的倦鸟\n越过人海 落入你乌黑瞳仁中的夜\n\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 2em;\n}\n\n</style>","source":"_posts/poets/bird.md","raw":"---\ntitle: Bird\ndate: 2025-01-08 00:00:00\ntags: poet\ncategories: poets\nexcerpt: 呜呜呜占位\n---\n我盘旋的目光是漂泊不息的倦鸟\n越过人海 落入你乌黑瞳仁中的夜\n\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 2em;\n}\n\n</style>","slug":"poets/bird","published":1,"updated":"2025-01-08T13:03:26.718Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c789000duscu3vfj91qc","content":"<p>我盘旋的目光是漂泊不息的倦鸟<br>越过人海 落入你乌黑瞳仁中的夜</p>\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 2em;\n}\n\n</style>","more":"<p>我盘旋的目光是漂泊不息的倦鸟<br>越过人海 落入你乌黑瞳仁中的夜</p>\n<style>\n\n.markdown-body {\n    font-size: 1.2em;\n    text-align: center;\n    line-height: 2em;\n}\n\n</style>"},{"title":"社会心理学","date":"2025-01-09T01:23:32.000Z","excerpt":"一些心理学","math":true,"index_img":"/img/社会心理学.png","banner_img":"/img/社会心理学.png","_content":"# 社会知觉\n## 非语言线索\n**面部表情反馈假设**: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;\n\n## 印象形成\n顺序效应\n- 首因效应: 最初获得的信息影响更大, 即第一印象效应;\n- 近因效应: 后来获得的信息影响更大, 即新颖效应;\n\n晕轮效应\n- 对一个人的某种特征 **形成** 好或坏的印象 **之后**, 据此推论其他方面的特征;\n- 与首因效应的区别: \n> 前者发生在初步印象形成之后, 后者发生在初步印象形成之前;\n\n投射效应\n- 在认知和形成他人印象时，认为他人与自己具有**相似**的特性;\n- 将自己的情感、特性投射到他人身上并强加于他人;\n\n### 期望效应\n***Self-fulfilling prophecy***\n> 自我实现预言 \n\n- “预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;\n- 人们的信念会影响他们的行为;\n\n可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. \n\n## 归因 \n> Attribution theory\n\n**归因**, 指观察者从他人的行为推论出行为原因、因果关系。\n\n**归因理论**, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。\n- $\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 --外因\n- $\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 --内因\n\n### 归因偏差\n**基本归因错误**: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;\n\n**行为者-观察者偏差**: \n- 归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;\n- 为什么会产生上述区别?\n  - 对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;\n  - 人们倾向于利用 **可得性** 高的信息来处理问题\n> 根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 **鲜明对比**;\n> 对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.\n---\n**错误共识效应**(False consensus effect): \n- 也称为 **虚假一致性效应**;\n- 指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;\n- 这同时导致人们倾向于与自己 **相似** 的个体交往;\n---\n**公平世界信念**: 指的是相信\"善有善报,恶有恶报\"而导致的归因偏差.\n- 认为每个人都应该为自己的行为负责;\n- 分析行为的原因时, 倾向于追溯个人自身的原因;\n---\n**动机性归因偏差**: \n- 倾向于将自己的成功归因于内在因素、失败归因于外在因素;\n- 而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;\n\n\n# 自我\n## 自我概念\n- $\\underline{自我知觉}$: 对自己持有的信念之集合;\n- $\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;\n- $\\underline{虚假一致性效应}$: \n\n\n\n","source":"_posts/社会心理学.md","raw":"---\ntitle: 社会心理学\ndate: 2025-01-09 09:23:32\ntags:\ncategories:\nexcerpt: 一些心理学\nmath: true\nindex_img: /img/社会心理学.png\nbanner_img: /img/社会心理学.png\n---\n# 社会知觉\n## 非语言线索\n**面部表情反馈假设**: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;\n\n## 印象形成\n顺序效应\n- 首因效应: 最初获得的信息影响更大, 即第一印象效应;\n- 近因效应: 后来获得的信息影响更大, 即新颖效应;\n\n晕轮效应\n- 对一个人的某种特征 **形成** 好或坏的印象 **之后**, 据此推论其他方面的特征;\n- 与首因效应的区别: \n> 前者发生在初步印象形成之后, 后者发生在初步印象形成之前;\n\n投射效应\n- 在认知和形成他人印象时，认为他人与自己具有**相似**的特性;\n- 将自己的情感、特性投射到他人身上并强加于他人;\n\n### 期望效应\n***Self-fulfilling prophecy***\n> 自我实现预言 \n\n- “预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;\n- 人们的信念会影响他们的行为;\n\n可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. \n\n## 归因 \n> Attribution theory\n\n**归因**, 指观察者从他人的行为推论出行为原因、因果关系。\n\n**归因理论**, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。\n- $\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 --外因\n- $\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 --内因\n\n### 归因偏差\n**基本归因错误**: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;\n\n**行为者-观察者偏差**: \n- 归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;\n- 为什么会产生上述区别?\n  - 对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;\n  - 人们倾向于利用 **可得性** 高的信息来处理问题\n> 根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 **鲜明对比**;\n> 对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.\n---\n**错误共识效应**(False consensus effect): \n- 也称为 **虚假一致性效应**;\n- 指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;\n- 这同时导致人们倾向于与自己 **相似** 的个体交往;\n---\n**公平世界信念**: 指的是相信\"善有善报,恶有恶报\"而导致的归因偏差.\n- 认为每个人都应该为自己的行为负责;\n- 分析行为的原因时, 倾向于追溯个人自身的原因;\n---\n**动机性归因偏差**: \n- 倾向于将自己的成功归因于内在因素、失败归因于外在因素;\n- 而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;\n\n\n# 自我\n## 自我概念\n- $\\underline{自我知觉}$: 对自己持有的信念之集合;\n- $\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;\n- $\\underline{虚假一致性效应}$: \n\n\n\n","slug":"社会心理学","published":1,"updated":"2025-01-09T05:12:27.902Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c78a000euscu00uzbg9r","content":"<h1 id=\"社会知觉\"><a href=\"#社会知觉\" class=\"headerlink\" title=\"社会知觉\"></a>社会知觉</h1><h2 id=\"非语言线索\"><a href=\"#非语言线索\" class=\"headerlink\" title=\"非语言线索\"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p>\n<h2 id=\"印象形成\"><a href=\"#印象形成\" class=\"headerlink\" title=\"印象形成\"></a>印象形成</h2><p>顺序效应</p>\n<ul>\n<li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li>\n<li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li>\n</ul>\n<p>晕轮效应</p>\n<ul>\n<li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li>\n<li>与首因效应的区别: <blockquote>\n<p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p>\n</blockquote>\n</li>\n</ul>\n<p>投射效应</p>\n<ul>\n<li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li>\n<li>将自己的情感、特性投射到他人身上并强加于他人;</li>\n</ul>\n<h3 id=\"期望效应\"><a href=\"#期望效应\" class=\"headerlink\" title=\"期望效应\"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p>\n<blockquote>\n<p>自我实现预言 </p>\n</blockquote>\n<ul>\n<li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li>\n<li>人们的信念会影响他们的行为;</li>\n</ul>\n<p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p>\n<h2 id=\"归因\"><a href=\"#归因\" class=\"headerlink\" title=\"归因\"></a>归因</h2><blockquote>\n<p>Attribution theory</p>\n</blockquote>\n<p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p>\n<p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p>\n<ul>\n<li>$\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li>\n<li>$\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li>\n</ul>\n<h3 id=\"归因偏差\"><a href=\"#归因偏差\" class=\"headerlink\" title=\"归因偏差\"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p>\n<p><strong>行为者-观察者偏差</strong>: </p>\n<ul>\n<li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li>\n<li>为什么会产生上述区别?<ul>\n<li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li>\n<li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote>\n<p>根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>错误共识效应</strong>(False consensus effect): </p>\n<ul>\n<li>也称为 <strong>虚假一致性效应</strong>;</li>\n<li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li>\n<li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li>\n</ul>\n<hr>\n<p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p>\n<ul>\n<li>认为每个人都应该为自己的行为负责;</li>\n<li>分析行为的原因时, 倾向于追溯个人自身的原因;</li>\n</ul>\n<hr>\n<p><strong>动机性归因偏差</strong>: </p>\n<ul>\n<li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li>\n<li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li>\n</ul>\n<h1 id=\"自我\"><a href=\"#自我\" class=\"headerlink\" title=\"自我\"></a>自我</h1><h2 id=\"自我概念\"><a href=\"#自我概念\" class=\"headerlink\" title=\"自我概念\"></a>自我概念</h2><ul>\n<li>$\\underline{自我知觉}$: 对自己持有的信念之集合;</li>\n<li>$\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li>\n<li>$\\underline{虚假一致性效应}$: </li>\n</ul>\n","more":"<h1 id=\"社会知觉\"><a href=\"#社会知觉\" class=\"headerlink\" title=\"社会知觉\"></a>社会知觉</h1><h2 id=\"非语言线索\"><a href=\"#非语言线索\" class=\"headerlink\" title=\"非语言线索\"></a>非语言线索</h2><p><strong>面部表情反馈假设</strong>: 人为表现某种面部表情, 可以导致相应情绪体验的产生或增强;</p>\n<h2 id=\"印象形成\"><a href=\"#印象形成\" class=\"headerlink\" title=\"印象形成\"></a>印象形成</h2><p>顺序效应</p>\n<ul>\n<li>首因效应: 最初获得的信息影响更大, 即第一印象效应;</li>\n<li>近因效应: 后来获得的信息影响更大, 即新颖效应;</li>\n</ul>\n<p>晕轮效应</p>\n<ul>\n<li>对一个人的某种特征 <strong>形成</strong> 好或坏的印象 <strong>之后</strong>, 据此推论其他方面的特征;</li>\n<li>与首因效应的区别: <blockquote>\n<p>前者发生在初步印象形成之后, 后者发生在初步印象形成之前;</p>\n</blockquote>\n</li>\n</ul>\n<p>投射效应</p>\n<ul>\n<li>在认知和形成他人印象时，认为他人与自己具有<strong>相似</strong>的特性;</li>\n<li>将自己的情感、特性投射到他人身上并强加于他人;</li>\n</ul>\n<h3 id=\"期望效应\"><a href=\"#期望效应\" class=\"headerlink\" title=\"期望效应\"></a>期望效应</h3><p><strong><em>Self-fulfilling prophecy</em></strong></p>\n<blockquote>\n<p>自我实现预言 </p>\n</blockquote>\n<ul>\n<li>“预测”或期待某事的社会心理现象，而这种“预测”或期望之所以成真，只是因为该人相信或预期它会发生;</li>\n<li>人们的信念会影响他们的行为;</li>\n</ul>\n<p>可见迹象,感知和信念共同影响自我实现预言成为现实的可能性. </p>\n<h2 id=\"归因\"><a href=\"#归因\" class=\"headerlink\" title=\"归因\"></a>归因</h2><blockquote>\n<p>Attribution theory</p>\n</blockquote>\n<p><strong>归因</strong>, 指观察者从他人的行为推论出行为原因、因果关系。</p>\n<p><strong>归因理论</strong>, 指研究人们如何做出归因，以及为何在某情况做出某种归因，在另一情况做出另种归因的理论。</p>\n<ul>\n<li>$\\underline{情境归因}$: 将行为发生解释为情境（环境）因素使然者 —外因</li>\n<li>$\\underline{性格归因}$: 指个体将行为之发生解释为自己性格使然 —内因</li>\n</ul>\n<h3 id=\"归因偏差\"><a href=\"#归因偏差\" class=\"headerlink\" title=\"归因偏差\"></a>归因偏差</h3><p><strong>基本归因错误</strong>: 解释他人行为时, 高估特质和态度的作用, 而低估情境的影响;</p>\n<p><strong>行为者-观察者偏差</strong>: </p>\n<ul>\n<li>归因他人的行为时, 倾向于内部归因;归因自身行为时, 倾向于外部归因;</li>\n<li>为什么会产生上述区别?<ul>\n<li>对于行为的信息数量和类型, 因自身和他人的区别在了解程度上存在差异;</li>\n<li>人们倾向于利用 <strong>可得性</strong> 高的信息来处理问题<blockquote>\n<p>根据$\\underline{格式塔原理}$, 可得性高,即与背景形成 <strong>鲜明对比</strong>;<br>对于行为者,它代表着外部环境; 对于观察者, 他人的行为则构成了注意的中心.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>错误共识效应</strong>(False consensus effect): </p>\n<ul>\n<li>也称为 <strong>虚假一致性效应</strong>;</li>\n<li>指倾向于认为自己的观点、信念、特征或行为比实际情况更广泛地被认同, 从而倾向于根据自己的信念进行推论;</li>\n<li>这同时导致人们倾向于与自己 <strong>相似</strong> 的个体交往;</li>\n</ul>\n<hr>\n<p><strong>公平世界信念</strong>: 指的是相信”善有善报,恶有恶报”而导致的归因偏差.</p>\n<ul>\n<li>认为每个人都应该为自己的行为负责;</li>\n<li>分析行为的原因时, 倾向于追溯个人自身的原因;</li>\n</ul>\n<hr>\n<p><strong>动机性归因偏差</strong>: </p>\n<ul>\n<li>倾向于将自己的成功归因于内在因素、失败归因于外在因素;</li>\n<li>而观察和评价他人的行为时，倾向于将成功归因于外在因素，将失败归因于内在因素;</li>\n</ul>\n<h1 id=\"自我\"><a href=\"#自我\" class=\"headerlink\" title=\"自我\"></a>自我</h1><h2 id=\"自我概念\"><a href=\"#自我概念\" class=\"headerlink\" title=\"自我概念\"></a>自我概念</h2><ul>\n<li>$\\underline{自我知觉}$: 对自己持有的信念之集合;</li>\n<li>$\\underline{自我中心思维}$: 对自我的感觉处于意识的核心;</li>\n<li>$\\underline{虚假一致性效应}$: </li>\n</ul>\n"},{"title":"My New Post","date":"2025-01-08T07:06:40.000Z","math":true,"excerpt":"尝试修改简介","_content":"### 犯错问题\n\n第一类错误: $\\alpha = P_{H_0为真} \\\\{落在拒绝域\\\\}$\n\n第二类错误: $\\beta = P_{H_0为假} \\\\{落在接受域\\\\}$ \n\n解题策略:\n\n1. 根据犯错类型求出包含参数的式子;\n2. 根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);\n3. 然后根据已知分布求解概率.","source":"_posts/course_notes/My-New-Post.md","raw":"---\ntitle: My New Post\ndate: 2025-01-08 15:06:40\ntags: \nmath: true\nexcerpt: 尝试修改简介\n---\n### 犯错问题\n\n第一类错误: $\\alpha = P_{H_0为真} \\\\{落在拒绝域\\\\}$\n\n第二类错误: $\\beta = P_{H_0为假} \\\\{落在接受域\\\\}$ \n\n解题策略:\n\n1. 根据犯错类型求出包含参数的式子;\n2. 根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);\n3. 然后根据已知分布求解概率.","slug":"course_notes/My-New-Post","published":1,"updated":"2025-01-08T09:20:51.592Z","comments":1,"layout":"post","photos":[],"_id":"cm5p4c78a000huscu6jsddh5w","content":"<h3 id=\"犯错问题\"><a href=\"#犯错问题\" class=\"headerlink\" title=\"犯错问题\"></a>犯错问题</h3><p>第一类错误: $\\alpha = P_{H_0为真} \\{落在拒绝域\\}$</p>\n<p>第二类错误: $\\beta = P_{H_0为假} \\{落在接受域\\}$ </p>\n<p>解题策略:</p>\n<ol>\n<li>根据犯错类型求出包含参数的式子;</li>\n<li>根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);</li>\n<li>然后根据已知分布求解概率.</li>\n</ol>\n","more":"<h3 id=\"犯错问题\"><a href=\"#犯错问题\" class=\"headerlink\" title=\"犯错问题\"></a>犯错问题</h3><p>第一类错误: $\\alpha = P_{H_0为真} \\{落在拒绝域\\}$</p>\n<p>第二类错误: $\\beta = P_{H_0为假} \\{落在接受域\\}$ </p>\n<p>解题策略:</p>\n<ol>\n<li>根据犯错类型求出包含参数的式子;</li>\n<li>根据条件, 将参数构造成一个已知分布的整体(等式左右同时变形);</li>\n<li>然后根据已知分布求解概率.</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm5p4c7840001uscu6zm41q8s","category_id":"cm5p4c7860004uscuedwucojm","_id":"cm5p4c7890009uscu0elvgrye"},{"post_id":"cm5p4c7880008uscu1zwn26jw","category_id":"cm5p4c7860004uscuedwucojm","_id":"cm5p4c789000buscu4p2xefhw"},{"post_id":"cm5p4c789000duscu3vfj91qc","category_id":"cm5p4c78a000fuscug0oqflg7","_id":"cm5p4c78b000juscu4ebufwa6"}],"PostTag":[{"post_id":"cm5p4c7870005uscuc6ie7rl7","tag_id":"cm5p4c7880007uscu1frc3w8i","_id":"cm5p4c789000auscuhkmb81ff"},{"post_id":"cm5p4c789000duscu3vfj91qc","tag_id":"cm5p4c78a000guscu08ru3xfy","_id":"cm5p4c78b000iuscu95x64y6x"}],"Tag":[{"name":"杂记","_id":"cm5p4c7880007uscu1frc3w8i"},{"name":"poet","_id":"cm5p4c78a000guscu08ru3xfy"}]}}